/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 167:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getInstallationAri = exports.getEnvironmentAri = exports.getAppAri = void 0;
const ari_1 = __webpack_require__(752);
const getAppAri = (appId) => ari_1.EcosystemAppAri.create({ appId });
exports.getAppAri = getAppAri;
const getEnvironmentAri = (appId, environmentId) => ari_1.EcosystemEnvironmentAri.create({ appId, environmentId });
exports.getEnvironmentAri = getEnvironmentAri;
const getInstallationAri = (installationId) => ari_1.EcosystemInstallationAri.create({ installationId });
exports.getInstallationAri = getInstallationAri;


/***/ }),

/***/ 742:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProxyRequestError = exports.InvalidRemoteError = exports.NeedsAuthenticationError = exports.InvalidWorkspaceRequestedError = exports.RequestProductNotAllowedError = exports.ProductEndpointNotAllowedError = exports.ExternalEndpointNotAllowedError = exports.NotAllowedError = exports.FetchError = exports.HttpError = exports.isExpectedError = exports.isHostedCodeError = exports.isForgePlatformError = exports.PROXY_ERR = exports.INVALID_REMOTE_ERR = exports.NEEDS_AUTHENTICATION_ERR = exports.FUNCTION_FETCH_ERR = exports.REQUEST_EGRESS_ALLOWLIST_ERR = exports.FUNCTION_ERR = void 0;
exports.FUNCTION_ERR = 'FUNCTION_ERR';
exports.REQUEST_EGRESS_ALLOWLIST_ERR = 'REQUEST_EGRESS_ALLOWLIST_ERR';
exports.FUNCTION_FETCH_ERR = 'FUNCTION_FETCH_ERR';
exports.NEEDS_AUTHENTICATION_ERR = 'NEEDS_AUTHENTICATION_ERR';
exports.INVALID_REMOTE_ERR = 'INVALID_REMOTE_ERR';
exports.PROXY_ERR = 'PROXY_ERR';
function isForgePlatformError(err) {
    return [exports.REQUEST_EGRESS_ALLOWLIST_ERR, exports.FUNCTION_FETCH_ERR, exports.NEEDS_AUTHENTICATION_ERR, exports.PROXY_ERR].includes(err.name);
}
exports.isForgePlatformError = isForgePlatformError;
function isHostedCodeError(err) {
    return [exports.FUNCTION_ERR, exports.REQUEST_EGRESS_ALLOWLIST_ERR, exports.FUNCTION_FETCH_ERR, exports.NEEDS_AUTHENTICATION_ERR].includes(typeof err === 'string' ? err : err.name);
}
exports.isHostedCodeError = isHostedCodeError;
function isExpectedError(err) {
    return err.name === exports.NEEDS_AUTHENTICATION_ERR && !!err.options?.isExpectedError;
}
exports.isExpectedError = isExpectedError;
class HttpError extends Error {
    status;
    constructor(message) {
        super(message);
    }
}
exports.HttpError = HttpError;
class FetchError extends Error {
    constructor(cause) {
        super(cause);
        this.stack = undefined;
        this.name = exports.FUNCTION_FETCH_ERR;
    }
}
exports.FetchError = FetchError;
class NotAllowedError extends HttpError {
    constructor(message) {
        super(message);
        this.stack = undefined;
        this.name = exports.REQUEST_EGRESS_ALLOWLIST_ERR;
        this.status = 403;
    }
}
exports.NotAllowedError = NotAllowedError;
class ExternalEndpointNotAllowedError extends NotAllowedError {
    constructor(failedURL) {
        super(`URL not included in the external fetch backend permissions: ${failedURL}. Visit go.atlassian.com/forge-egress for more information.`);
    }
}
exports.ExternalEndpointNotAllowedError = ExternalEndpointNotAllowedError;
class ProductEndpointNotAllowedError extends NotAllowedError {
    constructor(failedURL) {
        super(`URL not allowed: ${failedURL}.`);
    }
}
exports.ProductEndpointNotAllowedError = ProductEndpointNotAllowedError;
class RequestProductNotAllowedError extends NotAllowedError {
    constructor(requestedProduct, invocationProduct) {
        super(`Request ${requestedProduct} is not allowed from ${invocationProduct} context.`);
    }
}
exports.RequestProductNotAllowedError = RequestProductNotAllowedError;
class InvalidWorkspaceRequestedError extends NotAllowedError {
    constructor(failedURL) {
        super(`Invalid workspace requested in URL: ${failedURL}.`);
    }
}
exports.InvalidWorkspaceRequestedError = InvalidWorkspaceRequestedError;
class NeedsAuthenticationError extends HttpError {
    serviceKey;
    options;
    constructor(error, serviceKey, options) {
        super(error);
        this.serviceKey = serviceKey;
        this.options = options;
        this.stack = undefined;
        this.name = exports.NEEDS_AUTHENTICATION_ERR;
        this.status = 401;
    }
}
exports.NeedsAuthenticationError = NeedsAuthenticationError;
class InvalidRemoteError extends HttpError {
    remoteKey;
    constructor(error, remoteKey) {
        super(error);
        this.remoteKey = remoteKey;
        this.name = exports.INVALID_REMOTE_ERR;
        this.status = 400;
    }
}
exports.InvalidRemoteError = InvalidRemoteError;
class ProxyRequestError extends HttpError {
    status;
    errorCode;
    constructor(status, errorCode) {
        super(`Forge platform failed to process runtime HTTP request - ${status} - ${errorCode}`);
        this.status = status;
        this.errorCode = errorCode;
        this.name = exports.PROXY_ERR;
    }
}
exports.ProxyRequestError = ProxyRequestError;


/***/ }),

/***/ 265:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getSandboxRuntimeAPI = exports.getNodeRuntimeAPI = exports.addMagicAgent = exports.handleProxyResponseErrors = exports.getForgeProxyError = exports.createRemoteUrlWithPath = exports.fetchRemote = exports.__fetchProduct = void 0;
const tslib_1 = __webpack_require__(635);
const node_fetch_1 = tslib_1.__importStar(__webpack_require__(540));
const _1 = __webpack_require__(929);
const runtime_1 = __webpack_require__(429);
const polyfill_response_1 = __webpack_require__(124);
const errors_1 = __webpack_require__(742);
async function wrapInMetrics(options, cb) {
    const metrics = (0, runtime_1.__getRuntime)().metrics;
    metrics.counter(options.name, options.tags).incr();
    const timer = metrics.timing(options.name, options.tags).measure();
    try {
        return await cb();
    }
    finally {
        timer.stop();
    }
}
function __fetchProduct(args) {
    return async (path, init) => {
        const url = productURL(args.remote, path);
        init = (0, exports.addMagicAgent)(init);
        const defaultHeaders = getDefaultHeaders(init.headers, args);
        init.headers = { ...init.headers, ...defaultHeaders };
        const response = await (0, node_fetch_1.default)(url, init);
        (0, exports.handleProxyResponseErrors)(response);
        return response;
    };
}
exports.__fetchProduct = __fetchProduct;
function fetchRemote(args) {
    return async (path, init) => {
        const remoteUrl = createRemoteUrlWithPath(`https://${args.remote}`, path);
        init = (0, exports.addMagicAgent)(init, 'EXTERNAL_AUTH_REQUEST');
        init.headers = {
            ...init.headers,
            authorization: `Forge user ${args.provider} ${args.account}`
        };
        const response = await (0, node_fetch_1.default)(remoteUrl, init);
        (0, exports.handleProxyResponseErrors)(response);
        return response;
    };
}
exports.fetchRemote = fetchRemote;
function createRemoteUrlWithPath(baseUrl, path) {
    const remoteUrl = new URL(baseUrl);
    const url = new URL(path, remoteUrl);
    if (url.hostname !== remoteUrl.hostname) {
        throw new Error(`Invalid path provided ${path}`);
    }
    remoteUrl.searchParams.append('path', path);
    return remoteUrl;
}
exports.createRemoteUrlWithPath = createRemoteUrlWithPath;
function getDefaultRemote(provider) {
    const externalAuthProvider = findExternalAuthProviderConfigOrThrow(provider);
    if (!externalAuthProvider.remotes.length) {
        throw new Error(`Missing remote config for provider ${provider}`);
    }
    return externalAuthProvider.remotes[0].key;
}
function findExternalAuthProviderConfigOrThrow(provider) {
    const { externalAuth } = (0, runtime_1.__getRuntime)();
    const externalAuthProvider = externalAuth?.find((externalAuthMetaData) => {
        return externalAuthMetaData.service === provider;
    });
    if (!externalAuthProvider) {
        throw new Error(`Bad provider or missing config for provider ${provider}`);
    }
    return externalAuthProvider;
}
const ATLASSIAN_TOKEN_SERVICE_KEY = 'atlassian-token-service-key';
const getForgeProxyError = (response) => response.headers.get('forge-proxy-error');
exports.getForgeProxyError = getForgeProxyError;
const handleProxyResponseErrors = (response) => {
    const errorReason = (0, exports.getForgeProxyError)(response);
    if (errorReason) {
        if (errorReason === 'NEEDS_AUTHENTICATION_ERR') {
            throw new errors_1.NeedsAuthenticationError('Authentication Required', ATLASSIAN_TOKEN_SERVICE_KEY);
        }
        throw new errors_1.ProxyRequestError(response.status, errorReason);
    }
};
exports.handleProxyResponseErrors = handleProxyResponseErrors;
const getDefaultHeaders = (headersInit, args) => {
    let defaultHeaders = {};
    const headers = new node_fetch_1.Headers(headersInit);
    if (!headers.has('Content-Type')) {
        defaultHeaders = { 'Content-Type': 'application/json' };
    }
    if (!headers.has('authorization')) {
        defaultHeaders = { ...defaultHeaders, authorization: `Forge ${args.provider}` };
    }
    return defaultHeaders;
};
function productURL(remote, path) {
    if (!path.startsWith('/')) {
        path = '/' + path;
    }
    return `https://${remote}${path}`;
}
function lazyThrowNeedsAuthenticationError(serviceKey) {
    return async (scopes) => wrapInMetrics({ name: 'api.asUser.withProvider.requestCredentials', tags: { passingScopes: String(!!scopes) } }, async () => {
        throw new errors_1.NeedsAuthenticationError('Authentication Required', serviceKey, { scopes, isExpectedError: true });
    });
}
function buildExternalAuthAccountsInfo(provider, remote) {
    const { accounts } = findExternalAuthProviderConfigOrThrow(provider);
    const buildAccountModel = (account) => {
        const { externalAccountId: id, ...rest } = account;
        return { ...rest, id };
    };
    const buildExternalAuthAccountMethods = (account, outboundAuthAccountId) => ({
        hasCredentials: async (scopes) => wrapInMetrics({ name: 'api.asUser.withProvider.hasCredentials', tags: { passingScopes: String(!!scopes) } }, async () => !scopes || scopes.every((scope) => account.scopes.includes(scope))),
        requestCredentials: lazyThrowNeedsAuthenticationError(provider),
        getAccount: async () => wrapInMetrics({ name: 'api.asUser.withProvider.getAccount' }, async () => account),
        fetch: (0, _1.wrapWithRouteUnwrapper)(fetchRemote({ provider, remote: remote ?? getDefaultRemote(provider), account: outboundAuthAccountId }))
    });
    return accounts.map((account) => {
        const authAccount = buildAccountModel(account);
        return {
            account: authAccount,
            methods: buildExternalAuthAccountMethods(authAccount, account.id)
        };
    });
}
const addMagicAgent = (init, agentOverride) => ({
    ...init,
    agent: (agentOverride ?? 'FORGE_PRODUCT_REQUEST')
});
exports.addMagicAgent = addMagicAgent;
const throwNotImplementedError = () => {
    throw new Error('not implemented');
};
const withProvider = (provider, remote) => {
    const accountsInfo = buildExternalAuthAccountsInfo(provider, remote);
    const defaultAccountInfo = accountsInfo.length ? accountsInfo[0] : undefined;
    const lazyThrowNoValidCredentialsError = () => {
        return (url) => {
            throw new Error(`Fetch failed for ${remote ? `remote '${remote}', ` : ''}provider '${provider}', path '${url}' no credentials previously requested`);
        };
    };
    return {
        hasCredentials: async (scopes) => {
            return defaultAccountInfo
                ? await defaultAccountInfo.methods.hasCredentials(scopes)
                : await wrapInMetrics({ name: 'api.asUser.withProvider.hasCredentials', tags: { passingScopes: String(!!scopes) } }, async () => false);
        },
        getAccount: async () => wrapInMetrics({ name: 'api.asUser.withProvider.getAccount' }, async () => {
            return defaultAccountInfo ? defaultAccountInfo.account : undefined;
        }),
        requestCredentials: lazyThrowNeedsAuthenticationError(provider),
        listCredentials: throwNotImplementedError,
        listAccounts: async () => wrapInMetrics({ name: 'api.asUser.withProvider.listAccounts' }, async () => {
            return accountsInfo.map(({ account }) => account);
        }),
        asAccount: (externalAccountId) => {
            const accountInfo = accountsInfo.find(({ account }) => account.id === externalAccountId);
            if (!accountInfo) {
                throw new Error(`No account with ID ${externalAccountId} found for provider ${provider}`);
            }
            return accountInfo.methods;
        },
        fetch: defaultAccountInfo ? defaultAccountInfo.methods.fetch : lazyThrowNoValidCredentialsError()
    };
};
function getNodeRuntimeAPI() {
    return {
        fetch: (0, _1.wrapWithRouteUnwrapper)(node_fetch_1.default),
        requestJira: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'none', remote: 'jira' })),
        requestConfluence: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'none', remote: 'confluence' })),
        requestBitbucket: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'none', remote: 'bitbucket' })),
        asUser: () => ({
            requestJira: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'user', remote: 'jira' })),
            requestConfluence: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'user', remote: 'confluence' })),
            requestBitbucket: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'user', remote: 'bitbucket' })),
            requestGraph: (0, _1.wrapRequestGraph)(__fetchProduct({ provider: 'user', remote: 'stargate' })),
            requestConnectedData: (0, _1.wrapRequestConnectedData)(__fetchProduct({ provider: 'user', remote: 'stargate' })),
            withProvider
        }),
        asApp: () => ({
            requestJira: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'app', remote: 'jira' })),
            requestConfluence: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'app', remote: 'confluence' })),
            requestBitbucket: (0, _1.wrapRequestProduct)(__fetchProduct({ provider: 'app', remote: 'bitbucket' })),
            requestGraph: (0, _1.wrapRequestGraph)(__fetchProduct({ provider: 'app', remote: 'stargate' })),
            requestConnectedData: (0, _1.wrapRequestConnectedData)(__fetchProduct({ provider: 'app', remote: 'stargate' }))
        })
    };
}
exports.getNodeRuntimeAPI = getNodeRuntimeAPI;
function getSandboxRuntimeAPI(api) {
    return (0, _1.wrapFetchApiMethods)(api, polyfill_response_1.transformResponse);
}
exports.getSandboxRuntimeAPI = getSandboxRuntimeAPI;


/***/ }),

/***/ 929:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wrapFetchApiMethods = exports.wrapWithRouteUnwrapper = exports.wrapRequestProduct = exports.wrapRequestConnectedData = exports.wrapRequestGraph = void 0;
const safeUrl_1 = __webpack_require__(228);
const wrapRequestGraph = (requestGraphApi) => (query, variables, headers = {}) => requestGraphApi('/graphql', {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify({
        query,
        ...(variables ? { variables } : {})
    })
});
exports.wrapRequestGraph = wrapRequestGraph;
const wrapRequestConnectedData = (fetch) => (path, init) => {
    const safeUrl = (0, safeUrl_1.requireSafeUrl)(path);
    return fetch(`/connected-data/${safeUrl.value.replace(/^\/+/, '')}`, init);
};
exports.wrapRequestConnectedData = wrapRequestConnectedData;
const wrapRequestProduct = (requestProduct) => (path, init) => {
    const safeUrl = (0, safeUrl_1.requireSafeUrl)(path);
    return requestProduct(safeUrl.value, init);
};
exports.wrapRequestProduct = wrapRequestProduct;
const wrapWithRouteUnwrapper = (fetch) => (path, init) => {
    const stringPath = (0, safeUrl_1.isRoute)(path) ? path.value : path;
    return fetch(stringPath, init);
};
exports.wrapWithRouteUnwrapper = wrapWithRouteUnwrapper;
const wrapFetchApiMethods = (api, wrapFetch) => {
    return {
        fetch: (0, exports.wrapWithRouteUnwrapper)(wrapFetch(api.fetch)),
        requestJira: (0, exports.wrapRequestProduct)(wrapFetch(api.requestJira)),
        requestConfluence: (0, exports.wrapRequestProduct)(wrapFetch(api.requestConfluence)),
        requestBitbucket: (0, exports.wrapRequestProduct)(wrapFetch(api.requestBitbucket)),
        asUser: () => ({
            requestJira: (0, exports.wrapRequestProduct)(wrapFetch(api.asUser().requestJira)),
            requestConfluence: (0, exports.wrapRequestProduct)(wrapFetch(api.asUser().requestConfluence)),
            requestBitbucket: (0, exports.wrapRequestProduct)(wrapFetch(api.asUser().requestBitbucket)),
            requestGraph: (0, exports.wrapRequestGraph)(wrapFetch(api.asUser().requestGraph)),
            requestConnectedData: (0, exports.wrapRequestConnectedData)(wrapFetch(api.asUser().requestConnectedData)),
            withProvider: (provider, remoteName, tokenId) => {
                const { hasCredentials, requestCredentials, listCredentials, fetch: withProviderFetch, listAccounts, getAccount, asAccount } = api.asUser().withProvider(provider, remoteName, tokenId);
                const wrappedRequestRemote = (0, exports.wrapWithRouteUnwrapper)(wrapFetch(withProviderFetch));
                return {
                    hasCredentials,
                    requestCredentials,
                    listCredentials,
                    fetch: wrappedRequestRemote,
                    listAccounts,
                    getAccount,
                    asAccount
                };
            }
        }),
        asApp: () => ({
            requestJira: (0, exports.wrapRequestProduct)(wrapFetch(api.asApp().requestJira)),
            requestConfluence: (0, exports.wrapRequestProduct)(wrapFetch(api.asApp().requestConfluence)),
            requestGraph: (0, exports.wrapRequestGraph)(wrapFetch(api.asApp().requestGraph)),
            requestBitbucket: (0, exports.wrapRequestProduct)(wrapFetch(api.asApp().requestBitbucket)),
            requestConnectedData: (0, exports.wrapRequestConnectedData)(wrapFetch(api.asApp().requestConnectedData))
        })
    };
};
exports.wrapFetchApiMethods = wrapFetchApiMethods;


/***/ }),

/***/ 124:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.transformResponse = void 0;
const node_fetch_1 = __webpack_require__(540);
const transformResponse = (fetchApi) => async (url, init) => {
    const response = await fetchApi(url, init);
    return {
        ...response,
        headers: new node_fetch_1.Headers(response.headers)
    };
};
exports.transformResponse = transformResponse;


/***/ }),

/***/ 391:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.invokeRemote = void 0;
const tslib_1 = __webpack_require__(635);
const node_fetch_1 = tslib_1.__importDefault(__webpack_require__(540));
const errors_1 = __webpack_require__(742);
const fetch_1 = __webpack_require__(265);
async function invokeRemote(remoteKey, options) {
    const { path, ...fetchOptions } = options;
    if (!remoteKey) {
        throw new Error('Missing remote key provided to invokeRemote');
    }
    if (!path) {
        throw new Error('Missing or empty path provided to invokeRemote');
    }
    const url = (0, fetch_1.createRemoteUrlWithPath)('https://atl-paas.net', path);
    url.searchParams.set('remoteKey', remoteKey);
    const init = (0, fetch_1.addMagicAgent)(fetchOptions, 'FORGE_REMOTE_COMPUTE_REQUEST');
    const response = await (0, node_fetch_1.default)(url, init);
    handleResponseErrors(response, remoteKey);
    return response;
}
exports.invokeRemote = invokeRemote;
function handleResponseErrors(response, remoteKey) {
    const forgeProxyError = (0, fetch_1.getForgeProxyError)(response);
    if (forgeProxyError === 'INVALID_REMOTE') {
        throw new errors_1.InvalidRemoteError(`Invalid remote key provided: "${remoteKey}"`, remoteKey);
    }
    (0, fetch_1.handleProxyResponseErrors)(response);
}


/***/ }),

/***/ 429:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.bindInvocationContext = exports.wrapInMetrics = exports.getAppContext = exports.__getRuntime = void 0;
const errors_1 = __webpack_require__(742);
const node_fetch_1 = __webpack_require__(540);
const ari_1 = __webpack_require__(167);
function __getRuntime() {
    const runtime = global.__forge_runtime__;
    if (!runtime) {
        throw new Error('Forge runtime not found.');
    }
    return runtime;
}
exports.__getRuntime = __getRuntime;
function getAppContext() {
    const { appId, appVersion, environmentId, environmentType, invocationId, installationId, moduleKey, license } = __getRuntime().appContext;
    return {
        appAri: (0, ari_1.getAppAri)(appId),
        appVersion,
        environmentAri: (0, ari_1.getEnvironmentAri)(appId, environmentId),
        environmentType,
        installationAri: (0, ari_1.getInstallationAri)(installationId),
        invocationId,
        moduleKey,
        license
    };
}
exports.getAppContext = getAppContext;
function wrapInMetrics(name, fn, { tags } = {}) {
    return async (...args) => {
        const { metrics } = __getRuntime();
        metrics.counter(name, tags).incr();
        const timer = metrics.timing(name, tags).measure();
        let success = true;
        try {
            return await fn(...args);
        }
        catch (e) {
            if (e instanceof errors_1.ProxyRequestError || e instanceof node_fetch_1.FetchError) {
                success = false;
            }
            throw e;
        }
        finally {
            timer.stop({ success: success.toString() });
        }
    };
}
exports.wrapInMetrics = wrapInMetrics;
function bindInvocationContext(fn) {
    const AsyncLocalStorage = (__webpack_require__(290).AsyncLocalStorage);
    return AsyncLocalStorage.bind(fn);
}
exports.bindInvocationContext = bindInvocationContext;


/***/ }),

/***/ 140:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authorize = void 0;
const auth_1 = __webpack_require__(318);
const __1 = __webpack_require__(274);
const authorize = () => {
    let accountId;
    if (global.api) {
        accountId = process.env.__CURRENT_USER_ACCOUNT_ID;
    }
    else {
        accountId = (0, __1.__getRuntime)().aaid;
    }
    if (!accountId) {
        throw new Error(`Couldn’t find the accountId of the invoking user. This API can only be used inside user-invoked modules.`);
    }
    return {
        ...(0, auth_1.authorizeConfluenceWithFetch)(async (path, opts) => {
            const res = await (0, __1.asUser)().requestConfluence((0, __1.assumeTrustedRoute)(path), opts);
            return res.json();
        }, accountId),
        ...(0, auth_1.authorizeJiraWithFetch)(async (path, opts) => {
            const res = await (0, __1.asUser)().requestJira((0, __1.assumeTrustedRoute)(path), opts);
            return res.json();
        }, accountId)
    };
};
exports.authorize = authorize;


/***/ }),

/***/ 274:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isExpectedError = exports.isHostedCodeError = exports.isForgePlatformError = exports.FUNCTION_ERR = exports.HttpError = exports.InvalidWorkspaceRequestedError = exports.NotAllowedError = exports.RequestProductNotAllowedError = exports.ProductEndpointNotAllowedError = exports.ExternalEndpointNotAllowedError = exports.FetchError = exports.ProxyRequestError = exports.NeedsAuthenticationError = exports.bindInvocationContext = exports.__getRuntime = exports.getAppContext = exports.routeFromAbsolute = exports.assumeTrustedRoute = exports.route = exports.SortOrder = exports.FilterConditions = exports.WhereConditions = exports.startsWith = exports.createRequestStargateAsApp = exports.__fetchProduct = exports.__requestAtlassianAsUser = exports.__requestAtlassianAsApp = exports.webTrigger = exports.storage = exports.invokeRemote = exports.requestBitbucket = exports.requestConfluence = exports.requestJira = exports.fetch = exports.authorize = exports.asApp = exports.asUser = exports.privacy = void 0;
const storage_1 = __webpack_require__(19);
const authorization_1 = __webpack_require__(140);
Object.defineProperty(exports, "authorize", ({ enumerable: true, get: function () { return authorization_1.authorize; } }));
const privacy_1 = __webpack_require__(317);
const webTrigger_1 = __webpack_require__(14);
Object.defineProperty(exports, "webTrigger", ({ enumerable: true, get: function () { return webTrigger_1.webTrigger; } }));
const fetch_and_storage_1 = __webpack_require__(541);
Object.defineProperty(exports, "__requestAtlassianAsApp", ({ enumerable: true, get: function () { return fetch_and_storage_1.__requestAtlassianAsApp; } }));
Object.defineProperty(exports, "__requestAtlassianAsUser", ({ enumerable: true, get: function () { return fetch_and_storage_1.__requestAtlassianAsUser; } }));
const remote_1 = __webpack_require__(391);
Object.defineProperty(exports, "invokeRemote", ({ enumerable: true, get: function () { return remote_1.invokeRemote; } }));
const fetch_1 = __webpack_require__(265);
Object.defineProperty(exports, "__fetchProduct", ({ enumerable: true, get: function () { return fetch_1.__fetchProduct; } }));
const fetchAPI = (0, fetch_and_storage_1.getFetchAPI)();
const asUser = fetchAPI.asUser;
exports.asUser = asUser;
const asApp = fetchAPI.asApp;
exports.asApp = asApp;
const fetch = fetchAPI.fetch;
exports.fetch = fetch;
const requestJira = fetchAPI.requestJira;
exports.requestJira = requestJira;
const requestConfluence = fetchAPI.requestConfluence;
exports.requestConfluence = requestConfluence;
const requestBitbucket = fetchAPI.requestBitbucket;
exports.requestBitbucket = requestBitbucket;
const storage = (0, storage_1.getStorageInstanceWithQuery)(new storage_1.GlobalStorage(fetch_and_storage_1.getContextAri, fetch_and_storage_1.__requestAtlassianAsApp, fetch_and_storage_1.getMetrics));
exports.storage = storage;
const API = {
    ...fetchAPI,
    invokeRemote: remote_1.invokeRemote
};
exports.privacy = {
    reportPersonalData: (0, privacy_1.createReportPersonalData)(fetch_and_storage_1.__requestAtlassianAsApp)
};
exports["default"] = API;
const createRequestStargateAsApp = () => fetch_and_storage_1.__requestAtlassianAsApp;
exports.createRequestStargateAsApp = createRequestStargateAsApp;
var storage_2 = __webpack_require__(19);
Object.defineProperty(exports, "startsWith", ({ enumerable: true, get: function () { return storage_2.startsWith; } }));
Object.defineProperty(exports, "WhereConditions", ({ enumerable: true, get: function () { return storage_2.WhereConditions; } }));
Object.defineProperty(exports, "FilterConditions", ({ enumerable: true, get: function () { return storage_2.FilterConditions; } }));
Object.defineProperty(exports, "SortOrder", ({ enumerable: true, get: function () { return storage_2.SortOrder; } }));
var safeUrl_1 = __webpack_require__(228);
Object.defineProperty(exports, "route", ({ enumerable: true, get: function () { return safeUrl_1.route; } }));
Object.defineProperty(exports, "assumeTrustedRoute", ({ enumerable: true, get: function () { return safeUrl_1.assumeTrustedRoute; } }));
Object.defineProperty(exports, "routeFromAbsolute", ({ enumerable: true, get: function () { return safeUrl_1.routeFromAbsolute; } }));
var runtime_1 = __webpack_require__(429);
Object.defineProperty(exports, "getAppContext", ({ enumerable: true, get: function () { return runtime_1.getAppContext; } }));
Object.defineProperty(exports, "__getRuntime", ({ enumerable: true, get: function () { return runtime_1.__getRuntime; } }));
Object.defineProperty(exports, "bindInvocationContext", ({ enumerable: true, get: function () { return runtime_1.bindInvocationContext; } }));
var errors_1 = __webpack_require__(742);
Object.defineProperty(exports, "NeedsAuthenticationError", ({ enumerable: true, get: function () { return errors_1.NeedsAuthenticationError; } }));
Object.defineProperty(exports, "ProxyRequestError", ({ enumerable: true, get: function () { return errors_1.ProxyRequestError; } }));
Object.defineProperty(exports, "FetchError", ({ enumerable: true, get: function () { return errors_1.FetchError; } }));
Object.defineProperty(exports, "ExternalEndpointNotAllowedError", ({ enumerable: true, get: function () { return errors_1.ExternalEndpointNotAllowedError; } }));
Object.defineProperty(exports, "ProductEndpointNotAllowedError", ({ enumerable: true, get: function () { return errors_1.ProductEndpointNotAllowedError; } }));
Object.defineProperty(exports, "RequestProductNotAllowedError", ({ enumerable: true, get: function () { return errors_1.RequestProductNotAllowedError; } }));
Object.defineProperty(exports, "NotAllowedError", ({ enumerable: true, get: function () { return errors_1.NotAllowedError; } }));
Object.defineProperty(exports, "InvalidWorkspaceRequestedError", ({ enumerable: true, get: function () { return errors_1.InvalidWorkspaceRequestedError; } }));
Object.defineProperty(exports, "HttpError", ({ enumerable: true, get: function () { return errors_1.HttpError; } }));
Object.defineProperty(exports, "FUNCTION_ERR", ({ enumerable: true, get: function () { return errors_1.FUNCTION_ERR; } }));
Object.defineProperty(exports, "isForgePlatformError", ({ enumerable: true, get: function () { return errors_1.isForgePlatformError; } }));
Object.defineProperty(exports, "isHostedCodeError", ({ enumerable: true, get: function () { return errors_1.isHostedCodeError; } }));
Object.defineProperty(exports, "isExpectedError", ({ enumerable: true, get: function () { return errors_1.isExpectedError; } }));


/***/ }),

/***/ 317:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createReportPersonalData = exports.LIMIT = exports.URL = void 0;
exports.URL = '/app/report-accounts';
exports.LIMIT = 90;
const createReportPersonalData = (requestAtlassian) => {
    return function fetchUpdates(accounts) {
        if (accounts.length === 0) {
            return Promise.resolve([]);
        }
        const request = requestAtlassian(exports.URL, {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ accounts: accounts.slice(0, exports.LIMIT) })
        }).then(async (resp) => {
            if (resp.status === 200) {
                return (await resp.json()).accounts;
            }
            if (resp.status === 204) {
                return [];
            }
            return Promise.reject(resp);
        });
        return Promise.all([request, fetchUpdates(accounts.slice(exports.LIMIT))]).then(([first, second]) => first.concat(second));
    };
};
exports.createReportPersonalData = createReportPersonalData;


/***/ }),

/***/ 541:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.__requestAtlassianAsUser = exports.__requestAtlassianAsApp = exports.getRequestStargate = exports.getMetrics = exports.getFetchAPI = exports.getContextAri = void 0;
const fetch_1 = __webpack_require__(265);
const runtime_1 = __webpack_require__(429);
function getContextAri() {
    return global.api?.__getAppAri?.() ?? (0, runtime_1.__getRuntime)().contextAri;
}
exports.getContextAri = getContextAri;
function getFetchAPI() {
    const { api: sandboxAPI } = global;
    if (sandboxAPI && Object.keys(sandboxAPI).length) {
        return (0, fetch_1.getSandboxRuntimeAPI)(sandboxAPI);
    }
    else {
        return (0, fetch_1.getNodeRuntimeAPI)();
    }
}
exports.getFetchAPI = getFetchAPI;
function getMetrics() {
    if (global.api) {
        return undefined;
    }
    return (0, runtime_1.__getRuntime)().metrics;
}
exports.getMetrics = getMetrics;
function getRequestStargate(provider) {
    if (provider !== 'app' && provider !== 'user') {
        throw new Error(`Unsupported provider: ${provider}`);
    }
    const sandboxApi = global.api;
    if (sandboxApi) {
        switch (provider) {
            case 'app':
                return sandboxApi.asApp().__requestAtlassian;
            case 'user':
                return sandboxApi.asUser().__requestAtlassian;
        }
    }
    return (0, fetch_1.__fetchProduct)({ provider, remote: 'stargate' });
}
exports.getRequestStargate = getRequestStargate;
exports.__requestAtlassianAsApp = getRequestStargate('app');
exports.__requestAtlassianAsUser = getRequestStargate('user');


/***/ }),

/***/ 228:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assumeTrustedRoute = exports.requireSafeUrl = exports.route = exports.routeFromAbsolute = exports.isRoute = void 0;
class ReadonlyRoute {
    value_;
    constructor(value_) {
        this.value_ = value_;
    }
    set value(_) {
        throw new Error('modification of a Route is not allowed');
    }
    get value() {
        return this.value_;
    }
}
function isRoute(x) {
    return x instanceof ReadonlyRoute;
}
exports.isRoute = isRoute;
function routeFromAbsolute(absolutePath) {
    const absoluteURL = new URL(absolutePath);
    return assumeTrustedRoute(`${absoluteURL.pathname}${absoluteURL.search}`);
}
exports.routeFromAbsolute = routeFromAbsolute;
const DOUBLE_DOT = ['..', '.%2e', '%2e.', '%2e%2e', '.%2E', '%2E.', '%2E%2e'];
const DIRECTORY_PATH = ['/', '\\'];
const ENDS_PATH = ['?', '#'];
function containsOneOf(needles, haystack) {
    return needles.some((needle) => haystack.includes(needle));
}
function escapeParameter(parameter, mode) {
    switch (mode) {
        case 'path':
            if (isRoute(parameter)) {
                return parameter.value;
            }
            parameter = String(parameter);
            if (containsOneOf(DOUBLE_DOT, parameter) ||
                containsOneOf(ENDS_PATH, parameter) ||
                containsOneOf(DIRECTORY_PATH, parameter)) {
                throw new Error('Disallowing path manipulation attempt. For more information see: https://go.atlassian.com/product-fetch-api-route');
            }
            return parameter;
        case 'query':
            if (isRoute(parameter)) {
                return encodeURIComponent(parameter.value);
            }
            else if (parameter instanceof URLSearchParams) {
                return parameter.toString();
            }
            else {
                return encodeURIComponent(parameter);
            }
    }
}
function route(template, ...parameters) {
    let mode = 'path';
    let result = '';
    for (let i = 0; i < template.length; i++) {
        const templateFragment = template[i];
        if (containsOneOf(ENDS_PATH, templateFragment)) {
            mode = 'query';
        }
        result += templateFragment;
        if (i >= parameters.length) {
            break;
        }
        result += escapeParameter(parameters[i], mode);
    }
    return new ReadonlyRoute(result);
}
exports.route = route;
function requireSafeUrl(url) {
    if (url instanceof ReadonlyRoute) {
        return url;
    }
    throw new Error(`You must create your route using the 'route' export from '@forge/api'.
See https://go.atlassian.com/forge-fetch-route for more information.`);
}
exports.requireSafeUrl = requireSafeUrl;
function assumeTrustedRoute(route) {
    return new ReadonlyRoute(route);
}
exports.assumeTrustedRoute = assumeTrustedRoute;


/***/ }),

/***/ 14:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.webTrigger = void 0;
const runtime_1 = __webpack_require__(429);
const fetch_and_storage_1 = __webpack_require__(541);
const proxyGetWebTriggerURL = (0, runtime_1.wrapInMetrics)('api.getWebTriggerUrl', async (webTriggerModuleKey, forceCreate) => {
    const runtime = (0, runtime_1.__getRuntime)();
    const response = await (0, fetch_and_storage_1.__requestAtlassianAsApp)('/graphql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            query: `
            mutation forge_app_createWebTriggerUrl($input: WebTriggerUrlInput!, $forceCreate: Boolean) {
              createWebTriggerUrl(input: $input, forceCreate: $forceCreate) {
                url
              }
            }
          `,
            variables: {
                input: {
                    appId: runtime.appContext.appId,
                    envId: runtime.appContext.environmentId,
                    triggerKey: webTriggerModuleKey,
                    contextId: runtime.contextAri
                },
                forceCreate
            }
        })
    });
    if (!response.ok) {
        throw new Error(`Internal error occurred: Failed to get web trigger URL: ${response.statusText}.`);
    }
    const responseBody = await response.json();
    if (!responseBody?.data?.createWebTriggerUrl?.url) {
        throw new Error(`Internal error occurred: Failed to get web trigger URL.`);
    }
    return responseBody.data.createWebTriggerUrl.url;
});
const proxyDeleteWebTriggerURL = (0, runtime_1.wrapInMetrics)('api.deleteWebTriggerUrl', async (webTriggerUrl) => {
    const callDelete = async (webTriggerUrlId) => {
        const response = await (0, fetch_and_storage_1.__requestAtlassianAsApp)('/graphql', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                query: `
            mutation forge_app_deleteWebTriggerUrl($id: ID!) {
              deleteWebTriggerUrl(id: $id) {
                success
                message
              }
            }
          `,
                variables: {
                    id: webTriggerUrlId
                }
            })
        });
        if (!response.ok) {
            throw new Error(`Internal error occurred: Failed to delete web trigger URL: ${response.statusText}.`);
        }
        const responseBody = await response.json();
        if (!responseBody?.data?.deleteWebTriggerUrl?.success) {
            const errorText = responseBody?.data?.deleteWebTriggerUrl?.message || 'unknown error';
            throw new Error(`Internal error occurred: Failed to delete web trigger URL: ${errorText}`);
        }
    };
    const urlIds = await exports.webTrigger.getUrlIds(webTriggerUrl);
    for (const urlId of urlIds) {
        await callDelete(urlId);
    }
});
const proxyGetWebTriggerUrlIds = (0, runtime_1.wrapInMetrics)('api.getWebTriggerUrlIds', async (webTriggerUrl) => {
    const runtime = (0, runtime_1.__getRuntime)();
    const response = await (0, fetch_and_storage_1.__requestAtlassianAsApp)('/graphql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            query: `
            query forge_app_webTriggerUrlsByAppContext($appId: ID!, $envId: ID!, $contextId: ID!) {
              webTriggerUrlsByAppContext(appId: $appId, envId: $envId, contextId: $contextId) {
                id
                url
              }
            }
          `,
            variables: {
                appId: runtime.appContext.appId,
                envId: runtime.appContext.environmentId,
                contextId: runtime.contextAri
            }
        })
    });
    if (!response.ok) {
        throw new Error(`Internal error occurred: Failed to get web trigger URLs: ${response.statusText}.`);
    }
    const responseBody = await response.json();
    if (!responseBody?.data?.webTriggerUrlsByAppContext || responseBody.data.webTriggerUrlsByAppContext.length == 0) {
        throw new Error('Internal error occurred: No web trigger URLs found');
    }
    const result = responseBody.data.webTriggerUrlsByAppContext
        .filter((webTriggerResult) => webTriggerResult.url == webTriggerUrl)
        .map((webTriggerResult) => webTriggerResult.id);
    if (!result || result.length == 0) {
        throw new Error('Internal error occurred: Web trigger URL matching URL not found');
    }
    return result;
});
exports.webTrigger = {
    getUrl: async (webTriggerModuleKey, forceCreate = false) => (global.api?.webTrigger?.getUrl ?? proxyGetWebTriggerURL)(webTriggerModuleKey, forceCreate),
    deleteUrl: async (webTriggerUrl) => (global.api?.webTrigger?.deleteUrl ?? proxyDeleteWebTriggerURL)(webTriggerUrl),
    getUrlIds: async (webTriggerUrl) => (global.api?.webTrigger?.getUrlIds ?? proxyGetWebTriggerUrlIds)(webTriggerUrl)
};


/***/ }),

/***/ 534:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createApiMethods = void 0;
const fromEntries = (array) => {
    return array.reduce((acc, [key, value]) => {
        acc[key] = value;
        return acc;
    }, {});
};
const createApiMethods = (methodToPermissionMap, permissionCheckFactory) => {
    const apiMethodEntries = Object.entries(methodToPermissionMap).map(([methodName, permission]) => [methodName, permissionCheckFactory(permission)]);
    return fromEntries(apiMethodEntries);
};
exports.createApiMethods = createApiMethods;


/***/ }),

/***/ 445:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authorizeConfluenceWithFetch = void 0;
const tslib_1 = __webpack_require__(635);
const api_1 = __webpack_require__(534);
const permissions_1 = tslib_1.__importDefault(__webpack_require__(393));
const checkConfluencePermissions = async (requestConfluence, accountId, contentId, permission) => {
    const res = await requestConfluence(`/rest/api/content/${contentId}/permission/check`, {
        method: 'post',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({
            subject: {
                type: 'user',
                identifier: accountId
            },
            operation: permission
        })
    });
    return res;
};
const getPermissionsCheckFactory = (requestConfluence, accountId, contentId) => (permission) => {
    return async () => {
        const res = await checkConfluencePermissions(requestConfluence, accountId, contentId, permission);
        return Boolean(res === null || res === void 0 ? void 0 : res.hasPermission);
    };
};
const authorizeConfluenceWithFetch = (requestConfluence, accountId) => {
    return {
        onConfluenceContent: (contentId) => (0, api_1.createApiMethods)(permissions_1.default, getPermissionsCheckFactory(requestConfluence, accountId, contentId))
    };
};
exports.authorizeConfluenceWithFetch = authorizeConfluenceWithFetch;


/***/ }),

/***/ 393:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const API_PERMISSIONS_MAP = {
    canRead: 'read',
    canUpdate: 'update',
    canDelete: 'delete'
};
exports["default"] = API_PERMISSIONS_MAP;


/***/ }),

/***/ 318:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authorizeJiraWithFetch = exports.authorizeConfluenceWithFetch = void 0;
var confluence_1 = __webpack_require__(445);
Object.defineProperty(exports, "authorizeConfluenceWithFetch", ({ enumerable: true, get: function () { return confluence_1.authorizeConfluenceWithFetch; } }));
var jira_1 = __webpack_require__(743);
Object.defineProperty(exports, "authorizeJiraWithFetch", ({ enumerable: true, get: function () { return jira_1.authorizeJiraWithFetch; } }));


/***/ }),

/***/ 743:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.authorizeJiraWithFetch = void 0;
const api_1 = __webpack_require__(534);
const permissions_1 = __webpack_require__(207);
const arrayEquals = (a, b) => {
    return JSON.stringify(Array.from(a.map(String)).sort()) === JSON.stringify(Array.from(b.map(String)).sort());
};
const checkJiraPermissions = async (requestJira, accountId, projectPermissions) => {
    const res = await requestJira('/rest/api/3/permissions/check', {
        method: 'post',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({
            accountId,
            projectPermissions
        })
    });
    return res;
};
const hasPermissionsForEntities = (projectPermissions, permission, type, entities) => {
    var _a;
    if (!entities || entities.length === 0)
        return true;
    const allowedEntities = (_a = projectPermissions.find((permissionResponse) => permissionResponse.permission === permission)) === null || _a === void 0 ? void 0 : _a[type];
    return !!allowedEntities && arrayEquals(allowedEntities, entities);
};
const getPermissionCheckFactory = (requestJira, accountId, type, entities) => (permission) => {
    return async () => {
        const { projectPermissions } = await checkJiraPermissions(requestJira, accountId, [
            {
                permissions: [permission],
                [type]: entities
            }
        ]);
        return hasPermissionsForEntities(projectPermissions, permission, type, entities);
    };
};
const toArray = (id) => (Array.isArray(id) ? id : [id]);
const authorizeJiraWithFetch = (requestJira, accountId) => {
    return {
        onJira: async (projectPermissionsInput) => {
            const result = await checkJiraPermissions(requestJira, accountId, projectPermissionsInput);
            return result.projectPermissions || [];
        },
        onJiraProject: (projects) => (0, api_1.createApiMethods)(permissions_1.API_PROJECTS_PERMISSIONS_MAP, getPermissionCheckFactory(requestJira, accountId, 'projects', toArray(projects))),
        onJiraIssue: (issues) => (0, api_1.createApiMethods)(permissions_1.API_ISSUES_PERMISSIONS_MAP, getPermissionCheckFactory(requestJira, accountId, 'issues', toArray(issues)))
    };
};
exports.authorizeJiraWithFetch = authorizeJiraWithFetch;


/***/ }),

/***/ 207:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.API_PROJECTS_PERMISSIONS_MAP = exports.API_ISSUES_PERMISSIONS_MAP = void 0;
const API_ISSUES_PERMISSIONS_MAP = {
    canAssign: 'ASSIGN_ISSUES',
    canCreate: 'CREATE_ISSUES',
    canEdit: 'EDIT_ISSUES',
    canMove: 'MOVE_ISSUES',
    canDelete: 'DELETE_ISSUES',
    canAddComments: 'ADD_COMMENTS',
    canEditAllComments: 'EDIT_ALL_COMMENTS',
    canDeleteAllComments: 'DELETE_ALL_COMMENTS',
    canCreateAttachments: 'CREATE_ATTACHMENTS',
    canDeleteAllAttachments: 'DELETE_ALL_ATTACHMENTS'
};
exports.API_ISSUES_PERMISSIONS_MAP = API_ISSUES_PERMISSIONS_MAP;
const API_PROJECTS_PERMISSIONS_MAP = {
    canAssignIssues: 'ASSIGN_ISSUES',
    canCreateIssues: 'CREATE_ISSUES',
    canEditIssues: 'EDIT_ISSUES',
    canMoveIssues: 'MOVE_ISSUES',
    canDeleteIssues: 'DELETE_ISSUES',
    canAddComments: 'ADD_COMMENTS',
    canEditAllComments: 'EDIT_ALL_COMMENTS',
    canDeleteAllComments: 'DELETE_ALL_COMMENTS',
    canCreateAttachments: 'CREATE_ATTACHMENTS',
    canDeleteAllAttachments: 'DELETE_ALL_ATTACHMENTS'
};
exports.API_PROJECTS_PERMISSIONS_MAP = API_PROJECTS_PERMISSIONS_MAP;


/***/ }),

/***/ 382:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
const api_1 = __webpack_require__(274);
const isRequestPayload = (request) => {
    return typeof request.payload === 'object' && request.payload.product && request.payload.fetchUrl;
};
const defaultFunctions = {
    __request: async (request) => {
        if (!isRequestPayload(request)) {
            throw new Error('Invalid payload specified for request');
        }
        const { payload } = request;
        const productApis = {
            jira: (0, api_1.asUser)().requestJira,
            confluence: (0, api_1.asUser)().requestConfluence
        };
        const response = await productApis[payload.product]((0, api_1.assumeTrustedRoute)(payload.fetchUrl), payload.fetchOptions);
        let body = await response.text();
        try {
            body = JSON.parse(body);
        }
        catch (e) { }
        return { ...response, body };
    }
};
class Resolver {
    functions;
    constructor() {
        this.functions = {
            ...defaultFunctions
        };
    }
    define(functionKey, cb) {
        if (!cb || typeof cb !== 'function') {
            throw new Error(`Resolver definition '${functionKey}' callback must be a 'function'. Received '${typeof cb}'.`);
        }
        if (functionKey in this.functions) {
            throw new Error(`Resolver definition '${functionKey}' already exists.`);
        }
        this.functions[functionKey] = cb;
        return this;
    }
    getFunction(functionKey) {
        if (functionKey in this.functions) {
            return this.functions[functionKey];
        }
        throw new Error(`Resolver has no definition for '${functionKey}'.`);
    }
    sanitizeObject(object) {
        return JSON.parse(JSON.stringify(object));
    }
    getDefinitions() {
        const resolve = async ({ call: { functionKey, payload: callPayload, jobId }, context }, backendRuntimePayload) => {
            const cb = this.getFunction(functionKey);
            const result = await cb({
                payload: callPayload || {},
                context: {
                    ...context,
                    installContext: backendRuntimePayload?.installContext,
                    accountId: backendRuntimePayload?.principal?.accountId,
                    license: backendRuntimePayload?.license,
                    jobId: jobId
                }
            });
            if (typeof result === 'object') {
                return this.sanitizeObject(result);
            }
            return result;
        };
        return resolve;
    }
}
exports.A = Resolver;


/***/ }),

/***/ 229:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.startsWith = void 0;
function startsWith(value) {
    return {
        condition: 'STARTS_WITH',
        value: value
    };
}
exports.startsWith = startsWith;


/***/ }),

/***/ 54:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FilterConditions = exports.WhereConditions = exports.isIn = exports.isNotEqualTo = void 0;
function isNotEqualTo(value) {
    return {
        condition: 'NOT_EQUAL_TO',
        value
    };
}
exports.isNotEqualTo = isNotEqualTo;
function isIn(values) {
    return {
        condition: 'IN',
        value: values
    };
}
exports.isIn = isIn;
function beginsWith(value) {
    return {
        condition: 'BEGINS_WITH',
        values: [value]
    };
}
function between(values) {
    return {
        condition: 'BETWEEN',
        values
    };
}
function exists() {
    return {
        condition: 'EXISTS',
        values: [true]
    };
}
function doesNotExist() {
    return {
        condition: 'NOT_EXISTS',
        values: [true]
    };
}
function isGreaterThan(value) {
    return {
        condition: 'GREATER_THAN',
        values: [value]
    };
}
function isGreaterThanEqualTo(value) {
    return {
        condition: 'GREATER_THAN_EQUAL_TO',
        values: [value]
    };
}
function isLessThan(value) {
    return {
        condition: 'LESS_THAN',
        values: [value]
    };
}
function isLessThanEqualTo(value) {
    return {
        condition: 'LESS_THAN_EQUAL_TO',
        values: [value]
    };
}
function contains(value) {
    return {
        condition: 'CONTAINS',
        values: [value]
    };
}
function doesNotContain(value) {
    return {
        condition: 'NOT_CONTAINS',
        values: [value]
    };
}
function equalsTo(value) {
    return {
        condition: 'EQUAL_TO',
        values: [value]
    };
}
function notEqualsTo(value) {
    return {
        condition: 'NOT_EQUAL_TO',
        values: [value]
    };
}
exports.WhereConditions = {
    beginsWith,
    between,
    equalsTo,
    isGreaterThan,
    isGreaterThanEqualTo,
    isLessThan,
    isLessThanEqualTo
};
exports.FilterConditions = {
    beginsWith,
    between,
    contains,
    doesNotContain,
    equalsTo,
    notEqualsTo,
    exists,
    doesNotExist,
    isGreaterThan,
    isGreaterThanEqualTo,
    isLessThan,
    isLessThanEqualTo
};


/***/ }),

/***/ 275:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EntityStorageBuilder = void 0;
var storage_builder_1 = __webpack_require__(560);
Object.defineProperty(exports, "EntityStorageBuilder", ({ enumerable: true, get: function () { return storage_builder_1.EntityStorageBuilder; } }));


/***/ }),

/***/ 26:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomEntityBuilder = exports.CustomEntityIndexBuilder = void 0;
class CustomEntityQueryBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
        this.queryOptions = {
            ...queryOptions
        };
    }
    clone(overrides) {
        return new (Object.getPrototypeOf(this).constructor)(this.globalStorage, {
            ...this.queryOptions,
            ...overrides
        });
    }
    where(condition) {
        return this.clone({
            range: {
                ...condition
            }
        });
    }
    sort(sort) {
        return this.clone({
            sort
        });
    }
    cursor(cursor) {
        return this.clone({
            cursor
        });
    }
    limit(limit) {
        return this.clone({
            limit
        });
    }
    async getOne() {
        const { results } = await this.limit(1).getMany();
        return results?.[0];
    }
    async getMany() {
        if (!this.queryOptions.entityName) {
            throw new Error('entityName is mandatory');
        }
        if (!this.queryOptions.indexName) {
            throw new Error('indexName is mandatory');
        }
        const queryOptions = { ...this.queryOptions };
        if (!queryOptions.filterOperator && queryOptions.filters) {
            queryOptions.filterOperator = 'and';
        }
        return this.globalStorage.listCustomEntities(this.queryOptions);
    }
}
class CustomEntityAndFilterQueryBuilder extends CustomEntityQueryBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        super(globalStorage, queryOptions);
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
        this.queryOptions = {
            ...queryOptions
        };
    }
    andFilter(field, condition) {
        const newQueryOptions = {
            ...this.queryOptions
        };
        newQueryOptions.filters = [...(this.queryOptions.filters ?? []), { property: field, ...condition }];
        newQueryOptions.filterOperator = 'and';
        return new CustomEntityAndFilterQueryBuilder(this.globalStorage, newQueryOptions);
    }
}
class CustomEntityOrFilterQueryBuilder extends CustomEntityQueryBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        super(globalStorage, queryOptions);
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
        this.queryOptions = {
            ...queryOptions
        };
    }
    orFilter(field, condition) {
        const newQueryOptions = {
            ...this.queryOptions
        };
        newQueryOptions.filters = [...(this.queryOptions.filters ?? []), { property: field, ...condition }];
        newQueryOptions.filterOperator = 'or';
        return new CustomEntityOrFilterQueryBuilder(this.globalStorage, newQueryOptions);
    }
}
class CustomEntityFilterQueryBuilder extends CustomEntityQueryBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        super(globalStorage, queryOptions);
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
        this.queryOptions = {
            ...queryOptions
        };
    }
    andFilter(field, condition) {
        return new CustomEntityAndFilterQueryBuilder(this.globalStorage, this.queryOptions).andFilter(field, condition);
    }
    orFilter(field, condition) {
        return new CustomEntityOrFilterQueryBuilder(this.globalStorage, this.queryOptions).orFilter(field, condition);
    }
}
class CustomEntityIndexBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
        this.queryOptions = {
            ...queryOptions
        };
    }
    index(name, indexOptions) {
        const indexProperties = indexOptions ? { indexName: name, ...indexOptions } : { indexName: name };
        return new CustomEntityFilterQueryBuilder(this.globalStorage, {
            ...this.queryOptions,
            ...indexProperties
        });
    }
}
exports.CustomEntityIndexBuilder = CustomEntityIndexBuilder;
class CustomEntityBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
        this.queryOptions = {
            ...queryOptions
        };
    }
    entity(name) {
        return new CustomEntityIndexBuilder(this.globalStorage, {
            ...this.queryOptions,
            entityName: name
        });
    }
}
exports.CustomEntityBuilder = CustomEntityBuilder;


/***/ }),

/***/ 560:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EntityStorageBuilder = void 0;
const query_api_1 = __webpack_require__(26);
class EntityStorageBuilder {
    entityName;
    globalStorage;
    constructor(entityName, globalStorage) {
        this.entityName = entityName;
        this.globalStorage = globalStorage;
    }
    query() {
        return new query_api_1.CustomEntityBuilder(this.globalStorage).entity(this.entityName);
    }
    get(entityKey) {
        return this.globalStorage.getEntity(this.entityName, entityKey);
    }
    set(entityKey, value) {
        return this.globalStorage.setEntity(this.entityName, entityKey, value);
    }
    delete(entityKey) {
        return this.globalStorage.deleteEntity(this.entityName, entityKey);
    }
}
exports.EntityStorageBuilder = EntityStorageBuilder;


/***/ }),

/***/ 636:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.APIError = exports.getErrorMessage = exports.getErrorMessageFromCode = void 0;
const getErrorMessageFromCode = (code, message) => {
    return message ?? code;
};
exports.getErrorMessageFromCode = getErrorMessageFromCode;
const getErrorMessage = (statusCode) => {
    switch (statusCode) {
        case 400:
        case 413:
            return 'Bad request';
        case 401:
            return 'Authentication error';
        case 403:
        case 404:
            return 'Permissions error or key does not exist';
        case 409:
            return 'Conflicting update occurred';
        case 500:
            return 'Internal server error';
        default:
            return `Unknown error. Received status code '${statusCode}'`;
    }
};
exports.getErrorMessage = getErrorMessage;
class APIError extends Error {
    constructor(message) {
        super(message);
    }
    static forStatus(status) {
        return new APIError((0, exports.getErrorMessage)(status));
    }
    static forErrorCode(code, message) {
        return new APIError((0, exports.getErrorMessageFromCode)(code, message));
    }
    static forUnexpected(message) {
        return new APIError(message);
    }
}
exports.APIError = APIError;


/***/ }),

/***/ 976:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlobalStorage = void 0;
const errors_1 = __webpack_require__(636);
const gql_queries_1 = __webpack_require__(122);
function assertNoErrors(errors) {
    if (errors && errors.length > 0) {
        const { message, extensions: { errorType } } = errors[0];
        throw errors_1.APIError.forErrorCode(errorType, message);
    }
}
async function getResponseBody(response) {
    if (response.status !== 200) {
        throw errors_1.APIError.forStatus(response.status);
    }
    const responseText = await response.text();
    let responseBody;
    try {
        responseBody = JSON.parse(responseText);
    }
    catch (error) {
        throw errors_1.APIError.forUnexpected(`Response text was not a valid JSON: ${responseText}`);
    }
    assertNoErrors(responseBody.errors);
    return responseBody.data;
}
class GlobalStorage {
    getAppContextAri;
    apiClient;
    getMetrics;
    endpoint = '/forge/entities/graphql';
    constructor(getAppContextAri, apiClient, getMetrics) {
        this.getAppContextAri = getAppContextAri;
        this.apiClient = apiClient;
        this.getMetrics = getMetrics;
    }
    doGetAppContextAri() {
        return typeof this.getAppContextAri === 'function' ? this.getAppContextAri() : this.getAppContextAri;
    }
    async get(key) {
        return this.getInternal(key, false);
    }
    async getSecret(key) {
        return this.getInternal(key, true);
    }
    async list(options) {
        const requestBody = process.env.IS_CLEANUP_FUNCTION === 'true'
            ? gql_queries_1.UntypedQueries.listQueryForCleanup(this.doGetAppContextAri(), options)
            : gql_queries_1.UntypedQueries.listQuery(this.doGetAppContextAri(), options);
        const response = await this.wrapInMetric('untyped', 'query', false, async () => await this.query(requestBody));
        const edges = process.env.IS_CLEANUP_FUNCTION === 'true'
            ? response.appStoredEntitiesForCleanup.edges
            : response.appStoredEntities.edges;
        const nextCursor = edges.length > 0 ? edges[edges.length - 1].cursor : undefined;
        const results = edges.map(({ node }) => node);
        return {
            results,
            nextCursor
        };
    }
    async listCustomEntities(options) {
        const requestBody = gql_queries_1.CustomEntityQueries.listQuery(this.doGetAppContextAri(), options);
        const response = await this.wrapInMetric('typed', 'query', false, async () => await this.query(requestBody));
        const edges = response.appStoredCustomEntities.edges;
        const results = edges.map(({ node }) => node);
        return {
            results,
            nextCursor: response.appStoredCustomEntities.cursor || null
        };
    }
    async set(key, value) {
        const requestBody = gql_queries_1.UntypedQueries.set(this.doGetAppContextAri(), key, value, false);
        await this.wrapInMetric('untyped', 'set', false, async () => await this.mutation(requestBody, 'appStorage', 'setAppStoredEntity'));
    }
    async setSecret(key, value) {
        const requestBody = gql_queries_1.UntypedQueries.set(this.doGetAppContextAri(), key, value, true);
        await this.wrapInMetric('untyped', 'set', true, async () => await this.mutation(requestBody, 'appStorage', 'setAppStoredEntity'));
    }
    async delete(key) {
        const requestBody = gql_queries_1.UntypedQueries.delete(this.doGetAppContextAri(), key, false);
        await this.wrapInMetric('untyped', 'delete', false, async () => this.mutation(requestBody, 'appStorage', 'deleteAppStoredEntity'));
    }
    async deleteSecret(key) {
        const requestBody = gql_queries_1.UntypedQueries.delete(this.doGetAppContextAri(), key, true);
        await this.wrapInMetric('untyped', 'delete', true, async () => this.mutation(requestBody, 'appStorage', 'deleteAppStoredEntity'));
    }
    async getEntity(entityName, entityKey) {
        return this.getEntityInternal(entityName, entityKey);
    }
    async setEntity(entityName, entityKey, value) {
        const requestBody = gql_queries_1.CustomEntityQueries.set(this.doGetAppContextAri(), entityName, entityKey, value);
        await this.wrapInMetric('typed', 'set', false, async () => this.mutation(requestBody, 'appStorageCustomEntity', 'setAppStoredCustomEntity'));
    }
    async deleteEntity(entityName, entityKey) {
        const requestBody = gql_queries_1.CustomEntityQueries.delete(this.doGetAppContextAri(), entityName, entityKey);
        await this.wrapInMetric('typed', 'delete', false, async () => await this.mutation(requestBody, 'appStorageCustomEntity', 'deleteAppStoredCustomEntity'));
    }
    async getInternal(key, encrypted) {
        const requestBody = gql_queries_1.UntypedQueries.get(this.doGetAppContextAri(), key, encrypted);
        const { appStoredEntity: { value } } = await this.wrapInMetric('untyped', 'get', encrypted, async () => await this.query(requestBody));
        return value ?? undefined;
    }
    async getEntityInternal(entityName, entityKey) {
        const requestBody = gql_queries_1.CustomEntityQueries.get(this.doGetAppContextAri(), entityName, entityKey);
        const { appStoredCustomEntity: { value } } = await this.wrapInMetric('typed', 'get', false, async () => await this.query(requestBody));
        return value ?? undefined;
    }
    buildRequest(requestBody) {
        return {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'content-type': 'application/json'
            }
        };
    }
    async query(body) {
        const response = await this.apiClient(this.endpoint, this.buildRequest(body));
        return await getResponseBody(response);
    }
    async mutation(body, namespace, mutationMethod) {
        const response = await this.apiClient(this.endpoint, this.buildRequest(body));
        const { [namespace]: { [mutationMethod]: { success, errors } } } = await getResponseBody(response);
        assertNoErrors(errors);
        if (!success) {
            throw errors_1.APIError.forStatus(500);
        }
        return response;
    }
    async wrapInMetric(store, operation, encrypted, fn) {
        const metrics = this.getMetrics();
        if (!metrics) {
            return await fn();
        }
        const timer = metrics
            .timing('forge.runtime.storage.operation.latency', { store, operation, encrypted: String(encrypted) })
            .measure();
        try {
            const result = await fn();
            timer.stop({ success: 'true' });
            metrics
                .counter('forge.runtime.storage.operation', {
                store,
                operation,
                encrypted: String(encrypted),
                success: 'true'
            })
                .incr();
            return result;
        }
        catch (error) {
            timer.stop({ success: 'false' });
            metrics
                .counter('forge.runtime.storage.operation', {
                store,
                operation,
                encrypted: String(encrypted),
                success: 'false'
            })
                .incr();
            throw error;
        }
    }
}
exports.GlobalStorage = GlobalStorage;


/***/ }),

/***/ 122:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomEntityQueries = exports.UntypedQueries = void 0;
class UntypedQueries {
    static get = (contextAri, key, encrypted) => ({
        query: `
      query forge_app_getApplicationStorageEntity($contextAri: ID!, $key: ID!, $encrypted: Boolean!) {
        appStoredEntity(contextAri: $contextAri, key: $key, encrypted: $encrypted) {
          key
          value
        }
      }
    `,
        variables: {
            contextAri,
            key,
            encrypted
        }
    });
    static set = (contextAri, key, value, encrypted) => ({
        query: `
      mutation forge_app_setApplicationStorageEntity($input: SetAppStoredEntityMutationInput!) {
        appStorage{
          setAppStoredEntity(input: $input) {
            success

            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
        variables: {
            input: {
                contextAri,
                key,
                value,
                encrypted
            }
        }
    });
    static delete = (contextAri, key, encrypted) => ({
        query: `
      mutation forge_app_deleteApplicationStorageEntity($input: DeleteAppStoredEntityMutationInput!) {
        appStorage {
          deleteAppStoredEntity(input: $input) {
            success
  
            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
        variables: {
            input: {
                contextAri,
                key,
                encrypted
            }
        }
    });
    static listQuery = (contextAri, options) => ({
        query: `
      query forge_app_getApplicationStorageEntities($contextAri: ID!, $where: [AppStoredEntityFilter!], $cursor: String, $limit: Int) {
        appStoredEntities(contextAri: $contextAri, where: $where, after: $cursor, first: $limit) {
          edges {
            node {
              value
              key
            }
  
            cursor
          }
        }
      }
    `,
        variables: {
            contextAri,
            where: options.where ?? null,
            cursor: options.cursor ?? null,
            limit: options.limit ?? null
        }
    });
    static listQueryForCleanup = (contextAri, options) => ({
        query: `
      query forge_app_getApplicationStorageEntitiesForCleanup($contextAri: ID!, $where: [AppStoredEntityFilter!], $cursor: String, $limit: Int) {
        appStoredEntitiesForCleanup(contextAri: $contextAri, where: $where, after: $cursor, first: $limit) {
          edges {
            node {
              value
              key
            }
  
            cursor
          }
        }
      }
    `,
        variables: {
            contextAri,
            where: options.where ?? null,
            cursor: options.cursor ?? null,
            limit: options.limit ?? null
        }
    });
}
exports.UntypedQueries = UntypedQueries;
class CustomEntityQueries {
    static get = (contextAri, entityName, key) => ({
        query: `
    query forge_app_getApplicationStorageCustomEntity ($contextAri: ID!, $key: ID!, $entityName: String!) {
      appStoredCustomEntity(contextAri: $contextAri, key: $key, entityName: $entityName) {
          value
          entityName
          key
      }
  }
    `,
        variables: {
            contextAri,
            entityName,
            key
        }
    });
    static set = (contextAri, entityName, key, value) => ({
        query: `
      mutation forge_app_setApplicationStorageCustomEntity($input: SetAppStoredCustomEntityMutationInput!) {
        appStorageCustomEntity{
          setAppStoredCustomEntity(input: $input) {
            success
  
            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
        variables: {
            input: {
                contextAri,
                entityName,
                key,
                value
            }
        }
    });
    static delete = (contextAri, entityName, key) => ({
        query: `
      mutation forge_app_deleteApplicationStorageCustomEntity($input: DeleteAppStoredCustomEntityMutationInput!) {
        appStorageCustomEntity {
          deleteAppStoredCustomEntity(input: $input) {
            success
  
            errors {
              message
              extensions {
                errorType
                statusCode
              }
            }
          }
        }
      }
    `,
        variables: {
            input: {
                contextAri,
                entityName,
                key
            }
        }
    });
    static listQuery = (contextAri, options) => {
        return {
            query: `
      query AppStorageCustomEntityQueries ($contextAri: ID!, $entityName: String!, $indexName: String!, $range: AppStoredCustomEntityRange, $filters: AppStoredCustomEntityFilters, $sort:SortOrder, $limit: Int, $cursor: String, $partition: [AppStoredCustomEntityFieldValue!]) {
        appStoredCustomEntities(contextAri: $contextAri, entityName: $entityName, indexName: $indexName, range: $range, filters: $filters, sort:$sort, limit: $limit, cursor: $cursor, partition: $partition) {
            edges {
                node {
                    key
                    value
                }
                cursor
            }
            pageInfo {
                hasNextPage
                hasPreviousPage
            }
            totalCount
            cursor
        }
  } 
      `,
            variables: {
                contextAri,
                entityName: options.entityName,
                indexName: options.indexName,
                range: options.range,
                ...(options.filters && options.filters.length
                    ? {
                        filters: {
                            [options.filterOperator || 'and']: options.filters
                        }
                    }
                    : {}),
                ...(options.partition ? { partition: options.partition } : {}),
                ...(options.sort ? { sort: options.sort } : {}),
                ...(options.cursor ? { cursor: options.cursor } : {}),
                ...(options.limit ? { limit: options.limit } : {})
            }
        };
    };
}
exports.CustomEntityQueries = CustomEntityQueries;


/***/ }),

/***/ 19:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CustomEntityIndexBuilder = exports.APIError = exports.SortOrder = exports.EntityStorageBuilder = exports.FilterConditions = exports.WhereConditions = exports.startsWith = exports.GlobalStorage = exports.getStorageInstanceWithQuery = void 0;
const entity_storage_1 = __webpack_require__(275);
const query_api_1 = __webpack_require__(258);
const getStorageInstanceWithQuery = (adapter) => {
    return {
        get: adapter.get.bind(adapter),
        set: adapter.set.bind(adapter),
        delete: adapter.delete.bind(adapter),
        getSecret: adapter.getSecret.bind(adapter),
        setSecret: adapter.setSecret.bind(adapter),
        deleteSecret: adapter.deleteSecret.bind(adapter),
        query: () => new query_api_1.DefaultQueryBuilder(adapter),
        entity: (entityName) => new entity_storage_1.EntityStorageBuilder(entityName, adapter)
    };
};
exports.getStorageInstanceWithQuery = getStorageInstanceWithQuery;
var global_storage_1 = __webpack_require__(976);
Object.defineProperty(exports, "GlobalStorage", ({ enumerable: true, get: function () { return global_storage_1.GlobalStorage; } }));
var conditions_1 = __webpack_require__(229);
Object.defineProperty(exports, "startsWith", ({ enumerable: true, get: function () { return conditions_1.startsWith; } }));
var conditions_2 = __webpack_require__(54);
Object.defineProperty(exports, "WhereConditions", ({ enumerable: true, get: function () { return conditions_2.WhereConditions; } }));
Object.defineProperty(exports, "FilterConditions", ({ enumerable: true, get: function () { return conditions_2.FilterConditions; } }));
var entity_storage_2 = __webpack_require__(275);
Object.defineProperty(exports, "EntityStorageBuilder", ({ enumerable: true, get: function () { return entity_storage_2.EntityStorageBuilder; } }));
var query_interfaces_1 = __webpack_require__(872);
Object.defineProperty(exports, "SortOrder", ({ enumerable: true, get: function () { return query_interfaces_1.SortOrder; } }));
var errors_1 = __webpack_require__(636);
Object.defineProperty(exports, "APIError", ({ enumerable: true, get: function () { return errors_1.APIError; } }));
var query_api_2 = __webpack_require__(26);
Object.defineProperty(exports, "CustomEntityIndexBuilder", ({ enumerable: true, get: function () { return query_api_2.CustomEntityIndexBuilder; } }));


/***/ }),

/***/ 258:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DefaultQueryBuilder = void 0;
class DefaultQueryBuilder {
    globalStorage;
    queryOptions;
    constructor(globalStorage, queryOptions = {}) {
        this.globalStorage = globalStorage;
        this.queryOptions = queryOptions;
    }
    where(field, where) {
        return new DefaultQueryBuilder(this.globalStorage, {
            ...this.queryOptions,
            where: [
                {
                    field,
                    ...where
                }
            ]
        });
    }
    cursor(cursor) {
        return new DefaultQueryBuilder(this.globalStorage, {
            ...this.queryOptions,
            cursor
        });
    }
    limit(limit) {
        return new DefaultQueryBuilder(this.globalStorage, {
            ...this.queryOptions,
            limit
        });
    }
    async getOne() {
        const { results } = await this.limit(1).getMany();
        if (results && results.length > 0) {
            return results[0];
        }
    }
    async getMany() {
        return this.globalStorage.list(this.queryOptions);
    }
}
exports.DefaultQueryBuilder = DefaultQueryBuilder;


/***/ }),

/***/ 872:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SortOrder = void 0;
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));


/***/ }),

/***/ 752:
/***/ ((module) => {


var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AnalyticsUserAri: () => AnalyticsUserAri,
  AnyAri: () => AnyAri,
  ApprovalDeskDecisionTableAri: () => ApprovalDeskDecisionTableAri,
  ApprovalDeskRoleAri: () => ApprovalDeskRoleAri,
  ApprovalDeskWorkflowAri: () => ApprovalDeskWorkflowAri,
  ApprovalDeskWorkspaceAri: () => ApprovalDeskWorkspaceAri,
  Ari: () => Ari,
  Arm: () => Arm,
  Ati: () => Ati,
  AtlashubIdAri: () => AtlashubIdAri,
  AtlashubSiteAri: () => AtlashubSiteAri,
  AutomationRoleAri: () => AutomationRoleAri,
  AutomationRuleAri: () => AutomationRuleAri,
  AvocadoAnswerAri: () => AvocadoAnswerAri,
  AvocadoQuestionAri: () => AvocadoQuestionAri,
  AvocadoRoleAri: () => AvocadoRoleAri,
  AvocadoSiteAri: () => AvocadoSiteAri,
  AvocadoUserAri: () => AvocadoUserAri,
  AvpDashboardAri: () => AvpDashboardAri,
  AvpDatasourceAri: () => AvpDatasourceAri,
  AvpRoleAri: () => AvpRoleAri,
  AvpSiteAri: () => AvpSiteAri,
  BeaconAlertAri: () => BeaconAlertAri,
  BeaconCustomDetectionAri: () => BeaconCustomDetectionAri,
  BeaconDetectionAri: () => BeaconDetectionAri,
  BeaconDetectionSettingAri: () => BeaconDetectionSettingAri,
  BeaconRoleAri: () => BeaconRoleAri,
  BeaconSiteAri: () => BeaconSiteAri,
  BeaconSubscriptionAri: () => BeaconSubscriptionAri,
  BeaconWorkspaceAri: () => BeaconWorkspaceAri,
  BitbucketAppAri: () => BitbucketAppAri,
  BitbucketOauthConsumerAri: () => BitbucketOauthConsumerAri,
  BitbucketProjectAri: () => BitbucketProjectAri,
  BitbucketPullrequestAri: () => BitbucketPullrequestAri,
  BitbucketRepositoryAri: () => BitbucketRepositoryAri,
  BitbucketRepositoryTransferAri: () => BitbucketRepositoryTransferAri,
  BitbucketSiteAri: () => BitbucketSiteAri,
  BitbucketTeamAri: () => BitbucketTeamAri,
  BitbucketWorkspaceAri: () => BitbucketWorkspaceAri,
  BrieRoleAri: () => BrieRoleAri,
  BrieSiteAri: () => BrieSiteAri,
  CanvasBoardAri: () => CanvasBoardAri,
  CanvasDatabaseAri: () => CanvasDatabaseAri,
  CanvasSiteAri: () => CanvasSiteAri,
  CanvasWorkspaceAri: () => CanvasWorkspaceAri,
  CmdbAttributeAri: () => CmdbAttributeAri,
  CmdbImportConfigurationAri: () => CmdbImportConfigurationAri,
  CmdbObjectAri: () => CmdbObjectAri,
  CmdbRoleAri: () => CmdbRoleAri,
  CmdbSchemaAri: () => CmdbSchemaAri,
  CmdbTypeAri: () => CmdbTypeAri,
  CmdbWorkspaceAri: () => CmdbWorkspaceAri,
  CommerceCatalogAccountAri: () => CommerceCatalogAccountAri,
  CommerceChangeAri: () => CommerceChangeAri,
  CommerceEntitlementAri: () => CommerceEntitlementAri,
  CommerceEntitlementTemplateAri: () => CommerceEntitlementTemplateAri,
  CommerceInitiativeAri: () => CommerceInitiativeAri,
  CommerceInvoiceGroupAri: () => CommerceInvoiceGroupAri,
  CommerceOfferingAri: () => CommerceOfferingAri,
  CommerceOfferingRelationshipTemplateAri: () => CommerceOfferingRelationshipTemplateAri,
  CommerceOrderAri: () => CommerceOrderAri,
  CommercePaymentMethodAri: () => CommercePaymentMethodAri,
  CommercePricingPlanAri: () => CommercePricingPlanAri,
  CommerceProductAri: () => CommerceProductAri,
  CommercePromotionAri: () => CommercePromotionAri,
  CommerceQuoteAri: () => CommerceQuoteAri,
  CommerceRoleAri: () => CommerceRoleAri,
  CommerceShipToPartyAri: () => CommerceShipToPartyAri,
  CommerceTransactionAccountAri: () => CommerceTransactionAccountAri,
  CommerceWorkbenchResourceAri: () => CommerceWorkbenchResourceAri,
  CompassAssistantAnswerAri: () => CompassAssistantAnswerAri,
  CompassComponentAri: () => CompassComponentAri,
  CompassComponentLabelAri: () => CompassComponentLabelAri,
  CompassComponentLinkAri: () => CompassComponentLinkAri,
  CompassCustomFieldDefinitionAri: () => CompassCustomFieldDefinitionAri,
  CompassDocumentAri: () => CompassDocumentAri,
  CompassDocumentationCategoryAri: () => CompassDocumentationCategoryAri,
  CompassEventSourceAri: () => CompassEventSourceAri,
  CompassIncomingWebhookAri: () => CompassIncomingWebhookAri,
  CompassMetricDefinitionAri: () => CompassMetricDefinitionAri,
  CompassMetricSourceAri: () => CompassMetricSourceAri,
  CompassRoleAri: () => CompassRoleAri,
  CompassScorecardAri: () => CompassScorecardAri,
  CompassSiteAri: () => CompassSiteAri,
  CompassUserDefinedParameterAri: () => CompassUserDefinedParameterAri,
  CompassWebhookAri: () => CompassWebhookAri,
  CompassWorkspaceAri: () => CompassWorkspaceAri,
  ConfluenceAdminAnnouncementBannerAri: () => ConfluenceAdminAnnouncementBannerAri,
  ConfluenceAttachmentAri: () => ConfluenceAttachmentAri,
  ConfluenceBlogpostAri: () => ConfluenceBlogpostAri,
  ConfluenceCommentAri: () => ConfluenceCommentAri,
  ConfluenceContentAri: () => ConfluenceContentAri,
  ConfluenceDatabaseAri: () => ConfluenceDatabaseAri,
  ConfluenceEmbedAri: () => ConfluenceEmbedAri,
  ConfluenceEventAri: () => ConfluenceEventAri,
  ConfluenceFolderAri: () => ConfluenceFolderAri,
  ConfluenceLongRunningTaskAri: () => ConfluenceLongRunningTaskAri,
  ConfluenceNoteAri: () => ConfluenceNoteAri,
  ConfluencePageAri: () => ConfluencePageAri,
  ConfluencePublicLinkAri: () => ConfluencePublicLinkAri,
  ConfluenceRoleAri: () => ConfluenceRoleAri,
  ConfluenceSiteAri: () => ConfluenceSiteAri,
  ConfluenceSpaceAri: () => ConfluenceSpaceAri,
  ConfluenceTaskAri: () => ConfluenceTaskAri,
  ConfluenceTeamCalendarAri: () => ConfluenceTeamCalendarAri,
  ConfluenceUserPropertyAri: () => ConfluenceUserPropertyAri,
  ConfluenceWhiteboardAri: () => ConfluenceWhiteboardAri,
  ConfluenceWorkspaceAri: () => ConfluenceWorkspaceAri,
  ConnectionRegistryLinkAri: () => ConnectionRegistryLinkAri,
  ConversationalHelpConversationAri: () => ConversationalHelpConversationAri,
  ConversationalHelpConversationMessageAri: () => ConversationalHelpConversationMessageAri,
  DataLakeLakeConnectionAri: () => DataLakeLakeConnectionAri,
  DevopsContainerAri: () => DevopsContainerAri,
  DevopsNamespaceAri: () => DevopsNamespaceAri,
  DevopsProviderAri: () => DevopsProviderAri,
  DevopsRelationshipAri: () => DevopsRelationshipAri,
  DevopsToolAri: () => DevopsToolAri,
  EcosystemAppAri: () => EcosystemAppAri,
  EcosystemAppEnvironmentVersionAri: () => EcosystemAppEnvironmentVersionAri,
  EcosystemConnectAppAri: () => EcosystemConnectAppAri,
  EcosystemEnvironmentAri: () => EcosystemEnvironmentAri,
  EcosystemExtensionAri: () => EcosystemExtensionAri,
  EcosystemExtensionGroupAri: () => EcosystemExtensionGroupAri,
  EcosystemInstallationAri: () => EcosystemInstallationAri,
  ElementsCustomEmojiMetadataAri: () => ElementsCustomEmojiMetadataAri,
  ElementsWorkspaceAri: () => ElementsWorkspaceAri,
  ExusExternalUserAri: () => ExusExternalUserAri,
  FigmaFileAri: () => FigmaFileAri,
  GoogleDocumentAri: () => GoogleDocumentAri,
  GoogleFormAri: () => GoogleFormAri,
  GooglePresentationAri: () => GooglePresentationAri,
  GoogleSpreadsheetAri: () => GoogleSpreadsheetAri,
  GraphBranchAri: () => GraphBranchAri,
  GraphBranchHistoryAri: () => GraphBranchHistoryAri,
  GraphBuildAri: () => GraphBuildAri,
  GraphBuildHistoryAri: () => GraphBuildHistoryAri,
  GraphCommitAri: () => GraphCommitAri,
  GraphContentAri: () => GraphContentAri,
  GraphDeploymentAri: () => GraphDeploymentAri,
  GraphDeploymentHistoryAri: () => GraphDeploymentHistoryAri,
  GraphDesignAri: () => GraphDesignAri,
  GraphDesignHistoryAri: () => GraphDesignHistoryAri,
  GraphDevopsComponentAri: () => GraphDevopsComponentAri,
  GraphDocumentAri: () => GraphDocumentAri,
  GraphDocumentHistoryAri: () => GraphDocumentHistoryAri,
  GraphEmployeeAri: () => GraphEmployeeAri,
  GraphEmployeeHistoryAri: () => GraphEmployeeHistoryAri,
  GraphFeatureFlagAri: () => GraphFeatureFlagAri,
  GraphFeatureFlagHistoryAri: () => GraphFeatureFlagHistoryAri,
  GraphIncidentAri: () => GraphIncidentAri,
  GraphIncidentHistoryAri: () => GraphIncidentHistoryAri,
  GraphJiraProjectAndDevopsToolRelationshipAri: () => GraphJiraProjectAndDevopsToolRelationshipAri,
  GraphJiraProjectAndDocumentationSpaceRelationshipAri: () => GraphJiraProjectAndDocumentationSpaceRelationshipAri,
  GraphJiraProjectAndOperationsTeamRelationshipAri: () => GraphJiraProjectAndOperationsTeamRelationshipAri,
  GraphJiraProjectAndVcsRepositoryRelationshipAri: () => GraphJiraProjectAndVcsRepositoryRelationshipAri,
  GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri: () => GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri,
  GraphOperationsWorkspaceAri: () => GraphOperationsWorkspaceAri,
  GraphPostIncidentReviewAri: () => GraphPostIncidentReviewAri,
  GraphPostIncidentReviewHistoryAri: () => GraphPostIncidentReviewHistoryAri,
  GraphProjectAri: () => GraphProjectAri,
  GraphPullRequestAri: () => GraphPullRequestAri,
  GraphPullRequestHistoryAri: () => GraphPullRequestHistoryAri,
  GraphRemoteLinkAri: () => GraphRemoteLinkAri,
  GraphRemoteLinkHistoryAri: () => GraphRemoteLinkHistoryAri,
  GraphRepositoryAri: () => GraphRepositoryAri,
  GraphSecurityContainerAri: () => GraphSecurityContainerAri,
  GraphSecurityWorkspaceAri: () => GraphSecurityWorkspaceAri,
  GraphServiceAndJiraProjectRelationshipAri: () => GraphServiceAndJiraProjectRelationshipAri,
  GraphServiceAndOperationsTeamRelationshipAri: () => GraphServiceAndOperationsTeamRelationshipAri,
  GraphServiceAndVcsRepositoryRelationshipAri: () => GraphServiceAndVcsRepositoryRelationshipAri,
  GraphServiceAri: () => GraphServiceAri,
  GraphServiceRelationshipAri: () => GraphServiceRelationshipAri,
  GraphVideoAri: () => GraphVideoAri,
  GraphVideoHistoryAri: () => GraphVideoHistoryAri,
  GraphVulnerabilityAri: () => GraphVulnerabilityAri,
  GraphVulnerabilityHistoryAri: () => GraphVulnerabilityHistoryAri,
  GraphWorkspaceAri: () => GraphWorkspaceAri,
  HelpArticleAri: () => HelpArticleAri,
  HelpChannelAri: () => HelpChannelAri,
  HelpHelpCenterAri: () => HelpHelpCenterAri,
  HelpHelpDeskAri: () => HelpHelpDeskAri,
  HelpLayoutAri: () => HelpLayoutAri,
  HelpPortalAri: () => HelpPortalAri,
  HelpRequestFormAri: () => HelpRequestFormAri,
  IdentityAppAri: () => IdentityAppAri,
  IdentityAuthPolicyAri: () => IdentityAuthPolicyAri,
  IdentityCustomerDirectoryAri: () => IdentityCustomerDirectoryAri,
  IdentityCustomerOrganizationAri: () => IdentityCustomerOrganizationAri,
  IdentityDirectoryAri: () => IdentityDirectoryAri,
  IdentityDomainAri: () => IdentityDomainAri,
  IdentityGroupAri: () => IdentityGroupAri,
  IdentityOauthClientAri: () => IdentityOauthClientAri,
  IdentityRoleAri: () => IdentityRoleAri,
  IdentitySiteAri: () => IdentitySiteAri,
  IdentityTeamAri: () => IdentityTeamAri,
  IdentityTeamMemberAri: () => IdentityTeamMemberAri,
  IdentityThirdPartyGroupAri: () => IdentityThirdPartyGroupAri,
  IdentityThirdPartyUserAri: () => IdentityThirdPartyUserAri,
  IdentityUserAri: () => IdentityUserAri,
  IdentityUserGrantAri: () => IdentityUserGrantAri,
  IdentityUserbaseAri: () => IdentityUserbaseAri,
  JiraAlignEpicAri: () => JiraAlignEpicAri,
  JiraAlignInstanceAri: () => JiraAlignInstanceAri,
  JiraAnnouncementBannerAri: () => JiraAnnouncementBannerAri,
  JiraAvailableFieldsAri: () => JiraAvailableFieldsAri,
  JiraBranchAri: () => JiraBranchAri,
  JiraBranchHistoryAri: () => JiraBranchHistoryAri,
  JiraBuildAri: () => JiraBuildAri,
  JiraBuildHistoryAri: () => JiraBuildHistoryAri,
  JiraBulkOperationTaskAri: () => JiraBulkOperationTaskAri,
  JiraCommentAri: () => JiraCommentAri,
  JiraCommitAri: () => JiraCommitAri,
  JiraComponentAri: () => JiraComponentAri,
  JiraConnectAppAri: () => JiraConnectAppAri,
  JiraCoreRoleAri: () => JiraCoreRoleAri,
  JiraCoreSiteAri: () => JiraCoreSiteAri,
  JiraDashboardAri: () => JiraDashboardAri,
  JiraDeploymentAri: () => JiraDeploymentAri,
  JiraDeploymentHistoryAri: () => JiraDeploymentHistoryAri,
  JiraDesignAri: () => JiraDesignAri,
  JiraDesignHistoryAri: () => JiraDesignHistoryAri,
  JiraDevopsComponentAri: () => JiraDevopsComponentAri,
  JiraDocumentAri: () => JiraDocumentAri,
  JiraDocumentHistoryAri: () => JiraDocumentHistoryAri,
  JiraEntitlementAri: () => JiraEntitlementAri,
  JiraEntityPropertyAri: () => JiraEntityPropertyAri,
  JiraFavouriteAri: () => JiraFavouriteAri,
  JiraFeatureFlagAri: () => JiraFeatureFlagAri,
  JiraFeatureFlagHistoryAri: () => JiraFeatureFlagHistoryAri,
  JiraFilterAri: () => JiraFilterAri,
  JiraFilterEmailSubscriptionAri: () => JiraFilterEmailSubscriptionAri,
  JiraIncidentAri: () => JiraIncidentAri,
  JiraIncidentHistoryAri: () => JiraIncidentHistoryAri,
  JiraIssueAri: () => JiraIssueAri,
  JiraIssueAttachmentAri: () => JiraIssueAttachmentAri,
  JiraIssueCommentAri: () => JiraIssueCommentAri,
  JiraIssueFieldMetadataAri: () => JiraIssueFieldMetadataAri,
  JiraIssueFieldOptionAri: () => JiraIssueFieldOptionAri,
  JiraIssueHistoryAri: () => JiraIssueHistoryAri,
  JiraIssueLinkAri: () => JiraIssueLinkAri,
  JiraIssueLinkTypeAri: () => JiraIssueLinkTypeAri,
  JiraIssueRemoteLinkAri: () => JiraIssueRemoteLinkAri,
  JiraIssueSearchViewAri: () => JiraIssueSearchViewAri,
  JiraIssueStatusAri: () => JiraIssueStatusAri,
  JiraIssueTypeAri: () => JiraIssueTypeAri,
  JiraIssueTypeSchemeAri: () => JiraIssueTypeSchemeAri,
  JiraIssueTypeSchemeMappingAri: () => JiraIssueTypeSchemeMappingAri,
  JiraIssueWorklogAri: () => JiraIssueWorklogAri,
  JiraIssuefieldvalueAri: () => JiraIssuefieldvalueAri,
  JiraNavigationConfigAri: () => JiraNavigationConfigAri,
  JiraNavigationItemAri: () => JiraNavigationItemAri,
  JiraNotificationTypeAri: () => JiraNotificationTypeAri,
  JiraNotificationTypeSchemeAri: () => JiraNotificationTypeSchemeAri,
  JiraNotificationUserPreferenceAri: () => JiraNotificationUserPreferenceAri,
  JiraOperationsWorkspaceAri: () => JiraOperationsWorkspaceAri,
  JiraPermissionSchemeAri: () => JiraPermissionSchemeAri,
  JiraPlanAri: () => JiraPlanAri,
  JiraPlanCrossProjectScenarioVersionAri: () => JiraPlanCrossProjectScenarioVersionAri,
  JiraPlanCrossProjectVersionAri: () => JiraPlanCrossProjectVersionAri,
  JiraPlanScenarioAri: () => JiraPlanScenarioAri,
  JiraPlanScenarioIssueAri: () => JiraPlanScenarioIssueAri,
  JiraPlanScenarioIssueFieldAri: () => JiraPlanScenarioIssueFieldAri,
  JiraPlanScenarioVersionAri: () => JiraPlanScenarioVersionAri,
  JiraPostIncidentReviewAri: () => JiraPostIncidentReviewAri,
  JiraPostIncidentReviewHistoryAri: () => JiraPostIncidentReviewHistoryAri,
  JiraPostIncidentReviewLinkAri: () => JiraPostIncidentReviewLinkAri,
  JiraPriorityAri: () => JiraPriorityAri,
  JiraProductAri: () => JiraProductAri,
  JiraProjectAri: () => JiraProjectAri,
  JiraProjectCategoryAri: () => JiraProjectCategoryAri,
  JiraProjectFeatureAri: () => JiraProjectFeatureAri,
  JiraProjectOverviewAri: () => JiraProjectOverviewAri,
  JiraProjectRoleActorAri: () => JiraProjectRoleActorAri,
  JiraProjectShortcutAri: () => JiraProjectShortcutAri,
  JiraProjectTypeAri: () => JiraProjectTypeAri,
  JiraPullRequestAri: () => JiraPullRequestAri,
  JiraPullRequestHistoryAri: () => JiraPullRequestHistoryAri,
  JiraRemoteLinkAri: () => JiraRemoteLinkAri,
  JiraRemoteLinkHistoryAri: () => JiraRemoteLinkHistoryAri,
  JiraRepositoryAri: () => JiraRepositoryAri,
  JiraResolutionAri: () => JiraResolutionAri,
  JiraResourceUsageMetricAri: () => JiraResourceUsageMetricAri,
  JiraResourceUsageRecommendationAri: () => JiraResourceUsageRecommendationAri,
  JiraRoleAri: () => JiraRoleAri,
  JiraScreenTabAri: () => JiraScreenTabAri,
  JiraSecurityContainerAri: () => JiraSecurityContainerAri,
  JiraSecurityLevelAri: () => JiraSecurityLevelAri,
  JiraSecurityWorkspaceAri: () => JiraSecurityWorkspaceAri,
  JiraServicedeskApprovalAri: () => JiraServicedeskApprovalAri,
  JiraServicedeskCalendarEventAri: () => JiraServicedeskCalendarEventAri,
  JiraServicedeskCannedResponseAri: () => JiraServicedeskCannedResponseAri,
  JiraServicedeskOrganizationAri: () => JiraServicedeskOrganizationAri,
  JiraServicedeskQueueAri: () => JiraServicedeskQueueAri,
  JiraServicedeskRequestTypeAri: () => JiraServicedeskRequestTypeAri,
  JiraServicedeskRoleAri: () => JiraServicedeskRoleAri,
  JiraServicedeskSiteAri: () => JiraServicedeskSiteAri,
  JiraServicedeskSlaAri: () => JiraServicedeskSlaAri,
  JiraSiteAri: () => JiraSiteAri,
  JiraSoftwareBoardAri: () => JiraSoftwareBoardAri,
  JiraSoftwareBoardFeatureAri: () => JiraSoftwareBoardFeatureAri,
  JiraSoftwareBoardIssueListAri: () => JiraSoftwareBoardIssueListAri,
  JiraSoftwareCardAri: () => JiraSoftwareCardAri,
  JiraSoftwareCardColorAri: () => JiraSoftwareCardColorAri,
  JiraSoftwareCardLayoutAri: () => JiraSoftwareCardLayoutAri,
  JiraSoftwareCardParentAri: () => JiraSoftwareCardParentAri,
  JiraSoftwareColumnAri: () => JiraSoftwareColumnAri,
  JiraSoftwareCustomFilterAri: () => JiraSoftwareCustomFilterAri,
  JiraSoftwareRoleAri: () => JiraSoftwareRoleAri,
  JiraSoftwareSiteAri: () => JiraSoftwareSiteAri,
  JiraSoftwareSwimlaneAri: () => JiraSoftwareSwimlaneAri,
  JiraSoftwareUserBoardConfigAri: () => JiraSoftwareUserBoardConfigAri,
  JiraSoftwareViewConfigAri: () => JiraSoftwareViewConfigAri,
  JiraSprintAri: () => JiraSprintAri,
  JiraUserBroadcastMessageAri: () => JiraUserBroadcastMessageAri,
  JiraVersionApproverAri: () => JiraVersionApproverAri,
  JiraVersionAri: () => JiraVersionAri,
  JiraVulnerabilityAri: () => JiraVulnerabilityAri,
  JiraVulnerabilityHistoryAri: () => JiraVulnerabilityHistoryAri,
  JiraWorkflowAri: () => JiraWorkflowAri,
  JiraWorkflowSchemeAri: () => JiraWorkflowSchemeAri,
  JiraWorklogAri: () => JiraWorklogAri,
  JiraWorkspaceAri: () => JiraWorkspaceAri,
  LinkingPlatformDatasourceAri: () => LinkingPlatformDatasourceAri,
  LoomSiteAri: () => LoomSiteAri,
  MakerSpaceGroupAri: () => MakerSpaceGroupAri,
  MapiRoleAri: () => MapiRoleAri,
  MarketingCustomerDomainAri: () => MarketingCustomerDomainAri,
  MarketplaceTeamAri: () => MarketplaceTeamAri,
  MeasurementEmailUuidAri: () => MeasurementEmailUuidAri,
  MeasurementSiteUserAri: () => MeasurementSiteUserAri,
  MeasurementUserAri: () => MeasurementUserAri,
  MediaFileAri: () => MediaFileAri,
  MercuryCommentAri: () => MercuryCommentAri,
  MercuryFocusAreaAri: () => MercuryFocusAreaAri,
  MercuryFocusAreaStatusUpdateAri: () => MercuryFocusAreaStatusUpdateAri,
  MercuryProgramAri: () => MercuryProgramAri,
  MercuryProgramStatusUpdateAri: () => MercuryProgramStatusUpdateAri,
  MercuryRoleAri: () => MercuryRoleAri,
  MercurySiteAri: () => MercurySiteAri,
  MercuryWorkspaceAri: () => MercuryWorkspaceAri,
  MicrosoftChannelAri: () => MicrosoftChannelAri,
  MicrosoftSharepointDocumentAri: () => MicrosoftSharepointDocumentAri,
  OauthClientAri: () => OauthClientAri,
  OpsgenieAccountLoginAri: () => OpsgenieAccountLoginAri,
  OpsgenieAccountSettingsAri: () => OpsgenieAccountSettingsAri,
  OpsgenieAlertAri: () => OpsgenieAlertAri,
  OpsgenieAlertRecipientLinkAri: () => OpsgenieAlertRecipientLinkAri,
  OpsgenieApiRequestMetricAri: () => OpsgenieApiRequestMetricAri,
  OpsgenieCallRoutingAri: () => OpsgenieCallRoutingAri,
  OpsgenieCustomRoleAri: () => OpsgenieCustomRoleAri,
  OpsgenieDeploymentAri: () => OpsgenieDeploymentAri,
  OpsgenieDeploymentServiceLinkAri: () => OpsgenieDeploymentServiceLinkAri,
  OpsgenieEscalationAri: () => OpsgenieEscalationAri,
  OpsgenieEventAri: () => OpsgenieEventAri,
  OpsgenieIncidentAlertLinkAri: () => OpsgenieIncidentAlertLinkAri,
  OpsgenieIncidentAri: () => OpsgenieIncidentAri,
  OpsgenieIncidentStatusUpdateAri: () => OpsgenieIncidentStatusUpdateAri,
  OpsgenieIncomingCallHistoryAri: () => OpsgenieIncomingCallHistoryAri,
  OpsgenieIntegrationAri: () => OpsgenieIntegrationAri,
  OpsgenieNotificationAri: () => OpsgenieNotificationAri,
  OpsgenieRoleAri: () => OpsgenieRoleAri,
  OpsgenieScheduleAri: () => OpsgenieScheduleAri,
  OpsgenieScheduleRotationAri: () => OpsgenieScheduleRotationAri,
  OpsgenieSiteAri: () => OpsgenieSiteAri,
  OpsgenieTeamAri: () => OpsgenieTeamAri,
  OpsgenieTimelineAri: () => OpsgenieTimelineAri,
  OpsgenieWorkspaceAri: () => OpsgenieWorkspaceAri,
  OrgPolicyPolicyAri: () => OrgPolicyPolicyAri,
  PapiApiAri: () => PapiApiAri,
  PapiRoleAri: () => PapiRoleAri,
  PassionfruitUserAri: () => PassionfruitUserAri,
  PeopleDataCostCenterAri: () => PeopleDataCostCenterAri,
  PeopleDataJobProfileAri: () => PeopleDataJobProfileAri,
  PeopleDataPositionAri: () => PeopleDataPositionAri,
  PeopleDataSupervisoryOrgAri: () => PeopleDataSupervisoryOrgAri,
  PeopleDataWorkerAri: () => PeopleDataWorkerAri,
  PeoplePerftoolCalibrationAri: () => PeoplePerftoolCalibrationAri,
  PeoplePerftoolFeedbackAri: () => PeoplePerftoolFeedbackAri,
  PeoplePerftoolPerformanceAri: () => PeoplePerftoolPerformanceAri,
  PlatformClassificationTagAri: () => PlatformClassificationTagAri,
  PlatformIntegrationAri: () => PlatformIntegrationAri,
  PlatformLifecycleResourceAri: () => PlatformLifecycleResourceAri,
  PlatformLifecycleResourcePackageAri: () => PlatformLifecycleResourcePackageAri,
  PlatformLifecycleResourcePackageTypeAri: () => PlatformLifecycleResourcePackageTypeAri,
  PlatformOrgAri: () => PlatformOrgAri,
  PlatformOrgUserAri: () => PlatformOrgUserAri,
  PlatformSecureTunnelAri: () => PlatformSecureTunnelAri,
  PlatformServicesStreamhubSchemaAri: () => PlatformServicesStreamhubSchemaAri,
  PlatformSiteAri: () => PlatformSiteAri,
  PollinatorCheckAri: () => PollinatorCheckAri,
  PostOfficeMessageInstanceAri: () => PostOfficeMessageInstanceAri,
  PostOfficeMessageTemplateAri: () => PostOfficeMessageTemplateAri,
  ResourceOwner: () => ResourceOwnerEnum,
  ResourceType: () => ResourceTypeEnum,
  RovoSiteAri: () => RovoSiteAri,
  RuntimeAuthClientRoleAri: () => RuntimeAuthClientRoleAri,
  SearchEventAri: () => SearchEventAri,
  SearchForwardDocumentAri: () => SearchForwardDocumentAri,
  SearchForwardDocumentSubscriptionAri: () => SearchForwardDocumentSubscriptionAri,
  SlackChannelAri: () => SlackChannelAri,
  SlackMessageAri: () => SlackMessageAri,
  StatuspageRoleAri: () => StatuspageRoleAri,
  StatuspageSiteAri: () => StatuspageSiteAri,
  SupportCustomerAri: () => SupportCustomerAri,
  TeamsTeamAri: () => TeamsTeamAri,
  TownsquareCommentAri: () => TownsquareCommentAri,
  TownsquareGoalAri: () => TownsquareGoalAri,
  TownsquareHelpPointerAri: () => TownsquareHelpPointerAri,
  TownsquareLearningAri: () => TownsquareLearningAri,
  TownsquareProjectAri: () => TownsquareProjectAri,
  TownsquareQuestionAri: () => TownsquareQuestionAri,
  TownsquareRoleAri: () => TownsquareRoleAri,
  TownsquareSiteAri: () => TownsquareSiteAri,
  TownsquareTagAri: () => TownsquareTagAri,
  TownsquareWorkspaceAri: () => TownsquareWorkspaceAri,
  TrelloAttachmentAri: () => TrelloAttachmentAri,
  TrelloBoardAri: () => TrelloBoardAri,
  TrelloCardAri: () => TrelloCardAri,
  TrelloEnterpriseAri: () => TrelloEnterpriseAri,
  TrelloListAri: () => TrelloListAri,
  TrelloRoleAri: () => TrelloRoleAri,
  TrelloSiteAri: () => TrelloSiteAri,
  TrelloUserAri: () => TrelloUserAri,
  TrelloWorkspaceAri: () => TrelloWorkspaceAri,
  UnifiedHelpRoleAri: () => UnifiedHelpRoleAri,
  UnifiedHelpSiteAri: () => UnifiedHelpSiteAri,
  UnifiedHelpWorkspaceAri: () => UnifiedHelpWorkspaceAri,
  UnifiedPortableProfileLinkedAccountAri: () => UnifiedPortableProfileLinkedAccountAri,
  UnifiedPortableProfileParentAccountAri: () => UnifiedPortableProfileParentAccountAri,
  UnifiedPortableProfileUnifiedAccountAri: () => UnifiedPortableProfileUnifiedAccountAri,
  UnifiedPortableProfileUnifiedProfileAri: () => UnifiedPortableProfileUnifiedProfileAri,
  ValidationError: () => ValidationError,
  VirtualAgentConfigurationAri: () => VirtualAgentConfigurationAri,
  VirtualAgentConversationAri: () => VirtualAgentConversationAri,
  VirtualAgentFlowEditorAri: () => VirtualAgentFlowEditorAri,
  VirtualAgentIntentProjectionAri: () => VirtualAgentIntentProjectionAri,
  VirtualAgentIntentQuestionProjectionAri: () => VirtualAgentIntentQuestionProjectionAri,
  VirtualAgentIntentRuleProjectionAri: () => VirtualAgentIntentRuleProjectionAri,
  VirtualAgentIntentTemplateAri: () => VirtualAgentIntentTemplateAri,
  WorkatoJobAri: () => WorkatoJobAri,
  WorkatoRecipeAri: () => WorkatoRecipeAri,
  WorkdayCostCenterAri: () => WorkdayCostCenterAri,
  WorkdayJobProfileAri: () => WorkdayJobProfileAri,
  WorkdayPositionAri: () => WorkdayPositionAri,
  WorkdayStaffAri: () => WorkdayStaffAri,
  WorkdaySupervisoryOrgAri: () => WorkdaySupervisoryOrgAri,
  WorkdayWorkerAri: () => WorkdayWorkerAri
});
module.exports = __toCommonJS(src_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9\\-]*$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}
function validateArmQualifier(qualifier) {
  if (qualifier !== "arm")
    throw new ValidationError(`ARM must have a qualifier of 'arm'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:{}=]+(/[!a-zA-Z0-9\\-_.~@:{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/rules/resource-matcher.ts
function validateNullableResourceMatcher(maybeMatcher) {
  maybeMatcher.length !== 0 && validateMatcher(maybeMatcher);
}
function validateResourceMatcher(maybeMatcher) {
  if (!maybeMatcher)
    throw Error("Matcher must be defined");
  validateMatcher(maybeMatcher);
}
function validateMatcher(maybeMatcher) {
  try {
    new RegExp(maybeMatcher);
  } catch (e) {
    throw Error("Invalid matcher sequence");
  }
}

// src/core/parser/arm.ts
var NUMBER_OF_ARM_SEGMENTS = 5, ArmParser = class extends BaseParser {
  static fromString(maybeArm) {
    let segments = this.getIdentifierSegments(maybeArm, NUMBER_OF_ARM_SEGMENTS), [qualifier, platformQualifier, resourceOwnerMatcher, cloudIdMatcher, resourceTypeAndIdMatchers] = segments, [resourceTypeMatcher, resourceIdMatcher] = resourceTypeAndIdMatchers.split("/"), maybeArmOpts = {
      qualifier,
      platformQualifier,
      cloudIdMatcher,
      resourceOwnerMatcher,
      resourceTypeMatcher,
      resourceIdMatcher
    };
    return this.fromOpts(maybeArmOpts);
  }
  static fromOpts(maybeArmOpts) {
    let {
      qualifier = "arm",
      platformQualifier = "cloud",
      cloudIdMatcher,
      resourceOwnerMatcher,
      resourceTypeMatcher,
      resourceIdMatcher
    } = maybeArmOpts;
    return validateArmQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateNullableResourceMatcher(cloudIdMatcher), validateResourceMatcher(resourceOwnerMatcher), validateResourceMatcher(resourceTypeMatcher), validateResourceMatcher(resourceIdMatcher), {
      platformQualifier,
      cloudIdMatcher,
      resourceOwnerMatcher,
      resourceTypeMatcher,
      resourceIdMatcher
    };
  }
};

// src/arm.ts
var Arm = class _Arm {
  static create(armOpts) {
    let opts = ArmParser.fromOpts({
      ...armOpts,
      qualifier: "arm",
      platformQualifier: armOpts.platformQualifier || "cloud",
      cloudIdMatcher: armOpts.cloudIdMatcher
    });
    return new _Arm(opts);
  }
  static parse(maybeArm) {
    let opts = ArmParser.fromString(maybeArm);
    return new _Arm(opts);
  }
  constructor(opts) {
    this._platformQualifier = opts.platformQualifier, this._cloudIdMatcher = opts.cloudIdMatcher, this._resourceOwnerMatcher = opts.resourceOwnerMatcher, this._resourceTypeMatcher = opts.resourceTypeMatcher, this._resourceIdMatcher = opts.resourceIdMatcher;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get cloudIdMatcher() {
    return this._cloudIdMatcher;
  }
  get resourceOwnerMatcher() {
    return this._resourceOwnerMatcher;
  }
  get resourceTypeMatcher() {
    return this._resourceTypeMatcher;
  }
  get resourceIdMatcher() {
    return this._resourceIdMatcher;
  }
  match(ari) {
    var _a, _b;
    let cloudId = (_a = ari.cloudId) != null ? _a : "", resourceOwner = ari.resourceOwner, resourceType = ari.resourceType, resourceId = ari.resourceId;
    return !(!new RegExp((_b = this.cloudIdMatcher) != null ? _b : "").test(cloudId) || !new RegExp(this.resourceOwnerMatcher).test(resourceOwner) || !new RegExp(this.resourceTypeMatcher).test(resourceType) || !new RegExp(this.resourceIdMatcher).test(resourceId));
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    let {
      platformQualifier,
      resourceOwnerMatcher,
      cloudIdMatcher = "",
      resourceTypeMatcher,
      resourceIdMatcher
    } = this;
    return `arm:${platformQualifier}:${resourceOwnerMatcher}:${cloudIdMatcher}:${resourceTypeMatcher}/${resourceIdMatcher}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      cloudIdMatcher: this.cloudIdMatcher,
      resourceOwnerMatcher: this.resourceOwnerMatcher,
      resourceTypeMatcher: this.resourceTypeMatcher,
      resourceIdMatcher: this.resourceIdMatcher
    };
  }
};

// src/core/types/deprecated/resource-owner-enum.ts
var ResourceOwnerEnum = /* @__PURE__ */ ((ResourceOwnerEnum2) => (ResourceOwnerEnum2.Analytics = "analytics", ResourceOwnerEnum2.ApprovalDesk = "approval-desk", ResourceOwnerEnum2.Atlashub = "atlashub", ResourceOwnerEnum2.Automation = "automation", ResourceOwnerEnum2.Avocado = "avocado", ResourceOwnerEnum2.Avp = "avp", ResourceOwnerEnum2.Beacon = "beacon", ResourceOwnerEnum2.Bitbucket = "bitbucket", ResourceOwnerEnum2.Brie = "brie", ResourceOwnerEnum2.Canvas = "canvas", ResourceOwnerEnum2.Cmdb = "cmdb", ResourceOwnerEnum2.Commerce = "commerce", ResourceOwnerEnum2.Compass = "compass", ResourceOwnerEnum2.Confluence = "confluence", ResourceOwnerEnum2.ConnectionRegistry = "connection-registry", ResourceOwnerEnum2.ConversationalHelp = "conversational-help", ResourceOwnerEnum2.DataLake = "data-lake", ResourceOwnerEnum2.Devops = "devops", ResourceOwnerEnum2.Ecosystem = "ecosystem", ResourceOwnerEnum2.Elements = "elements", ResourceOwnerEnum2.ExusExternal = "exus-external", ResourceOwnerEnum2.Figma = "figma", ResourceOwnerEnum2.Google = "google", ResourceOwnerEnum2.Graph = "graph", ResourceOwnerEnum2.Help = "help", ResourceOwnerEnum2.Identity = "identity", ResourceOwnerEnum2.Jira = "jira", ResourceOwnerEnum2.JiraAlign = "jira-align", ResourceOwnerEnum2.JiraCore = "jira-core", ResourceOwnerEnum2.JiraServicedesk = "jira-servicedesk", ResourceOwnerEnum2.JiraSoftware = "jira-software", ResourceOwnerEnum2.LinkingPlatform = "linking-platform", ResourceOwnerEnum2.Loom = "loom", ResourceOwnerEnum2.MakerSpace = "maker-space", ResourceOwnerEnum2.Mapi = "mapi", ResourceOwnerEnum2.Marketing = "marketing", ResourceOwnerEnum2.Marketplace = "marketplace", ResourceOwnerEnum2.Measurement = "measurement", ResourceOwnerEnum2.Media = "media", ResourceOwnerEnum2.Mercury = "mercury", ResourceOwnerEnum2.Microsoft = "microsoft", ResourceOwnerEnum2.Oauth = "oauth", ResourceOwnerEnum2.Opsgenie = "opsgenie", ResourceOwnerEnum2.OrgPolicy = "org-policy", ResourceOwnerEnum2.Papi = "papi", ResourceOwnerEnum2.Passionfruit = "passionfruit", ResourceOwnerEnum2.PeopleData = "people-data", ResourceOwnerEnum2.PeoplePerftool = "people-perftool", ResourceOwnerEnum2.Platform = "platform", ResourceOwnerEnum2.PlatformServices = "platform-services", ResourceOwnerEnum2.Pollinator = "pollinator", ResourceOwnerEnum2.PostOffice = "post-office", ResourceOwnerEnum2.Rovo = "rovo", ResourceOwnerEnum2.RuntimeAuthClient = "runtime-auth-client", ResourceOwnerEnum2.Search = "search", ResourceOwnerEnum2.Slack = "slack", ResourceOwnerEnum2.Statuspage = "statuspage", ResourceOwnerEnum2.Support = "support", ResourceOwnerEnum2.Teams = "teams", ResourceOwnerEnum2.Townsquare = "townsquare", ResourceOwnerEnum2.Trello = "trello", ResourceOwnerEnum2.UnifiedHelp = "unified-help", ResourceOwnerEnum2.UnifiedPortableProfile = "unified-portable-profile", ResourceOwnerEnum2.VirtualAgent = "virtual-agent", ResourceOwnerEnum2.Workato = "workato", ResourceOwnerEnum2.Workday = "workday", ResourceOwnerEnum2))(ResourceOwnerEnum || {});

// src/core/types/deprecated/resource-type-enum.ts
var ResourceTypeEnum = /* @__PURE__ */ ((ResourceTypeEnum2) => (ResourceTypeEnum2.AccountLogin = "account-login", ResourceTypeEnum2.AccountSettings = "account-settings", ResourceTypeEnum2.AdminAnnouncementBanner = "admin-announcement-banner", ResourceTypeEnum2.Alert = "alert", ResourceTypeEnum2.AlertRecipientLink = "alert-recipient-link", ResourceTypeEnum2.AnnouncementBanner = "announcement-banner", ResourceTypeEnum2.Answer = "answer", ResourceTypeEnum2.Api = "api", ResourceTypeEnum2.ApiRequestMetric = "api-request-metric", ResourceTypeEnum2.App = "app", ResourceTypeEnum2.AppEnvironmentVersion = "app-environment-version", ResourceTypeEnum2.Approval = "approval", ResourceTypeEnum2.Article = "article", ResourceTypeEnum2.AssistantAnswer = "assistant-answer", ResourceTypeEnum2.Attachment = "attachment", ResourceTypeEnum2.Attribute = "attribute", ResourceTypeEnum2.AuthPolicy = "auth-policy", ResourceTypeEnum2.AvailableFields = "available-fields", ResourceTypeEnum2.Blogpost = "blogpost", ResourceTypeEnum2.Board = "board", ResourceTypeEnum2.BoardFeature = "board-feature", ResourceTypeEnum2.BoardIssueList = "board-issue-list", ResourceTypeEnum2.Branch = "branch", ResourceTypeEnum2.BranchHistory = "branch-history", ResourceTypeEnum2.Build = "build", ResourceTypeEnum2.BuildHistory = "build-history", ResourceTypeEnum2.BulkOperationTask = "bulk-operation-task", ResourceTypeEnum2.CalendarEvent = "calendar-event", ResourceTypeEnum2.Calibration = "calibration", ResourceTypeEnum2.CallRouting = "call-routing", ResourceTypeEnum2.CannedResponse = "canned-response", ResourceTypeEnum2.Card = "card", ResourceTypeEnum2.CardColor = "card-color", ResourceTypeEnum2.CardLayout = "card-layout", ResourceTypeEnum2.CardParent = "card-parent", ResourceTypeEnum2.CatalogAccount = "catalog-account", ResourceTypeEnum2.Change = "change", ResourceTypeEnum2.Channel = "channel", ResourceTypeEnum2.Check = "check", ResourceTypeEnum2.ClassificationTag = "classification-tag", ResourceTypeEnum2.Client = "client", ResourceTypeEnum2.Column = "column", ResourceTypeEnum2.Comment = "comment", ResourceTypeEnum2.Commit = "commit", ResourceTypeEnum2.Component = "component", ResourceTypeEnum2.ComponentLabel = "component-label", ResourceTypeEnum2.ComponentLink = "component-link", ResourceTypeEnum2.Configuration = "configuration", ResourceTypeEnum2.ConnectApp = "connect-app", ResourceTypeEnum2.Container = "container", ResourceTypeEnum2.Content = "content", ResourceTypeEnum2.Conversation = "conversation", ResourceTypeEnum2.ConversationMessage = "conversation-message", ResourceTypeEnum2.CostCenter = "cost-center", ResourceTypeEnum2.CustomDetection = "custom-detection", ResourceTypeEnum2.CustomEmojiMetadata = "custom-emoji-metadata", ResourceTypeEnum2.Customer = "customer", ResourceTypeEnum2.CustomerDirectory = "customer-directory", ResourceTypeEnum2.CustomerDomain = "customer-domain", ResourceTypeEnum2.CustomerOrganization = "customer-organization", ResourceTypeEnum2.CustomFieldDefinition = "custom-field-definition", ResourceTypeEnum2.CustomFilter = "custom-filter", ResourceTypeEnum2.CustomRole = "custom-role", ResourceTypeEnum2.Dashboard = "dashboard", ResourceTypeEnum2.Database = "database", ResourceTypeEnum2.Datasource = "datasource", ResourceTypeEnum2.DecisionTable = "decision-table", ResourceTypeEnum2.Deployment = "deployment", ResourceTypeEnum2.DeploymentHistory = "deployment-history", ResourceTypeEnum2.DeploymentServiceLink = "deployment-service-link", ResourceTypeEnum2.Design = "design", ResourceTypeEnum2.DesignHistory = "design-history", ResourceTypeEnum2.Detection = "detection", ResourceTypeEnum2.DetectionSetting = "detection-setting", ResourceTypeEnum2.DevopsComponent = "devops-component", ResourceTypeEnum2.Directory = "directory", ResourceTypeEnum2.Document = "document", ResourceTypeEnum2.DocumentationCategory = "documentation-category", ResourceTypeEnum2.DocumentHistory = "document-history", ResourceTypeEnum2.Domain = "domain", ResourceTypeEnum2.EmailUuid = "email-uuid", ResourceTypeEnum2.Embed = "embed", ResourceTypeEnum2.Employee = "employee", ResourceTypeEnum2.EmployeeHistory = "employee-history", ResourceTypeEnum2.Enterprise = "enterprise", ResourceTypeEnum2.Entitlement = "entitlement", ResourceTypeEnum2.EntitlementTemplate = "entitlement-template", ResourceTypeEnum2.EntityProperty = "entity-property", ResourceTypeEnum2.Environment = "environment", ResourceTypeEnum2.Epic = "epic", ResourceTypeEnum2.Escalation = "escalation", ResourceTypeEnum2.Event = "event", ResourceTypeEnum2.EventSource = "event-source", ResourceTypeEnum2.Extension = "extension", ResourceTypeEnum2.ExtensionGroup = "extension-group", ResourceTypeEnum2.Favourite = "favourite", ResourceTypeEnum2.FeatureFlag = "feature-flag", ResourceTypeEnum2.FeatureFlagHistory = "feature-flag-history", ResourceTypeEnum2.Feedback = "feedback", ResourceTypeEnum2.File = "file", ResourceTypeEnum2.Filter = "filter", ResourceTypeEnum2.FilterEmailSubscription = "filter-email-subscription", ResourceTypeEnum2.FlowEditor = "flow-editor", ResourceTypeEnum2.FocusArea = "focus-area", ResourceTypeEnum2.FocusAreaStatusUpdate = "focus-area-status-update", ResourceTypeEnum2.Folder = "folder", ResourceTypeEnum2.Form = "form", ResourceTypeEnum2.ForwardDocument = "forward-document", ResourceTypeEnum2.ForwardDocumentSubscription = "forward-document-subscription", ResourceTypeEnum2.Goal = "goal", ResourceTypeEnum2.Group = "group", ResourceTypeEnum2.HelpCenter = "help-center", ResourceTypeEnum2.HelpDesk = "help-desk", ResourceTypeEnum2.HelpPointer = "help-pointer", ResourceTypeEnum2.Id = "id", ResourceTypeEnum2.ImportConfiguration = "import-configuration", ResourceTypeEnum2.Incident = "incident", ResourceTypeEnum2.IncidentAlertLink = "incident-alert-link", ResourceTypeEnum2.IncidentHistory = "incident-history", ResourceTypeEnum2.IncidentStatusUpdate = "incident-status-update", ResourceTypeEnum2.IncomingCallHistory = "incoming-call-history", ResourceTypeEnum2.IncomingWebhook = "incoming-webhook", ResourceTypeEnum2.Initiative = "initiative", ResourceTypeEnum2.Installation = "installation", ResourceTypeEnum2.Instance = "instance", ResourceTypeEnum2.Integration = "integration", ResourceTypeEnum2.IntentProjection = "intent-projection", ResourceTypeEnum2.IntentQuestionProjection = "intent-question-projection", ResourceTypeEnum2.IntentRuleProjection = "intent-rule-projection", ResourceTypeEnum2.IntentTemplate = "intent-template", ResourceTypeEnum2.InvoiceGroup = "invoice-group", ResourceTypeEnum2.Issue = "issue", ResourceTypeEnum2.IssueAttachment = "issue-attachment", ResourceTypeEnum2.IssueComment = "issue-comment", ResourceTypeEnum2.IssueFieldMetadata = "issue-field-metadata", ResourceTypeEnum2.IssueFieldOption = "issue-field-option", ResourceTypeEnum2.Issuefieldvalue = "issuefieldvalue", ResourceTypeEnum2.IssueHistory = "issue-history", ResourceTypeEnum2.IssueLink = "issue-link", ResourceTypeEnum2.IssueLinkType = "issue-link-type", ResourceTypeEnum2.IssueRemoteLink = "issue-remote-link", ResourceTypeEnum2.IssueSearchView = "issue-search-view", ResourceTypeEnum2.IssueStatus = "issue-status", ResourceTypeEnum2.IssueType = "issue-type", ResourceTypeEnum2.IssueTypeScheme = "issue-type-scheme", ResourceTypeEnum2.IssueTypeSchemeMapping = "issue-type-scheme-mapping", ResourceTypeEnum2.IssueWorklog = "issue-worklog", ResourceTypeEnum2.JiraProjectAndDevopsToolRelationship = "jira-project-and-devops-tool-relationship", ResourceTypeEnum2.JiraProjectAndDocumentationSpaceRelationship = "jira-project-and-documentation-space-relationship", ResourceTypeEnum2.JiraProjectAndOperationsTeamRelationship = "jira-project-and-operations-team-relationship", ResourceTypeEnum2.JiraProjectAndVcsRepositoryRelationship = "jira-project-and-vcs-repository-relationship", ResourceTypeEnum2.JiraProjectAndVcsRepositoryRelationshipTempMigration = "jira-project-and-vcs-repository-relationship-temp-migration", ResourceTypeEnum2.Job = "job", ResourceTypeEnum2.JobProfile = "job-profile", ResourceTypeEnum2.LakeConnection = "lake-connection", ResourceTypeEnum2.Layout = "layout", ResourceTypeEnum2.Learning = "learning", ResourceTypeEnum2.LifecycleResource = "lifecycle-resource", ResourceTypeEnum2.LifecycleResourcePackage = "lifecycle-resource-package", ResourceTypeEnum2.LifecycleResourcePackageType = "lifecycle-resource-package-type", ResourceTypeEnum2.Link = "link", ResourceTypeEnum2.LinkedAccount = "linked-account", ResourceTypeEnum2.List = "list", ResourceTypeEnum2.LongRunningTask = "long-running-task", ResourceTypeEnum2.Message = "message", ResourceTypeEnum2.MessageInstance = "message-instance", ResourceTypeEnum2.MessageTemplate = "message-template", ResourceTypeEnum2.MetricDefinition = "metric-definition", ResourceTypeEnum2.MetricSource = "metric-source", ResourceTypeEnum2.Namespace = "namespace", ResourceTypeEnum2.NavigationConfig = "navigation-config", ResourceTypeEnum2.NavigationItem = "navigation-item", ResourceTypeEnum2.Note = "note", ResourceTypeEnum2.Notification = "notification", ResourceTypeEnum2.NotificationType = "notification-type", ResourceTypeEnum2.NotificationTypeScheme = "notification-type-scheme", ResourceTypeEnum2.NotificationUserPreference = "notification-user-preference", ResourceTypeEnum2.OauthClient = "oauthClient", ResourceTypeEnum2.OauthConsumer = "oauth-consumer", ResourceTypeEnum2.Object = "object", ResourceTypeEnum2.Offering = "offering", ResourceTypeEnum2.OfferingRelationshipTemplate = "offering-relationship-template", ResourceTypeEnum2.OperationsWorkspace = "operations-workspace", ResourceTypeEnum2.Order = "order", ResourceTypeEnum2.Org = "org", ResourceTypeEnum2.Organization = "organization", ResourceTypeEnum2.OrgUser = "org-user", ResourceTypeEnum2.Page = "page", ResourceTypeEnum2.ParentAccount = "parent-account", ResourceTypeEnum2.PaymentMethod = "payment-method", ResourceTypeEnum2.Performance = "performance", ResourceTypeEnum2.PermissionScheme = "permission-scheme", ResourceTypeEnum2.Plan = "plan", ResourceTypeEnum2.PlanCrossProjectScenarioVersion = "plan-cross-project-scenario-version", ResourceTypeEnum2.PlanCrossProjectVersion = "plan-cross-project-version", ResourceTypeEnum2.PlanScenario = "plan-scenario", ResourceTypeEnum2.PlanScenarioIssue = "plan-scenario-issue", ResourceTypeEnum2.PlanScenarioIssueField = "plan-scenario-issue-field", ResourceTypeEnum2.PlanScenarioVersion = "plan-scenario-version", ResourceTypeEnum2.Policy = "policy", ResourceTypeEnum2.Portal = "portal", ResourceTypeEnum2.Position = "position", ResourceTypeEnum2.PostIncidentReview = "post-incident-review", ResourceTypeEnum2.PostIncidentReviewHistory = "post-incident-review-history", ResourceTypeEnum2.PostIncidentReviewLink = "post-incident-review-link", ResourceTypeEnum2.Presentation = "presentation", ResourceTypeEnum2.PricingPlan = "pricing-plan", ResourceTypeEnum2.Priority = "priority", ResourceTypeEnum2.Product = "product", ResourceTypeEnum2.Program = "program", ResourceTypeEnum2.ProgramStatusUpdate = "program-status-update", ResourceTypeEnum2.Project = "project", ResourceTypeEnum2.ProjectCategory = "project-category", ResourceTypeEnum2.ProjectFeature = "project-feature", ResourceTypeEnum2.ProjectOverview = "project-overview", ResourceTypeEnum2.ProjectRoleActor = "project-role-actor", ResourceTypeEnum2.ProjectShortcut = "project-shortcut", ResourceTypeEnum2.ProjectType = "project-type", ResourceTypeEnum2.Promotion = "promotion", ResourceTypeEnum2.Provider = "provider", ResourceTypeEnum2.PublicLink = "public-link", ResourceTypeEnum2.Pullrequest = "pullrequest", ResourceTypeEnum2.PullRequest = "pull-request", ResourceTypeEnum2.PullRequestHistory = "pull-request-history", ResourceTypeEnum2.Question = "question", ResourceTypeEnum2.Queue = "queue", ResourceTypeEnum2.Quote = "quote", ResourceTypeEnum2.Recipe = "recipe", ResourceTypeEnum2.Relationship = "relationship", ResourceTypeEnum2.RemoteLink = "remote-link", ResourceTypeEnum2.RemoteLinkHistory = "remote-link-history", ResourceTypeEnum2.Repository = "repository", ResourceTypeEnum2.RepositoryTransfer = "repository-transfer", ResourceTypeEnum2.RequestForm = "request-form", ResourceTypeEnum2.RequestType = "request-type", ResourceTypeEnum2.Resolution = "resolution", ResourceTypeEnum2.ResourceUsageMetric = "resource-usage-metric", ResourceTypeEnum2.ResourceUsageRecommendation = "resource-usage-recommendation", ResourceTypeEnum2.Role = "role", ResourceTypeEnum2.Rule = "rule", ResourceTypeEnum2.Schedule = "schedule", ResourceTypeEnum2.ScheduleRotation = "schedule-rotation", ResourceTypeEnum2.Schema = "schema", ResourceTypeEnum2.Scorecard = "scorecard", ResourceTypeEnum2.ScreenTab = "screen-tab", ResourceTypeEnum2.SecureTunnel = "secure-tunnel", ResourceTypeEnum2.SecurityContainer = "security-container", ResourceTypeEnum2.SecurityLevel = "security-level", ResourceTypeEnum2.SecurityWorkspace = "security-workspace", ResourceTypeEnum2.Service = "service", ResourceTypeEnum2.ServiceAndJiraProjectRelationship = "service-and-jira-project-relationship", ResourceTypeEnum2.ServiceAndOperationsTeamRelationship = "service-and-operations-team-relationship", ResourceTypeEnum2.ServiceAndVcsRepositoryRelationship = "service-and-vcs-repository-relationship", ResourceTypeEnum2.ServiceRelationship = "service-relationship", ResourceTypeEnum2.SharepointDocument = "sharepoint-document", ResourceTypeEnum2.ShipToParty = "ship-to-party", ResourceTypeEnum2.Site = "site", ResourceTypeEnum2.SiteUser = "site-user", ResourceTypeEnum2.Sla = "sla", ResourceTypeEnum2.Space = "space", ResourceTypeEnum2.Spreadsheet = "spreadsheet", ResourceTypeEnum2.Sprint = "sprint", ResourceTypeEnum2.Staff = "staff", ResourceTypeEnum2.StreamhubSchema = "streamhub-schema", ResourceTypeEnum2.Subscription = "subscription", ResourceTypeEnum2.SupervisoryOrg = "supervisory-org", ResourceTypeEnum2.Swimlane = "swimlane", ResourceTypeEnum2.Tag = "tag", ResourceTypeEnum2.Task = "task", ResourceTypeEnum2.Team = "team", ResourceTypeEnum2.TeamCalendar = "team-calendar", ResourceTypeEnum2.TeamMember = "team-member", ResourceTypeEnum2.ThirdPartyGroup = "third-party-group", ResourceTypeEnum2.ThirdPartyUser = "third-party-user", ResourceTypeEnum2.Timeline = "timeline", ResourceTypeEnum2.Tool = "tool", ResourceTypeEnum2.TransactionAccount = "transaction-account", ResourceTypeEnum2.Type = "type", ResourceTypeEnum2.UnifiedAccount = "unified-account", ResourceTypeEnum2.UnifiedProfile = "unified-profile", ResourceTypeEnum2.User = "user", ResourceTypeEnum2.Userbase = "userbase", ResourceTypeEnum2.UserBoardConfig = "user-board-config", ResourceTypeEnum2.UserBroadcastMessage = "user-broadcast-message", ResourceTypeEnum2.UserDefinedParameter = "user-defined-parameter", ResourceTypeEnum2.UserGrant = "userGrant", ResourceTypeEnum2.UserProperty = "user-property", ResourceTypeEnum2.Version = "version", ResourceTypeEnum2.VersionApprover = "version-approver", ResourceTypeEnum2.Video = "video", ResourceTypeEnum2.VideoHistory = "video-history", ResourceTypeEnum2.ViewConfig = "view-config", ResourceTypeEnum2.Vulnerability = "vulnerability", ResourceTypeEnum2.VulnerabilityHistory = "vulnerability-history", ResourceTypeEnum2.Webhook = "webhook", ResourceTypeEnum2.Whiteboard = "whiteboard", ResourceTypeEnum2.WorkbenchResource = "workbench-resource", ResourceTypeEnum2.Worker = "worker", ResourceTypeEnum2.Workflow = "workflow", ResourceTypeEnum2.WorkflowScheme = "workflow-scheme", ResourceTypeEnum2.Worklog = "worklog", ResourceTypeEnum2.Workspace = "workspace", ResourceTypeEnum2))(ResourceTypeEnum || {});

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/analytics/user/types.ts
var AnalyticsUserAriResourceOwner = "analytics", AnalyticsUserAriResourceType = "user";

// src/analytics/user/manifest.ts
var analyticsUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AnalyticsUserAriResourceOwner,
  resourceType: AnalyticsUserAriResourceType,
  resourceIdSlug: "anonymous/{anonUserId}",
  resourceIdSegmentFormats: {
    anonUserId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/analytics/user/index.ts
var AnalyticsUserAri = class _AnalyticsUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._anonUserId = opts.resourceIdSegmentValues.anonUserId;
  }
  get anonUserId() {
    return this._anonUserId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: analyticsUserAriStaticOpts.qualifier,
      platformQualifier: analyticsUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: analyticsUserAriStaticOpts.resourceOwner,
      resourceType: analyticsUserAriStaticOpts.resourceType,
      resourceId: `anonymous/${opts.anonUserId}`,
      resourceIdSegmentValues: {
        anonUserId: opts.anonUserId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, analyticsUserAriStaticOpts);
    return new _AnalyticsUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, analyticsUserAriStaticOpts);
    return new _AnalyticsUserAri(opts);
  }
  getVariables() {
    return {
      anonUserId: this.anonUserId
    };
  }
};

// src/approval-desk/decision-table/types.ts
var ApprovalDeskDecisionTableAriResourceOwner = "approval-desk", ApprovalDeskDecisionTableAriResourceType = "decision-table";

// src/approval-desk/decision-table/manifest.ts
var approvalDeskDecisionTableAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ApprovalDeskDecisionTableAriResourceOwner,
  resourceType: ApprovalDeskDecisionTableAriResourceType,
  resourceIdSlug: "{workspaceId}/{workflowId}/{decisionTableId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    workflowId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    decisionTableId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/approval-desk/decision-table/index.ts
var ApprovalDeskDecisionTableAri = class _ApprovalDeskDecisionTableAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._workflowId = opts.resourceIdSegmentValues.workflowId, this._decisionTableId = opts.resourceIdSegmentValues.decisionTableId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get workflowId() {
    return this._workflowId;
  }
  get decisionTableId() {
    return this._decisionTableId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: approvalDeskDecisionTableAriStaticOpts.qualifier,
      platformQualifier: approvalDeskDecisionTableAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: approvalDeskDecisionTableAriStaticOpts.resourceOwner,
      resourceType: approvalDeskDecisionTableAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.workflowId}/${opts.decisionTableId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        workflowId: opts.workflowId,
        decisionTableId: opts.decisionTableId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, approvalDeskDecisionTableAriStaticOpts);
    return new _ApprovalDeskDecisionTableAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, approvalDeskDecisionTableAriStaticOpts);
    return new _ApprovalDeskDecisionTableAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      workflowId: this.workflowId,
      decisionTableId: this.decisionTableId
    };
  }
};

// src/approval-desk/role/types.ts
var ApprovalDeskRoleAriResourceOwner = "approval-desk", ApprovalDeskRoleAriResourceType = "role";

// src/approval-desk/role/manifest.ts
var approvalDeskRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ApprovalDeskRoleAriResourceOwner,
  resourceType: ApprovalDeskRoleAriResourceType,
  resourceIdSlug: "{scope}/{roleId}",
  resourceIdSegmentFormats: {
    scope: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/approval-desk/role/index.ts
var ApprovalDeskRoleAri = class _ApprovalDeskRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._scope = opts.resourceIdSegmentValues.scope, this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get scope() {
    return this._scope;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: approvalDeskRoleAriStaticOpts.qualifier,
      platformQualifier: approvalDeskRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: approvalDeskRoleAriStaticOpts.resourceOwner,
      resourceType: approvalDeskRoleAriStaticOpts.resourceType,
      resourceId: `${opts.scope}/${opts.roleId}`,
      resourceIdSegmentValues: {
        scope: opts.scope,
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, approvalDeskRoleAriStaticOpts);
    return new _ApprovalDeskRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, approvalDeskRoleAriStaticOpts);
    return new _ApprovalDeskRoleAri(opts);
  }
  getVariables() {
    return {
      scope: this.scope,
      roleId: this.roleId
    };
  }
};

// src/approval-desk/workflow/types.ts
var ApprovalDeskWorkflowAriResourceOwner = "approval-desk", ApprovalDeskWorkflowAriResourceType = "workflow";

// src/approval-desk/workflow/manifest.ts
var approvalDeskWorkflowAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ApprovalDeskWorkflowAriResourceOwner,
  resourceType: ApprovalDeskWorkflowAriResourceType,
  resourceIdSlug: "{workspaceId}/{workflowId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    workflowId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/approval-desk/workflow/index.ts
var ApprovalDeskWorkflowAri = class _ApprovalDeskWorkflowAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._workflowId = opts.resourceIdSegmentValues.workflowId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get workflowId() {
    return this._workflowId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: approvalDeskWorkflowAriStaticOpts.qualifier,
      platformQualifier: approvalDeskWorkflowAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: approvalDeskWorkflowAriStaticOpts.resourceOwner,
      resourceType: approvalDeskWorkflowAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.workflowId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        workflowId: opts.workflowId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, approvalDeskWorkflowAriStaticOpts);
    return new _ApprovalDeskWorkflowAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, approvalDeskWorkflowAriStaticOpts);
    return new _ApprovalDeskWorkflowAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      workflowId: this.workflowId
    };
  }
};

// src/approval-desk/workspace/types.ts
var ApprovalDeskWorkspaceAriResourceOwner = "approval-desk", ApprovalDeskWorkspaceAriResourceType = "workspace";

// src/approval-desk/workspace/manifest.ts
var approvalDeskWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ApprovalDeskWorkspaceAriResourceOwner,
  resourceType: ApprovalDeskWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/approval-desk/workspace/index.ts
var ApprovalDeskWorkspaceAri = class _ApprovalDeskWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: approvalDeskWorkspaceAriStaticOpts.qualifier,
      platformQualifier: approvalDeskWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: approvalDeskWorkspaceAriStaticOpts.resourceOwner,
      resourceType: approvalDeskWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, approvalDeskWorkspaceAriStaticOpts);
    return new _ApprovalDeskWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, approvalDeskWorkspaceAriStaticOpts);
    return new _ApprovalDeskWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/atlashub/id/types.ts
var AtlashubIdAriResourceOwner = "atlashub", AtlashubIdAriResourceType = "id";

// src/atlashub/id/manifest.ts
var atlashubIdAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AtlashubIdAriResourceOwner,
  resourceType: AtlashubIdAriResourceType,
  resourceIdSlug: "{id}",
  resourceIdSegmentFormats: {
    id: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/atlashub/id/index.ts
var AtlashubIdAri = class _AtlashubIdAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._id = opts.resourceIdSegmentValues.id;
  }
  get id() {
    return this._id;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: atlashubIdAriStaticOpts.qualifier,
      platformQualifier: atlashubIdAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: atlashubIdAriStaticOpts.resourceOwner,
      resourceType: atlashubIdAriStaticOpts.resourceType,
      resourceId: `${opts.id}`,
      resourceIdSegmentValues: {
        id: opts.id
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, atlashubIdAriStaticOpts);
    return new _AtlashubIdAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, atlashubIdAriStaticOpts);
    return new _AtlashubIdAri(opts);
  }
  getVariables() {
    return {
      id: this.id
    };
  }
};

// src/atlashub/site/types.ts
var AtlashubSiteAriResourceOwner = "atlashub", AtlashubSiteAriResourceType = "site";

// src/atlashub/site/manifest.ts
var atlashubSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AtlashubSiteAriResourceOwner,
  resourceType: AtlashubSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/atlashub/site/index.ts
var AtlashubSiteAri = class _AtlashubSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: atlashubSiteAriStaticOpts.qualifier,
      platformQualifier: atlashubSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: atlashubSiteAriStaticOpts.resourceOwner,
      resourceType: atlashubSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, atlashubSiteAriStaticOpts);
    return new _AtlashubSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, atlashubSiteAriStaticOpts);
    return new _AtlashubSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/automation/role/types.ts
var AutomationRoleAriResourceOwner = "automation", AutomationRoleAriResourceType = "role";

// src/automation/role/manifest.ts
var automationRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AutomationRoleAriResourceOwner,
  resourceType: AutomationRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/automation/role/index.ts
var AutomationRoleAri = class _AutomationRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: automationRoleAriStaticOpts.qualifier,
      platformQualifier: automationRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: automationRoleAriStaticOpts.resourceOwner,
      resourceType: automationRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, automationRoleAriStaticOpts);
    return new _AutomationRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, automationRoleAriStaticOpts);
    return new _AutomationRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/automation/rule/types.ts
var AutomationRuleAriResourceOwner = "automation", AutomationRuleAriResourceType = "rule";

// src/automation/rule/manifest.ts
var automationRuleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AutomationRuleAriResourceOwner,
  resourceType: AutomationRuleAriResourceType,
  resourceIdSlug: "{ruleId}",
  resourceIdSegmentFormats: {
    ruleId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/automation/rule/index.ts
var AutomationRuleAri = class _AutomationRuleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._ruleId = opts.resourceIdSegmentValues.ruleId;
  }
  get ruleId() {
    return this._ruleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: automationRuleAriStaticOpts.qualifier,
      platformQualifier: automationRuleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: automationRuleAriStaticOpts.resourceOwner,
      resourceType: automationRuleAriStaticOpts.resourceType,
      resourceId: `${opts.ruleId}`,
      resourceIdSegmentValues: {
        ruleId: opts.ruleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, automationRuleAriStaticOpts);
    return new _AutomationRuleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, automationRuleAriStaticOpts);
    return new _AutomationRuleAri(opts);
  }
  getVariables() {
    return {
      ruleId: this.ruleId
    };
  }
};

// src/avocado/answer/types.ts
var AvocadoAnswerAriResourceOwner = "avocado", AvocadoAnswerAriResourceType = "answer";

// src/avocado/answer/manifest.ts
var avocadoAnswerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: AvocadoAnswerAriResourceOwner,
  resourceType: AvocadoAnswerAriResourceType,
  resourceIdSlug: "activation/{workspaceId}/{answerId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    answerId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/avocado/answer/index.ts
var AvocadoAnswerAri = class _AvocadoAnswerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._answerId = opts.resourceIdSegmentValues.answerId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get answerId() {
    return this._answerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avocadoAnswerAriStaticOpts.qualifier,
      platformQualifier: avocadoAnswerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: avocadoAnswerAriStaticOpts.resourceOwner,
      resourceType: avocadoAnswerAriStaticOpts.resourceType,
      resourceId: `activation/${opts.workspaceId}/${opts.answerId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        answerId: opts.answerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avocadoAnswerAriStaticOpts);
    return new _AvocadoAnswerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avocadoAnswerAriStaticOpts);
    return new _AvocadoAnswerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      answerId: this.answerId
    };
  }
};

// src/avocado/question/types.ts
var AvocadoQuestionAriResourceOwner = "avocado", AvocadoQuestionAriResourceType = "question";

// src/avocado/question/manifest.ts
var avocadoQuestionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: AvocadoQuestionAriResourceOwner,
  resourceType: AvocadoQuestionAriResourceType,
  resourceIdSlug: "activation/{workspaceId}/{questionId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    questionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/avocado/question/index.ts
var AvocadoQuestionAri = class _AvocadoQuestionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._questionId = opts.resourceIdSegmentValues.questionId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get questionId() {
    return this._questionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avocadoQuestionAriStaticOpts.qualifier,
      platformQualifier: avocadoQuestionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: avocadoQuestionAriStaticOpts.resourceOwner,
      resourceType: avocadoQuestionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.workspaceId}/${opts.questionId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        questionId: opts.questionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avocadoQuestionAriStaticOpts);
    return new _AvocadoQuestionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avocadoQuestionAriStaticOpts);
    return new _AvocadoQuestionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      questionId: this.questionId
    };
  }
};

// src/avocado/role/types.ts
var AvocadoRoleAriResourceOwner = "avocado", AvocadoRoleAriResourceType = "role";

// src/avocado/role/manifest.ts
var avocadoRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AvocadoRoleAriResourceOwner,
  resourceType: AvocadoRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/avocado/role/index.ts
var AvocadoRoleAri = class _AvocadoRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avocadoRoleAriStaticOpts.qualifier,
      platformQualifier: avocadoRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: avocadoRoleAriStaticOpts.resourceOwner,
      resourceType: avocadoRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avocadoRoleAriStaticOpts);
    return new _AvocadoRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avocadoRoleAriStaticOpts);
    return new _AvocadoRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/avocado/site/types.ts
var AvocadoSiteAriResourceOwner = "avocado", AvocadoSiteAriResourceType = "site";

// src/avocado/site/manifest.ts
var avocadoSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AvocadoSiteAriResourceOwner,
  resourceType: AvocadoSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/avocado/site/index.ts
var AvocadoSiteAri = class _AvocadoSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avocadoSiteAriStaticOpts.qualifier,
      platformQualifier: avocadoSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: avocadoSiteAriStaticOpts.resourceOwner,
      resourceType: avocadoSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avocadoSiteAriStaticOpts);
    return new _AvocadoSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avocadoSiteAriStaticOpts);
    return new _AvocadoSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/avocado/user/types.ts
var AvocadoUserAriResourceOwner = "avocado", AvocadoUserAriResourceType = "user";

// src/avocado/user/manifest.ts
var avocadoUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AvocadoUserAriResourceOwner,
  resourceType: AvocadoUserAriResourceType,
  resourceIdSlug: "{userId}",
  resourceIdSegmentFormats: {
    userId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/avocado/user/index.ts
var AvocadoUserAri = class _AvocadoUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avocadoUserAriStaticOpts.qualifier,
      platformQualifier: avocadoUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: avocadoUserAriStaticOpts.resourceOwner,
      resourceType: avocadoUserAriStaticOpts.resourceType,
      resourceId: `${opts.userId}`,
      resourceIdSegmentValues: {
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avocadoUserAriStaticOpts);
    return new _AvocadoUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avocadoUserAriStaticOpts);
    return new _AvocadoUserAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId
    };
  }
};

// src/avp/dashboard/types.ts
var AvpDashboardAriResourceOwner = "avp", AvpDashboardAriResourceType = "dashboard";

// src/avp/dashboard/manifest.ts
var avpDashboardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: AvpDashboardAriResourceOwner,
  resourceType: AvpDashboardAriResourceType,
  resourceIdSlug: "activation/{activationId}/{dashboardId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    dashboardId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/avp/dashboard/index.ts
var AvpDashboardAri = class _AvpDashboardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._dashboardId = opts.resourceIdSegmentValues.dashboardId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get dashboardId() {
    return this._dashboardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avpDashboardAriStaticOpts.qualifier,
      platformQualifier: avpDashboardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: avpDashboardAriStaticOpts.resourceOwner,
      resourceType: avpDashboardAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.dashboardId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        dashboardId: opts.dashboardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avpDashboardAriStaticOpts);
    return new _AvpDashboardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avpDashboardAriStaticOpts);
    return new _AvpDashboardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      dashboardId: this.dashboardId
    };
  }
};

// src/avp/datasource/types.ts
var AvpDatasourceAriResourceOwner = "avp", AvpDatasourceAriResourceType = "datasource";

// src/avp/datasource/manifest.ts
var avpDatasourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: AvpDatasourceAriResourceOwner,
  resourceType: AvpDatasourceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{datasourceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    datasourceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/avp/datasource/index.ts
var AvpDatasourceAri = class _AvpDatasourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._datasourceId = opts.resourceIdSegmentValues.datasourceId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get datasourceId() {
    return this._datasourceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avpDatasourceAriStaticOpts.qualifier,
      platformQualifier: avpDatasourceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: avpDatasourceAriStaticOpts.resourceOwner,
      resourceType: avpDatasourceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.datasourceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        datasourceId: opts.datasourceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avpDatasourceAriStaticOpts);
    return new _AvpDatasourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avpDatasourceAriStaticOpts);
    return new _AvpDatasourceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      datasourceId: this.datasourceId
    };
  }
};

// src/avp/role/types.ts
var AvpRoleAriResourceOwner = "avp", AvpRoleAriResourceType = "role";

// src/avp/role/manifest.ts
var avpRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AvpRoleAriResourceOwner,
  resourceType: AvpRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/avp/role/index.ts
var AvpRoleAri = class _AvpRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avpRoleAriStaticOpts.qualifier,
      platformQualifier: avpRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: avpRoleAriStaticOpts.resourceOwner,
      resourceType: avpRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avpRoleAriStaticOpts);
    return new _AvpRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avpRoleAriStaticOpts);
    return new _AvpRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/avp/site/types.ts
var AvpSiteAriResourceOwner = "avp", AvpSiteAriResourceType = "site";

// src/avp/site/manifest.ts
var avpSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: AvpSiteAriResourceOwner,
  resourceType: AvpSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/avp/site/index.ts
var AvpSiteAri = class _AvpSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: avpSiteAriStaticOpts.qualifier,
      platformQualifier: avpSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: avpSiteAriStaticOpts.resourceOwner,
      resourceType: avpSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, avpSiteAriStaticOpts);
    return new _AvpSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, avpSiteAriStaticOpts);
    return new _AvpSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/beacon/alert/types.ts
var BeaconAlertAriResourceOwner = "beacon", BeaconAlertAriResourceType = "alert";

// src/beacon/alert/manifest.ts
var beaconAlertAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconAlertAriResourceOwner,
  resourceType: BeaconAlertAriResourceType,
  resourceIdSlug: "{workspaceId}/{alertId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    alertId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/alert/index.ts
var BeaconAlertAri = class _BeaconAlertAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._alertId = opts.resourceIdSegmentValues.alertId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get alertId() {
    return this._alertId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconAlertAriStaticOpts.qualifier,
      platformQualifier: beaconAlertAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconAlertAriStaticOpts.resourceOwner,
      resourceType: beaconAlertAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.alertId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        alertId: opts.alertId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconAlertAriStaticOpts);
    return new _BeaconAlertAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconAlertAriStaticOpts);
    return new _BeaconAlertAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      alertId: this.alertId
    };
  }
};

// src/beacon/custom-detection/types.ts
var BeaconCustomDetectionAriResourceOwner = "beacon", BeaconCustomDetectionAriResourceType = "custom-detection";

// src/beacon/custom-detection/manifest.ts
var beaconCustomDetectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconCustomDetectionAriResourceOwner,
  resourceType: BeaconCustomDetectionAriResourceType,
  resourceIdSlug: "{workspaceId}/{customDetectionId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    customDetectionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/custom-detection/index.ts
var BeaconCustomDetectionAri = class _BeaconCustomDetectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._customDetectionId = opts.resourceIdSegmentValues.customDetectionId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get customDetectionId() {
    return this._customDetectionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconCustomDetectionAriStaticOpts.qualifier,
      platformQualifier: beaconCustomDetectionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconCustomDetectionAriStaticOpts.resourceOwner,
      resourceType: beaconCustomDetectionAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.customDetectionId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        customDetectionId: opts.customDetectionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconCustomDetectionAriStaticOpts);
    return new _BeaconCustomDetectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconCustomDetectionAriStaticOpts);
    return new _BeaconCustomDetectionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      customDetectionId: this.customDetectionId
    };
  }
};

// src/beacon/detection/types.ts
var BeaconDetectionAriResourceOwner = "beacon", BeaconDetectionAriResourceType = "detection";

// src/beacon/detection/manifest.ts
var beaconDetectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BeaconDetectionAriResourceOwner,
  resourceType: BeaconDetectionAriResourceType,
  resourceIdSlug: "{workspaceId}/{detectionId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    detectionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/detection/index.ts
var BeaconDetectionAri = class _BeaconDetectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._detectionId = opts.resourceIdSegmentValues.detectionId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get detectionId() {
    return this._detectionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconDetectionAriStaticOpts.qualifier,
      platformQualifier: beaconDetectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: beaconDetectionAriStaticOpts.resourceOwner,
      resourceType: beaconDetectionAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.detectionId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        detectionId: opts.detectionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconDetectionAriStaticOpts);
    return new _BeaconDetectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconDetectionAriStaticOpts);
    return new _BeaconDetectionAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      detectionId: this.detectionId
    };
  }
};

// src/beacon/detection-setting/types.ts
var BeaconDetectionSettingAriResourceOwner = "beacon", BeaconDetectionSettingAriResourceType = "detection-setting";

// src/beacon/detection-setting/manifest.ts
var beaconDetectionSettingAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconDetectionSettingAriResourceOwner,
  resourceType: BeaconDetectionSettingAriResourceType,
  resourceIdSlug: "{workspaceId}/{detectionType}/{detectionId}/{settingId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    detectionType: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    detectionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    settingId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/detection-setting/index.ts
var BeaconDetectionSettingAri = class _BeaconDetectionSettingAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._detectionType = opts.resourceIdSegmentValues.detectionType, this._detectionId = opts.resourceIdSegmentValues.detectionId, this._settingId = opts.resourceIdSegmentValues.settingId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get detectionType() {
    return this._detectionType;
  }
  get detectionId() {
    return this._detectionId;
  }
  get settingId() {
    return this._settingId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconDetectionSettingAriStaticOpts.qualifier,
      platformQualifier: beaconDetectionSettingAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconDetectionSettingAriStaticOpts.resourceOwner,
      resourceType: beaconDetectionSettingAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.detectionType}/${opts.detectionId}/${opts.settingId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        detectionType: opts.detectionType,
        detectionId: opts.detectionId,
        settingId: opts.settingId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconDetectionSettingAriStaticOpts);
    return new _BeaconDetectionSettingAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconDetectionSettingAriStaticOpts);
    return new _BeaconDetectionSettingAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      detectionType: this.detectionType,
      detectionId: this.detectionId,
      settingId: this.settingId
    };
  }
};

// src/beacon/role/types.ts
var BeaconRoleAriResourceOwner = "beacon", BeaconRoleAriResourceType = "role";

// src/beacon/role/manifest.ts
var beaconRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BeaconRoleAriResourceOwner,
  resourceType: BeaconRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/role/index.ts
var BeaconRoleAri = class _BeaconRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconRoleAriStaticOpts.qualifier,
      platformQualifier: beaconRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: beaconRoleAriStaticOpts.resourceOwner,
      resourceType: beaconRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconRoleAriStaticOpts);
    return new _BeaconRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconRoleAriStaticOpts);
    return new _BeaconRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/beacon/site/types.ts
var BeaconSiteAriResourceOwner = "beacon", BeaconSiteAriResourceType = "site";

// src/beacon/site/manifest.ts
var beaconSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BeaconSiteAriResourceOwner,
  resourceType: BeaconSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/site/index.ts
var BeaconSiteAri = class _BeaconSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconSiteAriStaticOpts.qualifier,
      platformQualifier: beaconSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: beaconSiteAriStaticOpts.resourceOwner,
      resourceType: beaconSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconSiteAriStaticOpts);
    return new _BeaconSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconSiteAriStaticOpts);
    return new _BeaconSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/beacon/subscription/types.ts
var BeaconSubscriptionAriResourceOwner = "beacon", BeaconSubscriptionAriResourceType = "subscription";

// src/beacon/subscription/manifest.ts
var beaconSubscriptionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconSubscriptionAriResourceOwner,
  resourceType: BeaconSubscriptionAriResourceType,
  resourceIdSlug: "{workspaceId}/{subscriptionId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    subscriptionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/subscription/index.ts
var BeaconSubscriptionAri = class _BeaconSubscriptionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._subscriptionId = opts.resourceIdSegmentValues.subscriptionId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get subscriptionId() {
    return this._subscriptionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconSubscriptionAriStaticOpts.qualifier,
      platformQualifier: beaconSubscriptionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconSubscriptionAriStaticOpts.resourceOwner,
      resourceType: beaconSubscriptionAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.subscriptionId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        subscriptionId: opts.subscriptionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconSubscriptionAriStaticOpts);
    return new _BeaconSubscriptionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconSubscriptionAriStaticOpts);
    return new _BeaconSubscriptionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      subscriptionId: this.subscriptionId
    };
  }
};

// src/beacon/workspace/types.ts
var BeaconWorkspaceAriResourceOwner = "beacon", BeaconWorkspaceAriResourceType = "workspace";

// src/beacon/workspace/manifest.ts
var beaconWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: BeaconWorkspaceAriResourceOwner,
  resourceType: BeaconWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/beacon/workspace/index.ts
var BeaconWorkspaceAri = class _BeaconWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: beaconWorkspaceAriStaticOpts.qualifier,
      platformQualifier: beaconWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: beaconWorkspaceAriStaticOpts.resourceOwner,
      resourceType: beaconWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, beaconWorkspaceAriStaticOpts);
    return new _BeaconWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, beaconWorkspaceAriStaticOpts);
    return new _BeaconWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId
    };
  }
};

// src/bitbucket/app/types.ts
var BitbucketAppAriResourceOwner = "bitbucket", BitbucketAppAriResourceType = "app";

// src/bitbucket/app/manifest.ts
var bitbucketAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketAppAriResourceOwner,
  resourceType: BitbucketAppAriResourceType,
  resourceIdSlug: "{workspaceId}/{appId}",
  resourceIdSegmentFormats: {
    workspaceId: /\{[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}}/,
    // eslint-disable-line no-useless-escape
    appId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/app/index.ts
var BitbucketAppAri = class _BitbucketAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._appId = opts.resourceIdSegmentValues.appId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get appId() {
    return this._appId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketAppAriStaticOpts.qualifier,
      platformQualifier: bitbucketAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketAppAriStaticOpts.resourceOwner,
      resourceType: bitbucketAppAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.appId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        appId: opts.appId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketAppAriStaticOpts);
    return new _BitbucketAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketAppAriStaticOpts);
    return new _BitbucketAppAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      appId: this.appId
    };
  }
};

// src/bitbucket/oauth-consumer/types.ts
var BitbucketOauthConsumerAriResourceOwner = "bitbucket", BitbucketOauthConsumerAriResourceType = "oauth-consumer";

// src/bitbucket/oauth-consumer/manifest.ts
var bitbucketOauthConsumerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketOauthConsumerAriResourceOwner,
  resourceType: BitbucketOauthConsumerAriResourceType,
  resourceIdSlug: "{clientId}",
  resourceIdSegmentFormats: {
    clientId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/oauth-consumer/index.ts
var BitbucketOauthConsumerAri = class _BitbucketOauthConsumerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._clientId = opts.resourceIdSegmentValues.clientId;
  }
  get clientId() {
    return this._clientId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketOauthConsumerAriStaticOpts.qualifier,
      platformQualifier: bitbucketOauthConsumerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketOauthConsumerAriStaticOpts.resourceOwner,
      resourceType: bitbucketOauthConsumerAriStaticOpts.resourceType,
      resourceId: `${opts.clientId}`,
      resourceIdSegmentValues: {
        clientId: opts.clientId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketOauthConsumerAriStaticOpts);
    return new _BitbucketOauthConsumerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketOauthConsumerAriStaticOpts);
    return new _BitbucketOauthConsumerAri(opts);
  }
  getVariables() {
    return {
      clientId: this.clientId
    };
  }
};

// src/bitbucket/project/types.ts
var BitbucketProjectAriResourceOwner = "bitbucket", BitbucketProjectAriResourceType = "project";

// src/bitbucket/project/manifest.ts
var bitbucketProjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketProjectAriResourceOwner,
  resourceType: BitbucketProjectAriResourceType,
  resourceIdSlug: "{projectId}",
  resourceIdSegmentFormats: {
    projectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/project/index.ts
var BitbucketProjectAri = class _BitbucketProjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._projectId = opts.resourceIdSegmentValues.projectId;
  }
  get projectId() {
    return this._projectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketProjectAriStaticOpts.qualifier,
      platformQualifier: bitbucketProjectAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketProjectAriStaticOpts.resourceOwner,
      resourceType: bitbucketProjectAriStaticOpts.resourceType,
      resourceId: `${opts.projectId}`,
      resourceIdSegmentValues: {
        projectId: opts.projectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketProjectAriStaticOpts);
    return new _BitbucketProjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketProjectAriStaticOpts);
    return new _BitbucketProjectAri(opts);
  }
  getVariables() {
    return {
      projectId: this.projectId
    };
  }
};

// src/bitbucket/pullrequest/types.ts
var BitbucketPullrequestAriResourceOwner = "bitbucket", BitbucketPullrequestAriResourceType = "pullrequest";

// src/bitbucket/pullrequest/manifest.ts
var bitbucketPullrequestAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketPullrequestAriResourceOwner,
  resourceType: BitbucketPullrequestAriResourceType,
  resourceIdSlug: "{pullRequestId}",
  resourceIdSegmentFormats: {
    pullRequestId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/pullrequest/index.ts
var BitbucketPullrequestAri = class _BitbucketPullrequestAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketPullrequestAriStaticOpts.qualifier,
      platformQualifier: bitbucketPullrequestAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketPullrequestAriStaticOpts.resourceOwner,
      resourceType: bitbucketPullrequestAriStaticOpts.resourceType,
      resourceId: `${opts.pullRequestId}`,
      resourceIdSegmentValues: {
        pullRequestId: opts.pullRequestId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketPullrequestAriStaticOpts);
    return new _BitbucketPullrequestAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketPullrequestAriStaticOpts);
    return new _BitbucketPullrequestAri(opts);
  }
  getVariables() {
    return {
      pullRequestId: this.pullRequestId
    };
  }
};

// src/bitbucket/repository/types.ts
var BitbucketRepositoryAriResourceOwner = "bitbucket", BitbucketRepositoryAriResourceType = "repository";

// src/bitbucket/repository/manifest.ts
var bitbucketRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketRepositoryAriResourceOwner,
  resourceType: BitbucketRepositoryAriResourceType,
  resourceIdSlug: "{repositoryId}",
  resourceIdSegmentFormats: {
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/repository/index.ts
var BitbucketRepositoryAri = class _BitbucketRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketRepositoryAriStaticOpts.qualifier,
      platformQualifier: bitbucketRepositoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketRepositoryAriStaticOpts.resourceOwner,
      resourceType: bitbucketRepositoryAriStaticOpts.resourceType,
      resourceId: `${opts.repositoryId}`,
      resourceIdSegmentValues: {
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketRepositoryAriStaticOpts);
    return new _BitbucketRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketRepositoryAriStaticOpts);
    return new _BitbucketRepositoryAri(opts);
  }
  getVariables() {
    return {
      repositoryId: this.repositoryId
    };
  }
};

// src/bitbucket/repository-transfer/types.ts
var BitbucketRepositoryTransferAriResourceOwner = "bitbucket", BitbucketRepositoryTransferAriResourceType = "repository-transfer";

// src/bitbucket/repository-transfer/manifest.ts
var bitbucketRepositoryTransferAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketRepositoryTransferAriResourceOwner,
  resourceType: BitbucketRepositoryTransferAriResourceType,
  resourceIdSlug: "{transferId}",
  resourceIdSegmentFormats: {
    transferId: /[a-f0-9]{32}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/repository-transfer/index.ts
var BitbucketRepositoryTransferAri = class _BitbucketRepositoryTransferAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._transferId = opts.resourceIdSegmentValues.transferId;
  }
  get transferId() {
    return this._transferId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketRepositoryTransferAriStaticOpts.qualifier,
      platformQualifier: bitbucketRepositoryTransferAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketRepositoryTransferAriStaticOpts.resourceOwner,
      resourceType: bitbucketRepositoryTransferAriStaticOpts.resourceType,
      resourceId: `${opts.transferId}`,
      resourceIdSegmentValues: {
        transferId: opts.transferId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketRepositoryTransferAriStaticOpts);
    return new _BitbucketRepositoryTransferAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketRepositoryTransferAriStaticOpts);
    return new _BitbucketRepositoryTransferAri(opts);
  }
  getVariables() {
    return {
      transferId: this.transferId
    };
  }
};

// src/bitbucket/site/types.ts
var BitbucketSiteAriResourceOwner = "bitbucket", BitbucketSiteAriResourceType = "site";

// src/bitbucket/site/manifest.ts
var bitbucketSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketSiteAriResourceOwner,
  resourceType: BitbucketSiteAriResourceType,
  resourceIdSlug: "bitbucket",
  resourceIdSegmentFormats: {}
};

// src/bitbucket/site/index.ts
var BitbucketSiteAri = class _BitbucketSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketSiteAriStaticOpts.qualifier,
      platformQualifier: bitbucketSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketSiteAriStaticOpts.resourceOwner,
      resourceType: bitbucketSiteAriStaticOpts.resourceType,
      resourceId: "bitbucket",
      resourceIdSegmentValues: {}
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketSiteAriStaticOpts);
    return new _BitbucketSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketSiteAriStaticOpts);
    return new _BitbucketSiteAri(opts);
  }
  getVariables() {
    return {};
  }
};

// src/bitbucket/team/types.ts
var BitbucketTeamAriResourceOwner = "bitbucket", BitbucketTeamAriResourceType = "team";

// src/bitbucket/team/manifest.ts
var bitbucketTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketTeamAriResourceOwner,
  resourceType: BitbucketTeamAriResourceType,
  resourceIdSlug: "{teamId}",
  resourceIdSegmentFormats: {
    teamId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/team/index.ts
var BitbucketTeamAri = class _BitbucketTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId;
  }
  get teamId() {
    return this._teamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketTeamAriStaticOpts.qualifier,
      platformQualifier: bitbucketTeamAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketTeamAriStaticOpts.resourceOwner,
      resourceType: bitbucketTeamAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketTeamAriStaticOpts);
    return new _BitbucketTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketTeamAriStaticOpts);
    return new _BitbucketTeamAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId
    };
  }
};

// src/bitbucket/workspace/types.ts
var BitbucketWorkspaceAriResourceOwner = "bitbucket", BitbucketWorkspaceAriResourceType = "workspace";

// src/bitbucket/workspace/manifest.ts
var bitbucketWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BitbucketWorkspaceAriResourceOwner,
  resourceType: BitbucketWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/bitbucket/workspace/index.ts
var BitbucketWorkspaceAri = class _BitbucketWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: bitbucketWorkspaceAriStaticOpts.qualifier,
      platformQualifier: bitbucketWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: bitbucketWorkspaceAriStaticOpts.resourceOwner,
      resourceType: bitbucketWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, bitbucketWorkspaceAriStaticOpts);
    return new _BitbucketWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, bitbucketWorkspaceAriStaticOpts);
    return new _BitbucketWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/brie/role/types.ts
var BrieRoleAriResourceOwner = "brie", BrieRoleAriResourceType = "role";

// src/brie/role/manifest.ts
var brieRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BrieRoleAriResourceOwner,
  resourceType: BrieRoleAriResourceType,
  resourceIdSlug: "scope/{roleTypeId}",
  resourceIdSegmentFormats: {
    roleTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/brie/role/index.ts
var BrieRoleAri = class _BrieRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleTypeId = opts.resourceIdSegmentValues.roleTypeId;
  }
  get roleTypeId() {
    return this._roleTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: brieRoleAriStaticOpts.qualifier,
      platformQualifier: brieRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: brieRoleAriStaticOpts.resourceOwner,
      resourceType: brieRoleAriStaticOpts.resourceType,
      resourceId: `scope/${opts.roleTypeId}`,
      resourceIdSegmentValues: {
        roleTypeId: opts.roleTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, brieRoleAriStaticOpts);
    return new _BrieRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, brieRoleAriStaticOpts);
    return new _BrieRoleAri(opts);
  }
  getVariables() {
    return {
      roleTypeId: this.roleTypeId
    };
  }
};

// src/brie/site/types.ts
var BrieSiteAriResourceOwner = "brie", BrieSiteAriResourceType = "site";

// src/brie/site/manifest.ts
var brieSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: BrieSiteAriResourceOwner,
  resourceType: BrieSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/brie/site/index.ts
var BrieSiteAri = class _BrieSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: brieSiteAriStaticOpts.qualifier,
      platformQualifier: brieSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: brieSiteAriStaticOpts.resourceOwner,
      resourceType: brieSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, brieSiteAriStaticOpts);
    return new _BrieSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, brieSiteAriStaticOpts);
    return new _BrieSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/canvas/board/types.ts
var CanvasBoardAriResourceOwner = "canvas", CanvasBoardAriResourceType = "board";

// src/canvas/board/manifest.ts
var canvasBoardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CanvasBoardAriResourceOwner,
  resourceType: CanvasBoardAriResourceType,
  resourceIdSlug: "{boardId}",
  resourceIdSegmentFormats: {
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/canvas/board/index.ts
var CanvasBoardAri = class _CanvasBoardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get siteId() {
    return this._siteId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: canvasBoardAriStaticOpts.qualifier,
      platformQualifier: canvasBoardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: canvasBoardAriStaticOpts.resourceOwner,
      resourceType: canvasBoardAriStaticOpts.resourceType,
      resourceId: `${opts.boardId}`,
      resourceIdSegmentValues: {
        boardId: opts.boardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, canvasBoardAriStaticOpts);
    return new _CanvasBoardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, canvasBoardAriStaticOpts);
    return new _CanvasBoardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      boardId: this.boardId
    };
  }
};

// src/canvas/database/types.ts
var CanvasDatabaseAriResourceOwner = "canvas", CanvasDatabaseAriResourceType = "database";

// src/canvas/database/manifest.ts
var canvasDatabaseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CanvasDatabaseAriResourceOwner,
  resourceType: CanvasDatabaseAriResourceType,
  resourceIdSlug: "{databaseId}",
  resourceIdSegmentFormats: {
    databaseId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/canvas/database/index.ts
var CanvasDatabaseAri = class _CanvasDatabaseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._databaseId = opts.resourceIdSegmentValues.databaseId;
  }
  get siteId() {
    return this._siteId;
  }
  get databaseId() {
    return this._databaseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: canvasDatabaseAriStaticOpts.qualifier,
      platformQualifier: canvasDatabaseAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: canvasDatabaseAriStaticOpts.resourceOwner,
      resourceType: canvasDatabaseAriStaticOpts.resourceType,
      resourceId: `${opts.databaseId}`,
      resourceIdSegmentValues: {
        databaseId: opts.databaseId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, canvasDatabaseAriStaticOpts);
    return new _CanvasDatabaseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, canvasDatabaseAriStaticOpts);
    return new _CanvasDatabaseAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      databaseId: this.databaseId
    };
  }
};

// src/canvas/site/types.ts
var CanvasSiteAriResourceOwner = "canvas", CanvasSiteAriResourceType = "site";

// src/canvas/site/manifest.ts
var canvasSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CanvasSiteAriResourceOwner,
  resourceType: CanvasSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/canvas/site/index.ts
var CanvasSiteAri = class _CanvasSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: canvasSiteAriStaticOpts.qualifier,
      platformQualifier: canvasSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: canvasSiteAriStaticOpts.resourceOwner,
      resourceType: canvasSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, canvasSiteAriStaticOpts);
    return new _CanvasSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, canvasSiteAriStaticOpts);
    return new _CanvasSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/canvas/workspace/types.ts
var CanvasWorkspaceAriResourceOwner = "canvas", CanvasWorkspaceAriResourceType = "workspace";

// src/canvas/workspace/manifest.ts
var canvasWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CanvasWorkspaceAriResourceOwner,
  resourceType: CanvasWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/canvas/workspace/index.ts
var CanvasWorkspaceAri = class _CanvasWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: canvasWorkspaceAriStaticOpts.qualifier,
      platformQualifier: canvasWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: canvasWorkspaceAriStaticOpts.resourceOwner,
      resourceType: canvasWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, canvasWorkspaceAriStaticOpts);
    return new _CanvasWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, canvasWorkspaceAriStaticOpts);
    return new _CanvasWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId
    };
  }
};

// src/cmdb/attribute/types.ts
var CmdbAttributeAriResourceOwner = "cmdb", CmdbAttributeAriResourceType = "attribute";

// src/cmdb/attribute/manifest.ts
var cmdbAttributeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbAttributeAriResourceOwner,
  resourceType: CmdbAttributeAriResourceType,
  resourceIdSlug: "{workspaceId}/{attributeId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    attributeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/attribute/index.ts
var CmdbAttributeAri = class _CmdbAttributeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._attributeId = opts.resourceIdSegmentValues.attributeId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get attributeId() {
    return this._attributeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbAttributeAriStaticOpts.qualifier,
      platformQualifier: cmdbAttributeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbAttributeAriStaticOpts.resourceOwner,
      resourceType: cmdbAttributeAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.attributeId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        attributeId: opts.attributeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbAttributeAriStaticOpts);
    return new _CmdbAttributeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbAttributeAriStaticOpts);
    return new _CmdbAttributeAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      attributeId: this.attributeId
    };
  }
};

// src/cmdb/import-configuration/types.ts
var CmdbImportConfigurationAriResourceOwner = "cmdb", CmdbImportConfigurationAriResourceType = "import-configuration";

// src/cmdb/import-configuration/manifest.ts
var cmdbImportConfigurationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbImportConfigurationAriResourceOwner,
  resourceType: CmdbImportConfigurationAriResourceType,
  resourceIdSlug: "{workspaceId}/{importConfigId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    importConfigId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/import-configuration/index.ts
var CmdbImportConfigurationAri = class _CmdbImportConfigurationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._importConfigId = opts.resourceIdSegmentValues.importConfigId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get importConfigId() {
    return this._importConfigId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbImportConfigurationAriStaticOpts.qualifier,
      platformQualifier: cmdbImportConfigurationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbImportConfigurationAriStaticOpts.resourceOwner,
      resourceType: cmdbImportConfigurationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.importConfigId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        importConfigId: opts.importConfigId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbImportConfigurationAriStaticOpts);
    return new _CmdbImportConfigurationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbImportConfigurationAriStaticOpts);
    return new _CmdbImportConfigurationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      importConfigId: this.importConfigId
    };
  }
};

// src/cmdb/object/types.ts
var CmdbObjectAriResourceOwner = "cmdb", CmdbObjectAriResourceType = "object";

// src/cmdb/object/manifest.ts
var cmdbObjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbObjectAriResourceOwner,
  resourceType: CmdbObjectAriResourceType,
  resourceIdSlug: "{workspaceId}/{objectId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    objectId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/object/index.ts
var CmdbObjectAri = class _CmdbObjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._objectId = opts.resourceIdSegmentValues.objectId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get objectId() {
    return this._objectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbObjectAriStaticOpts.qualifier,
      platformQualifier: cmdbObjectAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbObjectAriStaticOpts.resourceOwner,
      resourceType: cmdbObjectAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.objectId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        objectId: opts.objectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbObjectAriStaticOpts);
    return new _CmdbObjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbObjectAriStaticOpts);
    return new _CmdbObjectAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      objectId: this.objectId
    };
  }
};

// src/cmdb/role/types.ts
var CmdbRoleAriResourceOwner = "cmdb", CmdbRoleAriResourceType = "role";

// src/cmdb/role/manifest.ts
var cmdbRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbRoleAriResourceOwner,
  resourceType: CmdbRoleAriResourceType,
  resourceIdSlug: "{roleGroup}/{roleType}",
  resourceIdSegmentFormats: {
    roleGroup: /(?:schema|airtrack|airtrack-buoy)/,
    // eslint-disable-line no-useless-escape
    roleType: /(?:viewer|admin|report-viewer|report-editor)/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/role/index.ts
var CmdbRoleAri = class _CmdbRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleGroup = opts.resourceIdSegmentValues.roleGroup, this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleGroup() {
    return this._roleGroup;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbRoleAriStaticOpts.qualifier,
      platformQualifier: cmdbRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbRoleAriStaticOpts.resourceOwner,
      resourceType: cmdbRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleGroup}/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleGroup: opts.roleGroup,
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbRoleAriStaticOpts);
    return new _CmdbRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbRoleAriStaticOpts);
    return new _CmdbRoleAri(opts);
  }
  getVariables() {
    return {
      roleGroup: this.roleGroup,
      roleType: this.roleType
    };
  }
};

// src/cmdb/schema/types.ts
var CmdbSchemaAriResourceOwner = "cmdb", CmdbSchemaAriResourceType = "schema";

// src/cmdb/schema/manifest.ts
var cmdbSchemaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbSchemaAriResourceOwner,
  resourceType: CmdbSchemaAriResourceType,
  resourceIdSlug: "{workspaceId}/{schemaId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    schemaId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/schema/index.ts
var CmdbSchemaAri = class _CmdbSchemaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._schemaId = opts.resourceIdSegmentValues.schemaId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get schemaId() {
    return this._schemaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbSchemaAriStaticOpts.qualifier,
      platformQualifier: cmdbSchemaAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbSchemaAriStaticOpts.resourceOwner,
      resourceType: cmdbSchemaAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.schemaId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        schemaId: opts.schemaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbSchemaAriStaticOpts);
    return new _CmdbSchemaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbSchemaAriStaticOpts);
    return new _CmdbSchemaAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      schemaId: this.schemaId
    };
  }
};

// src/cmdb/type/types.ts
var CmdbTypeAriResourceOwner = "cmdb", CmdbTypeAriResourceType = "type";

// src/cmdb/type/manifest.ts
var cmdbTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbTypeAriResourceOwner,
  resourceType: CmdbTypeAriResourceType,
  resourceIdSlug: "{workspaceId}/{typeId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    typeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/type/index.ts
var CmdbTypeAri = class _CmdbTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._typeId = opts.resourceIdSegmentValues.typeId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get typeId() {
    return this._typeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbTypeAriStaticOpts.qualifier,
      platformQualifier: cmdbTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbTypeAriStaticOpts.resourceOwner,
      resourceType: cmdbTypeAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.typeId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        typeId: opts.typeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbTypeAriStaticOpts);
    return new _CmdbTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbTypeAriStaticOpts);
    return new _CmdbTypeAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      typeId: this.typeId
    };
  }
};

// src/cmdb/workspace/types.ts
var CmdbWorkspaceAriResourceOwner = "cmdb", CmdbWorkspaceAriResourceType = "workspace";

// src/cmdb/workspace/manifest.ts
var cmdbWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CmdbWorkspaceAriResourceOwner,
  resourceType: CmdbWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/cmdb/workspace/index.ts
var CmdbWorkspaceAri = class _CmdbWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: cmdbWorkspaceAriStaticOpts.qualifier,
      platformQualifier: cmdbWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: cmdbWorkspaceAriStaticOpts.resourceOwner,
      resourceType: cmdbWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, cmdbWorkspaceAriStaticOpts);
    return new _CmdbWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, cmdbWorkspaceAriStaticOpts);
    return new _CmdbWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/commerce/catalog-account/types.ts
var CommerceCatalogAccountAriResourceOwner = "commerce", CommerceCatalogAccountAriResourceType = "catalog-account";

// src/commerce/catalog-account/manifest.ts
var commerceCatalogAccountAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceCatalogAccountAriResourceOwner,
  resourceType: CommerceCatalogAccountAriResourceType,
  resourceIdSlug: "{catalogAccountId}",
  resourceIdSegmentFormats: {
    catalogAccountId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/catalog-account/index.ts
var CommerceCatalogAccountAri = class _CommerceCatalogAccountAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._catalogAccountId = opts.resourceIdSegmentValues.catalogAccountId;
  }
  get catalogAccountId() {
    return this._catalogAccountId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceCatalogAccountAriStaticOpts.qualifier,
      platformQualifier: commerceCatalogAccountAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceCatalogAccountAriStaticOpts.resourceOwner,
      resourceType: commerceCatalogAccountAriStaticOpts.resourceType,
      resourceId: `${opts.catalogAccountId}`,
      resourceIdSegmentValues: {
        catalogAccountId: opts.catalogAccountId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceCatalogAccountAriStaticOpts);
    return new _CommerceCatalogAccountAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceCatalogAccountAriStaticOpts);
    return new _CommerceCatalogAccountAri(opts);
  }
  getVariables() {
    return {
      catalogAccountId: this.catalogAccountId
    };
  }
};

// src/commerce/change/types.ts
var CommerceChangeAriResourceOwner = "commerce", CommerceChangeAriResourceType = "change";

// src/commerce/change/manifest.ts
var commerceChangeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceChangeAriResourceOwner,
  resourceType: CommerceChangeAriResourceType,
  resourceIdSlug: "{changeUuid}",
  resourceIdSegmentFormats: {
    changeUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/change/index.ts
var CommerceChangeAri = class _CommerceChangeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._changeUuid = opts.resourceIdSegmentValues.changeUuid;
  }
  get changeUuid() {
    return this._changeUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceChangeAriStaticOpts.qualifier,
      platformQualifier: commerceChangeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceChangeAriStaticOpts.resourceOwner,
      resourceType: commerceChangeAriStaticOpts.resourceType,
      resourceId: `${opts.changeUuid}`,
      resourceIdSegmentValues: {
        changeUuid: opts.changeUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceChangeAriStaticOpts);
    return new _CommerceChangeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceChangeAriStaticOpts);
    return new _CommerceChangeAri(opts);
  }
  getVariables() {
    return {
      changeUuid: this.changeUuid
    };
  }
};

// src/commerce/entitlement/types.ts
var CommerceEntitlementAriResourceOwner = "commerce", CommerceEntitlementAriResourceType = "entitlement";

// src/commerce/entitlement/manifest.ts
var commerceEntitlementAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceEntitlementAriResourceOwner,
  resourceType: CommerceEntitlementAriResourceType,
  resourceIdSlug: "{entitlementId}",
  resourceIdSegmentFormats: {
    entitlementId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/entitlement/index.ts
var CommerceEntitlementAri = class _CommerceEntitlementAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._entitlementId = opts.resourceIdSegmentValues.entitlementId;
  }
  get entitlementId() {
    return this._entitlementId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceEntitlementAriStaticOpts.qualifier,
      platformQualifier: commerceEntitlementAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceEntitlementAriStaticOpts.resourceOwner,
      resourceType: commerceEntitlementAriStaticOpts.resourceType,
      resourceId: `${opts.entitlementId}`,
      resourceIdSegmentValues: {
        entitlementId: opts.entitlementId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceEntitlementAriStaticOpts);
    return new _CommerceEntitlementAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceEntitlementAriStaticOpts);
    return new _CommerceEntitlementAri(opts);
  }
  getVariables() {
    return {
      entitlementId: this.entitlementId
    };
  }
};

// src/commerce/entitlement-template/types.ts
var CommerceEntitlementTemplateAriResourceOwner = "commerce", CommerceEntitlementTemplateAriResourceType = "entitlement-template";

// src/commerce/entitlement-template/manifest.ts
var commerceEntitlementTemplateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceEntitlementTemplateAriResourceOwner,
  resourceType: CommerceEntitlementTemplateAriResourceType,
  resourceIdSlug: "{entitlementTemplateId}",
  resourceIdSegmentFormats: {
    entitlementTemplateId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/entitlement-template/index.ts
var CommerceEntitlementTemplateAri = class _CommerceEntitlementTemplateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._entitlementTemplateId = opts.resourceIdSegmentValues.entitlementTemplateId;
  }
  get entitlementTemplateId() {
    return this._entitlementTemplateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceEntitlementTemplateAriStaticOpts.qualifier,
      platformQualifier: commerceEntitlementTemplateAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceEntitlementTemplateAriStaticOpts.resourceOwner,
      resourceType: commerceEntitlementTemplateAriStaticOpts.resourceType,
      resourceId: `${opts.entitlementTemplateId}`,
      resourceIdSegmentValues: {
        entitlementTemplateId: opts.entitlementTemplateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceEntitlementTemplateAriStaticOpts);
    return new _CommerceEntitlementTemplateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceEntitlementTemplateAriStaticOpts);
    return new _CommerceEntitlementTemplateAri(opts);
  }
  getVariables() {
    return {
      entitlementTemplateId: this.entitlementTemplateId
    };
  }
};

// src/commerce/initiative/types.ts
var CommerceInitiativeAriResourceOwner = "commerce", CommerceInitiativeAriResourceType = "initiative";

// src/commerce/initiative/manifest.ts
var commerceInitiativeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceInitiativeAriResourceOwner,
  resourceType: CommerceInitiativeAriResourceType,
  resourceIdSlug: "{initiativeUuid}",
  resourceIdSegmentFormats: {
    initiativeUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/initiative/index.ts
var CommerceInitiativeAri = class _CommerceInitiativeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._initiativeUuid = opts.resourceIdSegmentValues.initiativeUuid;
  }
  get initiativeUuid() {
    return this._initiativeUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceInitiativeAriStaticOpts.qualifier,
      platformQualifier: commerceInitiativeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceInitiativeAriStaticOpts.resourceOwner,
      resourceType: commerceInitiativeAriStaticOpts.resourceType,
      resourceId: `${opts.initiativeUuid}`,
      resourceIdSegmentValues: {
        initiativeUuid: opts.initiativeUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceInitiativeAriStaticOpts);
    return new _CommerceInitiativeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceInitiativeAriStaticOpts);
    return new _CommerceInitiativeAri(opts);
  }
  getVariables() {
    return {
      initiativeUuid: this.initiativeUuid
    };
  }
};

// src/commerce/invoice-group/types.ts
var CommerceInvoiceGroupAriResourceOwner = "commerce", CommerceInvoiceGroupAriResourceType = "invoice-group";

// src/commerce/invoice-group/manifest.ts
var commerceInvoiceGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CommerceInvoiceGroupAriResourceOwner,
  resourceType: CommerceInvoiceGroupAriResourceType,
  resourceIdSlug: "{invoiceGroupId}",
  resourceIdSegmentFormats: {
    invoiceGroupId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/invoice-group/index.ts
var CommerceInvoiceGroupAri = class _CommerceInvoiceGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._txaId = opts.cloudId || "", this._invoiceGroupId = opts.resourceIdSegmentValues.invoiceGroupId;
  }
  get txaId() {
    return this._txaId;
  }
  get invoiceGroupId() {
    return this._invoiceGroupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceInvoiceGroupAriStaticOpts.qualifier,
      platformQualifier: commerceInvoiceGroupAriStaticOpts.platformQualifier,
      cloudId: opts.txaId,
      resourceOwner: commerceInvoiceGroupAriStaticOpts.resourceOwner,
      resourceType: commerceInvoiceGroupAriStaticOpts.resourceType,
      resourceId: `${opts.invoiceGroupId}`,
      resourceIdSegmentValues: {
        invoiceGroupId: opts.invoiceGroupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceInvoiceGroupAriStaticOpts);
    return new _CommerceInvoiceGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceInvoiceGroupAriStaticOpts);
    return new _CommerceInvoiceGroupAri(opts);
  }
  getVariables() {
    return {
      txaId: this.txaId,
      invoiceGroupId: this.invoiceGroupId
    };
  }
};

// src/commerce/offering/types.ts
var CommerceOfferingAriResourceOwner = "commerce", CommerceOfferingAriResourceType = "offering";

// src/commerce/offering/manifest.ts
var commerceOfferingAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceOfferingAriResourceOwner,
  resourceType: CommerceOfferingAriResourceType,
  resourceIdSlug: "{offeringId}",
  resourceIdSegmentFormats: {
    offeringId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/offering/index.ts
var CommerceOfferingAri = class _CommerceOfferingAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._offeringId = opts.resourceIdSegmentValues.offeringId;
  }
  get offeringId() {
    return this._offeringId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceOfferingAriStaticOpts.qualifier,
      platformQualifier: commerceOfferingAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceOfferingAriStaticOpts.resourceOwner,
      resourceType: commerceOfferingAriStaticOpts.resourceType,
      resourceId: `${opts.offeringId}`,
      resourceIdSegmentValues: {
        offeringId: opts.offeringId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceOfferingAriStaticOpts);
    return new _CommerceOfferingAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceOfferingAriStaticOpts);
    return new _CommerceOfferingAri(opts);
  }
  getVariables() {
    return {
      offeringId: this.offeringId
    };
  }
};

// src/commerce/offering-relationship-template/types.ts
var CommerceOfferingRelationshipTemplateAriResourceOwner = "commerce", CommerceOfferingRelationshipTemplateAriResourceType = "offering-relationship-template";

// src/commerce/offering-relationship-template/manifest.ts
var commerceOfferingRelationshipTemplateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceOfferingRelationshipTemplateAriResourceOwner,
  resourceType: CommerceOfferingRelationshipTemplateAriResourceType,
  resourceIdSlug: "{offeringRelationshipTemplateId}",
  resourceIdSegmentFormats: {
    offeringRelationshipTemplateId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/offering-relationship-template/index.ts
var CommerceOfferingRelationshipTemplateAri = class _CommerceOfferingRelationshipTemplateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._offeringRelationshipTemplateId = opts.resourceIdSegmentValues.offeringRelationshipTemplateId;
  }
  get offeringRelationshipTemplateId() {
    return this._offeringRelationshipTemplateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceOfferingRelationshipTemplateAriStaticOpts.qualifier,
      platformQualifier: commerceOfferingRelationshipTemplateAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceOfferingRelationshipTemplateAriStaticOpts.resourceOwner,
      resourceType: commerceOfferingRelationshipTemplateAriStaticOpts.resourceType,
      resourceId: `${opts.offeringRelationshipTemplateId}`,
      resourceIdSegmentValues: {
        offeringRelationshipTemplateId: opts.offeringRelationshipTemplateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceOfferingRelationshipTemplateAriStaticOpts);
    return new _CommerceOfferingRelationshipTemplateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceOfferingRelationshipTemplateAriStaticOpts);
    return new _CommerceOfferingRelationshipTemplateAri(opts);
  }
  getVariables() {
    return {
      offeringRelationshipTemplateId: this.offeringRelationshipTemplateId
    };
  }
};

// src/commerce/order/types.ts
var CommerceOrderAriResourceOwner = "commerce", CommerceOrderAriResourceType = "order";

// src/commerce/order/manifest.ts
var commerceOrderAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CommerceOrderAriResourceOwner,
  resourceType: CommerceOrderAriResourceType,
  resourceIdSlug: "{orderId}",
  resourceIdSegmentFormats: {
    orderId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/order/index.ts
var CommerceOrderAri = class _CommerceOrderAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._txaId = opts.cloudId || "", this._orderId = opts.resourceIdSegmentValues.orderId;
  }
  get txaId() {
    return this._txaId;
  }
  get orderId() {
    return this._orderId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceOrderAriStaticOpts.qualifier,
      platformQualifier: commerceOrderAriStaticOpts.platformQualifier,
      cloudId: opts.txaId,
      resourceOwner: commerceOrderAriStaticOpts.resourceOwner,
      resourceType: commerceOrderAriStaticOpts.resourceType,
      resourceId: `${opts.orderId}`,
      resourceIdSegmentValues: {
        orderId: opts.orderId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceOrderAriStaticOpts);
    return new _CommerceOrderAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceOrderAriStaticOpts);
    return new _CommerceOrderAri(opts);
  }
  getVariables() {
    return {
      txaId: this.txaId,
      orderId: this.orderId
    };
  }
};

// src/commerce/payment-method/types.ts
var CommercePaymentMethodAriResourceOwner = "commerce", CommercePaymentMethodAriResourceType = "payment-method";

// src/commerce/payment-method/manifest.ts
var commercePaymentMethodAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CommercePaymentMethodAriResourceOwner,
  resourceType: CommercePaymentMethodAriResourceType,
  resourceIdSlug: "{paymentMethodId}",
  resourceIdSegmentFormats: {
    paymentMethodId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/payment-method/index.ts
var CommercePaymentMethodAri = class _CommercePaymentMethodAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._txaId = opts.cloudId || "", this._paymentMethodId = opts.resourceIdSegmentValues.paymentMethodId;
  }
  get txaId() {
    return this._txaId;
  }
  get paymentMethodId() {
    return this._paymentMethodId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commercePaymentMethodAriStaticOpts.qualifier,
      platformQualifier: commercePaymentMethodAriStaticOpts.platformQualifier,
      cloudId: opts.txaId,
      resourceOwner: commercePaymentMethodAriStaticOpts.resourceOwner,
      resourceType: commercePaymentMethodAriStaticOpts.resourceType,
      resourceId: `${opts.paymentMethodId}`,
      resourceIdSegmentValues: {
        paymentMethodId: opts.paymentMethodId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commercePaymentMethodAriStaticOpts);
    return new _CommercePaymentMethodAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commercePaymentMethodAriStaticOpts);
    return new _CommercePaymentMethodAri(opts);
  }
  getVariables() {
    return {
      txaId: this.txaId,
      paymentMethodId: this.paymentMethodId
    };
  }
};

// src/commerce/pricing-plan/types.ts
var CommercePricingPlanAriResourceOwner = "commerce", CommercePricingPlanAriResourceType = "pricing-plan";

// src/commerce/pricing-plan/manifest.ts
var commercePricingPlanAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommercePricingPlanAriResourceOwner,
  resourceType: CommercePricingPlanAriResourceType,
  resourceIdSlug: "{pricingPlanId}",
  resourceIdSegmentFormats: {
    pricingPlanId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/pricing-plan/index.ts
var CommercePricingPlanAri = class _CommercePricingPlanAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._pricingPlanId = opts.resourceIdSegmentValues.pricingPlanId;
  }
  get pricingPlanId() {
    return this._pricingPlanId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commercePricingPlanAriStaticOpts.qualifier,
      platformQualifier: commercePricingPlanAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commercePricingPlanAriStaticOpts.resourceOwner,
      resourceType: commercePricingPlanAriStaticOpts.resourceType,
      resourceId: `${opts.pricingPlanId}`,
      resourceIdSegmentValues: {
        pricingPlanId: opts.pricingPlanId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commercePricingPlanAriStaticOpts);
    return new _CommercePricingPlanAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commercePricingPlanAriStaticOpts);
    return new _CommercePricingPlanAri(opts);
  }
  getVariables() {
    return {
      pricingPlanId: this.pricingPlanId
    };
  }
};

// src/commerce/product/types.ts
var CommerceProductAriResourceOwner = "commerce", CommerceProductAriResourceType = "product";

// src/commerce/product/manifest.ts
var commerceProductAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceProductAriResourceOwner,
  resourceType: CommerceProductAriResourceType,
  resourceIdSlug: "{productId}",
  resourceIdSegmentFormats: {
    productId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/product/index.ts
var CommerceProductAri = class _CommerceProductAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._productId = opts.resourceIdSegmentValues.productId;
  }
  get productId() {
    return this._productId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceProductAriStaticOpts.qualifier,
      platformQualifier: commerceProductAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceProductAriStaticOpts.resourceOwner,
      resourceType: commerceProductAriStaticOpts.resourceType,
      resourceId: `${opts.productId}`,
      resourceIdSegmentValues: {
        productId: opts.productId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceProductAriStaticOpts);
    return new _CommerceProductAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceProductAriStaticOpts);
    return new _CommerceProductAri(opts);
  }
  getVariables() {
    return {
      productId: this.productId
    };
  }
};

// src/commerce/promotion/types.ts
var CommercePromotionAriResourceOwner = "commerce", CommercePromotionAriResourceType = "promotion";

// src/commerce/promotion/manifest.ts
var commercePromotionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommercePromotionAriResourceOwner,
  resourceType: CommercePromotionAriResourceType,
  resourceIdSlug: "{promotionId}",
  resourceIdSegmentFormats: {
    promotionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/promotion/index.ts
var CommercePromotionAri = class _CommercePromotionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._promotionId = opts.resourceIdSegmentValues.promotionId;
  }
  get promotionId() {
    return this._promotionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commercePromotionAriStaticOpts.qualifier,
      platformQualifier: commercePromotionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commercePromotionAriStaticOpts.resourceOwner,
      resourceType: commercePromotionAriStaticOpts.resourceType,
      resourceId: `${opts.promotionId}`,
      resourceIdSegmentValues: {
        promotionId: opts.promotionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commercePromotionAriStaticOpts);
    return new _CommercePromotionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commercePromotionAriStaticOpts);
    return new _CommercePromotionAri(opts);
  }
  getVariables() {
    return {
      promotionId: this.promotionId
    };
  }
};

// src/commerce/quote/types.ts
var CommerceQuoteAriResourceOwner = "commerce", CommerceQuoteAriResourceType = "quote";

// src/commerce/quote/manifest.ts
var commerceQuoteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CommerceQuoteAriResourceOwner,
  resourceType: CommerceQuoteAriResourceType,
  resourceIdSlug: "{quoteId}",
  resourceIdSegmentFormats: {
    quoteId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/quote/index.ts
var CommerceQuoteAri = class _CommerceQuoteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._txaId = opts.cloudId || "", this._quoteId = opts.resourceIdSegmentValues.quoteId;
  }
  get txaId() {
    return this._txaId;
  }
  get quoteId() {
    return this._quoteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceQuoteAriStaticOpts.qualifier,
      platformQualifier: commerceQuoteAriStaticOpts.platformQualifier,
      cloudId: opts.txaId,
      resourceOwner: commerceQuoteAriStaticOpts.resourceOwner,
      resourceType: commerceQuoteAriStaticOpts.resourceType,
      resourceId: `${opts.quoteId}`,
      resourceIdSegmentValues: {
        quoteId: opts.quoteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceQuoteAriStaticOpts);
    return new _CommerceQuoteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceQuoteAriStaticOpts);
    return new _CommerceQuoteAri(opts);
  }
  getVariables() {
    return {
      txaId: this.txaId,
      quoteId: this.quoteId
    };
  }
};

// src/commerce/role/types.ts
var CommerceRoleAriResourceOwner = "commerce", CommerceRoleAriResourceType = "role";

// src/commerce/role/manifest.ts
var commerceRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceRoleAriResourceOwner,
  resourceType: CommerceRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/role/index.ts
var CommerceRoleAri = class _CommerceRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceRoleAriStaticOpts.qualifier,
      platformQualifier: commerceRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceRoleAriStaticOpts.resourceOwner,
      resourceType: commerceRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceRoleAriStaticOpts);
    return new _CommerceRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceRoleAriStaticOpts);
    return new _CommerceRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/commerce/ship-to-party/types.ts
var CommerceShipToPartyAriResourceOwner = "commerce", CommerceShipToPartyAriResourceType = "ship-to-party";

// src/commerce/ship-to-party/manifest.ts
var commerceShipToPartyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CommerceShipToPartyAriResourceOwner,
  resourceType: CommerceShipToPartyAriResourceType,
  resourceIdSlug: "{shipToPartyId}",
  resourceIdSegmentFormats: {
    shipToPartyId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/ship-to-party/index.ts
var CommerceShipToPartyAri = class _CommerceShipToPartyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._txaId = opts.cloudId || "", this._shipToPartyId = opts.resourceIdSegmentValues.shipToPartyId;
  }
  get txaId() {
    return this._txaId;
  }
  get shipToPartyId() {
    return this._shipToPartyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceShipToPartyAriStaticOpts.qualifier,
      platformQualifier: commerceShipToPartyAriStaticOpts.platformQualifier,
      cloudId: opts.txaId,
      resourceOwner: commerceShipToPartyAriStaticOpts.resourceOwner,
      resourceType: commerceShipToPartyAriStaticOpts.resourceType,
      resourceId: `${opts.shipToPartyId}`,
      resourceIdSegmentValues: {
        shipToPartyId: opts.shipToPartyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceShipToPartyAriStaticOpts);
    return new _CommerceShipToPartyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceShipToPartyAriStaticOpts);
    return new _CommerceShipToPartyAri(opts);
  }
  getVariables() {
    return {
      txaId: this.txaId,
      shipToPartyId: this.shipToPartyId
    };
  }
};

// src/commerce/transaction-account/types.ts
var CommerceTransactionAccountAriResourceOwner = "commerce", CommerceTransactionAccountAriResourceType = "transaction-account";

// src/commerce/transaction-account/manifest.ts
var commerceTransactionAccountAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceTransactionAccountAriResourceOwner,
  resourceType: CommerceTransactionAccountAriResourceType,
  resourceIdSlug: "{txaId}",
  resourceIdSegmentFormats: {
    txaId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/transaction-account/index.ts
var CommerceTransactionAccountAri = class _CommerceTransactionAccountAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._txaId = opts.resourceIdSegmentValues.txaId;
  }
  get txaId() {
    return this._txaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceTransactionAccountAriStaticOpts.qualifier,
      platformQualifier: commerceTransactionAccountAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceTransactionAccountAriStaticOpts.resourceOwner,
      resourceType: commerceTransactionAccountAriStaticOpts.resourceType,
      resourceId: `${opts.txaId}`,
      resourceIdSegmentValues: {
        txaId: opts.txaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceTransactionAccountAriStaticOpts);
    return new _CommerceTransactionAccountAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceTransactionAccountAriStaticOpts);
    return new _CommerceTransactionAccountAri(opts);
  }
  getVariables() {
    return {
      txaId: this.txaId
    };
  }
};

// src/commerce/workbench-resource/types.ts
var CommerceWorkbenchResourceAriResourceOwner = "commerce", CommerceWorkbenchResourceAriResourceType = "workbench-resource";

// src/commerce/workbench-resource/manifest.ts
var commerceWorkbenchResourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CommerceWorkbenchResourceAriResourceOwner,
  resourceType: CommerceWorkbenchResourceAriResourceType,
  resourceIdSlug: "{resourceName}",
  resourceIdSegmentFormats: {
    resourceName: /(database)/
    // eslint-disable-line no-useless-escape
  }
};

// src/commerce/workbench-resource/index.ts
var CommerceWorkbenchResourceAri = class _CommerceWorkbenchResourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._resourceName = opts.resourceIdSegmentValues.resourceName;
  }
  get resourceName() {
    return this._resourceName;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: commerceWorkbenchResourceAriStaticOpts.qualifier,
      platformQualifier: commerceWorkbenchResourceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: commerceWorkbenchResourceAriStaticOpts.resourceOwner,
      resourceType: commerceWorkbenchResourceAriStaticOpts.resourceType,
      resourceId: `${opts.resourceName}`,
      resourceIdSegmentValues: {
        resourceName: opts.resourceName
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, commerceWorkbenchResourceAriStaticOpts);
    return new _CommerceWorkbenchResourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, commerceWorkbenchResourceAriStaticOpts);
    return new _CommerceWorkbenchResourceAri(opts);
  }
  getVariables() {
    return {
      resourceName: this.resourceName
    };
  }
};

// src/compass/assistant-answer/types.ts
var CompassAssistantAnswerAriResourceOwner = "compass", CompassAssistantAnswerAriResourceType = "assistant-answer";

// src/compass/assistant-answer/manifest.ts
var compassAssistantAnswerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassAssistantAnswerAriResourceOwner,
  resourceType: CompassAssistantAnswerAriResourceType,
  resourceIdSlug: "{workspaceId}/{answerId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    answerId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/assistant-answer/index.ts
var CompassAssistantAnswerAri = class _CompassAssistantAnswerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._answerId = opts.resourceIdSegmentValues.answerId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get answerId() {
    return this._answerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassAssistantAnswerAriStaticOpts.qualifier,
      platformQualifier: compassAssistantAnswerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassAssistantAnswerAriStaticOpts.resourceOwner,
      resourceType: compassAssistantAnswerAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.answerId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        answerId: opts.answerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassAssistantAnswerAriStaticOpts);
    return new _CompassAssistantAnswerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassAssistantAnswerAriStaticOpts);
    return new _CompassAssistantAnswerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      answerId: this.answerId
    };
  }
};

// src/compass/component/types.ts
var CompassComponentAriResourceOwner = "compass", CompassComponentAriResourceType = "component";

// src/compass/component/manifest.ts
var compassComponentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassComponentAriResourceOwner,
  resourceType: CompassComponentAriResourceType,
  resourceIdSlug: "{workspaceId}/{componentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    componentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/component/index.ts
var CompassComponentAri = class _CompassComponentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._componentId = opts.resourceIdSegmentValues.componentId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get componentId() {
    return this._componentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassComponentAriStaticOpts.qualifier,
      platformQualifier: compassComponentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassComponentAriStaticOpts.resourceOwner,
      resourceType: compassComponentAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.componentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        componentId: opts.componentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassComponentAriStaticOpts);
    return new _CompassComponentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassComponentAriStaticOpts);
    return new _CompassComponentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      componentId: this.componentId
    };
  }
};

// src/compass/component-label/types.ts
var CompassComponentLabelAriResourceOwner = "compass", CompassComponentLabelAriResourceType = "component-label";

// src/compass/component-label/manifest.ts
var compassComponentLabelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassComponentLabelAriResourceOwner,
  resourceType: CompassComponentLabelAriResourceType,
  resourceIdSlug: "{workspaceId}/{labelId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    labelId: /[0-9a-f\-]{36,64}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/component-label/index.ts
var CompassComponentLabelAri = class _CompassComponentLabelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._labelId = opts.resourceIdSegmentValues.labelId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get labelId() {
    return this._labelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassComponentLabelAriStaticOpts.qualifier,
      platformQualifier: compassComponentLabelAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassComponentLabelAriStaticOpts.resourceOwner,
      resourceType: compassComponentLabelAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.labelId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        labelId: opts.labelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassComponentLabelAriStaticOpts);
    return new _CompassComponentLabelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassComponentLabelAriStaticOpts);
    return new _CompassComponentLabelAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      labelId: this.labelId
    };
  }
};

// src/compass/component-link/types.ts
var CompassComponentLinkAriResourceOwner = "compass", CompassComponentLinkAriResourceType = "component-link";

// src/compass/component-link/manifest.ts
var compassComponentLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassComponentLinkAriResourceOwner,
  resourceType: CompassComponentLinkAriResourceType,
  resourceIdSlug: "{workspaceId}/{componentId}/{componentLinkId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    componentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    componentLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/component-link/index.ts
var CompassComponentLinkAri = class _CompassComponentLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._componentId = opts.resourceIdSegmentValues.componentId, this._componentLinkId = opts.resourceIdSegmentValues.componentLinkId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get componentId() {
    return this._componentId;
  }
  get componentLinkId() {
    return this._componentLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassComponentLinkAriStaticOpts.qualifier,
      platformQualifier: compassComponentLinkAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassComponentLinkAriStaticOpts.resourceOwner,
      resourceType: compassComponentLinkAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.componentId}/${opts.componentLinkId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        componentId: opts.componentId,
        componentLinkId: opts.componentLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassComponentLinkAriStaticOpts);
    return new _CompassComponentLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassComponentLinkAriStaticOpts);
    return new _CompassComponentLinkAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      componentId: this.componentId,
      componentLinkId: this.componentLinkId
    };
  }
};

// src/compass/custom-field-definition/types.ts
var CompassCustomFieldDefinitionAriResourceOwner = "compass", CompassCustomFieldDefinitionAriResourceType = "custom-field-definition";

// src/compass/custom-field-definition/manifest.ts
var compassCustomFieldDefinitionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassCustomFieldDefinitionAriResourceOwner,
  resourceType: CompassCustomFieldDefinitionAriResourceType,
  resourceIdSlug: "{workspaceId}/{definitionId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    definitionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/custom-field-definition/index.ts
var CompassCustomFieldDefinitionAri = class _CompassCustomFieldDefinitionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._definitionId = opts.resourceIdSegmentValues.definitionId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get definitionId() {
    return this._definitionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassCustomFieldDefinitionAriStaticOpts.qualifier,
      platformQualifier: compassCustomFieldDefinitionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassCustomFieldDefinitionAriStaticOpts.resourceOwner,
      resourceType: compassCustomFieldDefinitionAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.definitionId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        definitionId: opts.definitionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassCustomFieldDefinitionAriStaticOpts);
    return new _CompassCustomFieldDefinitionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassCustomFieldDefinitionAriStaticOpts);
    return new _CompassCustomFieldDefinitionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      definitionId: this.definitionId
    };
  }
};

// src/compass/document/types.ts
var CompassDocumentAriResourceOwner = "compass", CompassDocumentAriResourceType = "document";

// src/compass/document/manifest.ts
var compassDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassDocumentAriResourceOwner,
  resourceType: CompassDocumentAriResourceType,
  resourceIdSlug: "{workspaceId}/{documentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    documentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/document/index.ts
var CompassDocumentAri = class _CompassDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._documentId = opts.resourceIdSegmentValues.documentId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get documentId() {
    return this._documentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassDocumentAriStaticOpts.qualifier,
      platformQualifier: compassDocumentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassDocumentAriStaticOpts.resourceOwner,
      resourceType: compassDocumentAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.documentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        documentId: opts.documentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassDocumentAriStaticOpts);
    return new _CompassDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassDocumentAriStaticOpts);
    return new _CompassDocumentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      documentId: this.documentId
    };
  }
};

// src/compass/documentation-category/types.ts
var CompassDocumentationCategoryAriResourceOwner = "compass", CompassDocumentationCategoryAriResourceType = "documentation-category";

// src/compass/documentation-category/manifest.ts
var compassDocumentationCategoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassDocumentationCategoryAriResourceOwner,
  resourceType: CompassDocumentationCategoryAriResourceType,
  resourceIdSlug: "{workspaceId}/{documentationCategoryId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    documentationCategoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/documentation-category/index.ts
var CompassDocumentationCategoryAri = class _CompassDocumentationCategoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._documentationCategoryId = opts.resourceIdSegmentValues.documentationCategoryId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get documentationCategoryId() {
    return this._documentationCategoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassDocumentationCategoryAriStaticOpts.qualifier,
      platformQualifier: compassDocumentationCategoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassDocumentationCategoryAriStaticOpts.resourceOwner,
      resourceType: compassDocumentationCategoryAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.documentationCategoryId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        documentationCategoryId: opts.documentationCategoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassDocumentationCategoryAriStaticOpts);
    return new _CompassDocumentationCategoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassDocumentationCategoryAriStaticOpts);
    return new _CompassDocumentationCategoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      documentationCategoryId: this.documentationCategoryId
    };
  }
};

// src/compass/event-source/types.ts
var CompassEventSourceAriResourceOwner = "compass", CompassEventSourceAriResourceType = "event-source";

// src/compass/event-source/manifest.ts
var compassEventSourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassEventSourceAriResourceOwner,
  resourceType: CompassEventSourceAriResourceType,
  resourceIdSlug: "{workspaceId}/{eventSourceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    eventSourceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/event-source/index.ts
var CompassEventSourceAri = class _CompassEventSourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._eventSourceId = opts.resourceIdSegmentValues.eventSourceId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get eventSourceId() {
    return this._eventSourceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassEventSourceAriStaticOpts.qualifier,
      platformQualifier: compassEventSourceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassEventSourceAriStaticOpts.resourceOwner,
      resourceType: compassEventSourceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.eventSourceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        eventSourceId: opts.eventSourceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassEventSourceAriStaticOpts);
    return new _CompassEventSourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassEventSourceAriStaticOpts);
    return new _CompassEventSourceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      eventSourceId: this.eventSourceId
    };
  }
};

// src/compass/incoming-webhook/types.ts
var CompassIncomingWebhookAriResourceOwner = "compass", CompassIncomingWebhookAriResourceType = "incoming-webhook";

// src/compass/incoming-webhook/manifest.ts
var compassIncomingWebhookAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassIncomingWebhookAriResourceOwner,
  resourceType: CompassIncomingWebhookAriResourceType,
  resourceIdSlug: "{workspaceId}/{incomingWebhookId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    incomingWebhookId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/incoming-webhook/index.ts
var CompassIncomingWebhookAri = class _CompassIncomingWebhookAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._incomingWebhookId = opts.resourceIdSegmentValues.incomingWebhookId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get incomingWebhookId() {
    return this._incomingWebhookId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassIncomingWebhookAriStaticOpts.qualifier,
      platformQualifier: compassIncomingWebhookAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassIncomingWebhookAriStaticOpts.resourceOwner,
      resourceType: compassIncomingWebhookAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.incomingWebhookId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        incomingWebhookId: opts.incomingWebhookId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassIncomingWebhookAriStaticOpts);
    return new _CompassIncomingWebhookAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassIncomingWebhookAriStaticOpts);
    return new _CompassIncomingWebhookAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      incomingWebhookId: this.incomingWebhookId
    };
  }
};

// src/compass/metric-definition/types.ts
var CompassMetricDefinitionAriResourceOwner = "compass", CompassMetricDefinitionAriResourceType = "metric-definition";

// src/compass/metric-definition/manifest.ts
var compassMetricDefinitionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]*$"),
  resourceOwner: CompassMetricDefinitionAriResourceOwner,
  resourceType: CompassMetricDefinitionAriResourceType,
  resourceIdSlug: "{containerId}/{definitionId}",
  resourceIdSegmentFormats: {
    containerId: /(?:builtin|forge|[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12})/,
    // eslint-disable-line no-useless-escape
    definitionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/metric-definition/index.ts
var CompassMetricDefinitionAri = class _CompassMetricDefinitionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._optionalSiteId = opts.cloudId || "", this._containerId = opts.resourceIdSegmentValues.containerId, this._definitionId = opts.resourceIdSegmentValues.definitionId;
  }
  get optionalSiteId() {
    return this._optionalSiteId;
  }
  get containerId() {
    return this._containerId;
  }
  get definitionId() {
    return this._definitionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassMetricDefinitionAriStaticOpts.qualifier,
      platformQualifier: compassMetricDefinitionAriStaticOpts.platformQualifier,
      cloudId: opts.optionalSiteId,
      resourceOwner: compassMetricDefinitionAriStaticOpts.resourceOwner,
      resourceType: compassMetricDefinitionAriStaticOpts.resourceType,
      resourceId: `${opts.containerId}/${opts.definitionId}`,
      resourceIdSegmentValues: {
        containerId: opts.containerId,
        definitionId: opts.definitionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassMetricDefinitionAriStaticOpts);
    return new _CompassMetricDefinitionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassMetricDefinitionAriStaticOpts);
    return new _CompassMetricDefinitionAri(opts);
  }
  getVariables() {
    return {
      optionalSiteId: this.optionalSiteId,
      containerId: this.containerId,
      definitionId: this.definitionId
    };
  }
};

// src/compass/metric-source/types.ts
var CompassMetricSourceAriResourceOwner = "compass", CompassMetricSourceAriResourceType = "metric-source";

// src/compass/metric-source/manifest.ts
var compassMetricSourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassMetricSourceAriResourceOwner,
  resourceType: CompassMetricSourceAriResourceType,
  resourceIdSlug: "{workspaceId}/{metricSourceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    metricSourceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/metric-source/index.ts
var CompassMetricSourceAri = class _CompassMetricSourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._metricSourceId = opts.resourceIdSegmentValues.metricSourceId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get metricSourceId() {
    return this._metricSourceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassMetricSourceAriStaticOpts.qualifier,
      platformQualifier: compassMetricSourceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassMetricSourceAriStaticOpts.resourceOwner,
      resourceType: compassMetricSourceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.metricSourceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        metricSourceId: opts.metricSourceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassMetricSourceAriStaticOpts);
    return new _CompassMetricSourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassMetricSourceAriStaticOpts);
    return new _CompassMetricSourceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      metricSourceId: this.metricSourceId
    };
  }
};

// src/compass/role/types.ts
var CompassRoleAriResourceOwner = "compass", CompassRoleAriResourceType = "role";

// src/compass/role/manifest.ts
var compassRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CompassRoleAriResourceOwner,
  resourceType: CompassRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:basic|member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/role/index.ts
var CompassRoleAri = class _CompassRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassRoleAriStaticOpts.qualifier,
      platformQualifier: compassRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: compassRoleAriStaticOpts.resourceOwner,
      resourceType: compassRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassRoleAriStaticOpts);
    return new _CompassRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassRoleAriStaticOpts);
    return new _CompassRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/compass/scorecard/types.ts
var CompassScorecardAriResourceOwner = "compass", CompassScorecardAriResourceType = "scorecard";

// src/compass/scorecard/manifest.ts
var compassScorecardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassScorecardAriResourceOwner,
  resourceType: CompassScorecardAriResourceType,
  resourceIdSlug: "{workspaceId}/{scorecardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    scorecardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/scorecard/index.ts
var CompassScorecardAri = class _CompassScorecardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._scorecardId = opts.resourceIdSegmentValues.scorecardId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get scorecardId() {
    return this._scorecardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassScorecardAriStaticOpts.qualifier,
      platformQualifier: compassScorecardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassScorecardAriStaticOpts.resourceOwner,
      resourceType: compassScorecardAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.scorecardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        scorecardId: opts.scorecardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassScorecardAriStaticOpts);
    return new _CompassScorecardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassScorecardAriStaticOpts);
    return new _CompassScorecardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      scorecardId: this.scorecardId
    };
  }
};

// src/compass/site/types.ts
var CompassSiteAriResourceOwner = "compass", CompassSiteAriResourceType = "site";

// src/compass/site/manifest.ts
var compassSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: CompassSiteAriResourceOwner,
  resourceType: CompassSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/site/index.ts
var CompassSiteAri = class _CompassSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassSiteAriStaticOpts.qualifier,
      platformQualifier: compassSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: compassSiteAriStaticOpts.resourceOwner,
      resourceType: compassSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassSiteAriStaticOpts);
    return new _CompassSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassSiteAriStaticOpts);
    return new _CompassSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/compass/user-defined-parameter/types.ts
var CompassUserDefinedParameterAriResourceOwner = "compass", CompassUserDefinedParameterAriResourceType = "user-defined-parameter";

// src/compass/user-defined-parameter/manifest.ts
var compassUserDefinedParameterAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassUserDefinedParameterAriResourceOwner,
  resourceType: CompassUserDefinedParameterAriResourceType,
  resourceIdSlug: "{workspaceId}/{userDefinedParameterId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    userDefinedParameterId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/user-defined-parameter/index.ts
var CompassUserDefinedParameterAri = class _CompassUserDefinedParameterAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._userDefinedParameterId = opts.resourceIdSegmentValues.userDefinedParameterId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get userDefinedParameterId() {
    return this._userDefinedParameterId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassUserDefinedParameterAriStaticOpts.qualifier,
      platformQualifier: compassUserDefinedParameterAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassUserDefinedParameterAriStaticOpts.resourceOwner,
      resourceType: compassUserDefinedParameterAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.userDefinedParameterId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        userDefinedParameterId: opts.userDefinedParameterId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassUserDefinedParameterAriStaticOpts);
    return new _CompassUserDefinedParameterAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassUserDefinedParameterAriStaticOpts);
    return new _CompassUserDefinedParameterAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      userDefinedParameterId: this.userDefinedParameterId
    };
  }
};

// src/compass/webhook/types.ts
var CompassWebhookAriResourceOwner = "compass", CompassWebhookAriResourceType = "webhook";

// src/compass/webhook/manifest.ts
var compassWebhookAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassWebhookAriResourceOwner,
  resourceType: CompassWebhookAriResourceType,
  resourceIdSlug: "{workspaceId}/{webhookId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    webhookId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/webhook/index.ts
var CompassWebhookAri = class _CompassWebhookAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._webhookId = opts.resourceIdSegmentValues.webhookId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get webhookId() {
    return this._webhookId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassWebhookAriStaticOpts.qualifier,
      platformQualifier: compassWebhookAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassWebhookAriStaticOpts.resourceOwner,
      resourceType: compassWebhookAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.webhookId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        webhookId: opts.webhookId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassWebhookAriStaticOpts);
    return new _CompassWebhookAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassWebhookAriStaticOpts);
    return new _CompassWebhookAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      webhookId: this.webhookId
    };
  }
};

// src/compass/workspace/types.ts
var CompassWorkspaceAriResourceOwner = "compass", CompassWorkspaceAriResourceType = "workspace";

// src/compass/workspace/manifest.ts
var compassWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: CompassWorkspaceAriResourceOwner,
  resourceType: CompassWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/compass/workspace/index.ts
var CompassWorkspaceAri = class _CompassWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: compassWorkspaceAriStaticOpts.qualifier,
      platformQualifier: compassWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: compassWorkspaceAriStaticOpts.resourceOwner,
      resourceType: compassWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, compassWorkspaceAriStaticOpts);
    return new _CompassWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, compassWorkspaceAriStaticOpts);
    return new _CompassWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId
    };
  }
};

// src/confluence/admin-announcement-banner/types.ts
var ConfluenceAdminAnnouncementBannerAriResourceOwner = "confluence", ConfluenceAdminAnnouncementBannerAriResourceType = "admin-announcement-banner";

// src/confluence/admin-announcement-banner/manifest.ts
var confluenceAdminAnnouncementBannerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceAdminAnnouncementBannerAriResourceOwner,
  resourceType: ConfluenceAdminAnnouncementBannerAriResourceType,
  resourceIdSlug: "activation/{activationId}/{bannerId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    bannerId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/admin-announcement-banner/index.ts
var ConfluenceAdminAnnouncementBannerAri = class _ConfluenceAdminAnnouncementBannerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._bannerId = opts.resourceIdSegmentValues.bannerId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get bannerId() {
    return this._bannerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceAdminAnnouncementBannerAriStaticOpts.qualifier,
      platformQualifier: confluenceAdminAnnouncementBannerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceAdminAnnouncementBannerAriStaticOpts.resourceOwner,
      resourceType: confluenceAdminAnnouncementBannerAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.bannerId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        bannerId: opts.bannerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceAdminAnnouncementBannerAriStaticOpts);
    return new _ConfluenceAdminAnnouncementBannerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceAdminAnnouncementBannerAriStaticOpts);
    return new _ConfluenceAdminAnnouncementBannerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      bannerId: this.bannerId
    };
  }
};

// src/confluence/attachment/types.ts
var ConfluenceAttachmentAriResourceOwner = "confluence", ConfluenceAttachmentAriResourceType = "attachment";

// src/confluence/attachment/manifest.ts
var confluenceAttachmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceAttachmentAriResourceOwner,
  resourceType: ConfluenceAttachmentAriResourceType,
  resourceIdSlug: "{attachmentId}",
  resourceIdSegmentFormats: {
    attachmentId: /(att)?[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/attachment/index.ts
var ConfluenceAttachmentAri = class _ConfluenceAttachmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._attachmentId = opts.resourceIdSegmentValues.attachmentId;
  }
  get siteId() {
    return this._siteId;
  }
  get attachmentId() {
    return this._attachmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceAttachmentAriStaticOpts.qualifier,
      platformQualifier: confluenceAttachmentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceAttachmentAriStaticOpts.resourceOwner,
      resourceType: confluenceAttachmentAriStaticOpts.resourceType,
      resourceId: `${opts.attachmentId}`,
      resourceIdSegmentValues: {
        attachmentId: opts.attachmentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceAttachmentAriStaticOpts);
    return new _ConfluenceAttachmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceAttachmentAriStaticOpts);
    return new _ConfluenceAttachmentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      attachmentId: this.attachmentId
    };
  }
};

// src/confluence/blogpost/types.ts
var ConfluenceBlogpostAriResourceOwner = "confluence", ConfluenceBlogpostAriResourceType = "blogpost";

// src/confluence/blogpost/manifest.ts
var confluenceBlogpostAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceBlogpostAriResourceOwner,
  resourceType: ConfluenceBlogpostAriResourceType,
  resourceIdSlug: "{blogpostId}",
  resourceIdSegmentFormats: {
    blogpostId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/blogpost/index.ts
var ConfluenceBlogpostAri = class _ConfluenceBlogpostAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._blogpostId = opts.resourceIdSegmentValues.blogpostId;
  }
  get siteId() {
    return this._siteId;
  }
  get blogpostId() {
    return this._blogpostId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceBlogpostAriStaticOpts.qualifier,
      platformQualifier: confluenceBlogpostAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceBlogpostAriStaticOpts.resourceOwner,
      resourceType: confluenceBlogpostAriStaticOpts.resourceType,
      resourceId: `${opts.blogpostId}`,
      resourceIdSegmentValues: {
        blogpostId: opts.blogpostId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceBlogpostAriStaticOpts);
    return new _ConfluenceBlogpostAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceBlogpostAriStaticOpts);
    return new _ConfluenceBlogpostAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      blogpostId: this.blogpostId
    };
  }
};

// src/confluence/comment/types.ts
var ConfluenceCommentAriResourceOwner = "confluence", ConfluenceCommentAriResourceType = "comment";

// src/confluence/comment/manifest.ts
var confluenceCommentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceCommentAriResourceOwner,
  resourceType: ConfluenceCommentAriResourceType,
  resourceIdSlug: "{commentId}",
  resourceIdSegmentFormats: {
    commentId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/comment/index.ts
var ConfluenceCommentAri = class _ConfluenceCommentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._commentId = opts.resourceIdSegmentValues.commentId;
  }
  get siteId() {
    return this._siteId;
  }
  get commentId() {
    return this._commentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceCommentAriStaticOpts.qualifier,
      platformQualifier: confluenceCommentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceCommentAriStaticOpts.resourceOwner,
      resourceType: confluenceCommentAriStaticOpts.resourceType,
      resourceId: `${opts.commentId}`,
      resourceIdSegmentValues: {
        commentId: opts.commentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceCommentAriStaticOpts);
    return new _ConfluenceCommentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceCommentAriStaticOpts);
    return new _ConfluenceCommentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      commentId: this.commentId
    };
  }
};

// src/confluence/content/types.ts
var ConfluenceContentAriResourceOwner = "confluence", ConfluenceContentAriResourceType = "content";

// src/confluence/content/manifest.ts
var confluenceContentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceContentAriResourceOwner,
  resourceType: ConfluenceContentAriResourceType,
  resourceIdSlug: "{contentId}",
  resourceIdSegmentFormats: {
    contentId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/content/index.ts
var ConfluenceContentAri = class _ConfluenceContentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._contentId = opts.resourceIdSegmentValues.contentId;
  }
  get siteId() {
    return this._siteId;
  }
  get contentId() {
    return this._contentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceContentAriStaticOpts.qualifier,
      platformQualifier: confluenceContentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceContentAriStaticOpts.resourceOwner,
      resourceType: confluenceContentAriStaticOpts.resourceType,
      resourceId: `${opts.contentId}`,
      resourceIdSegmentValues: {
        contentId: opts.contentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceContentAriStaticOpts);
    return new _ConfluenceContentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceContentAriStaticOpts);
    return new _ConfluenceContentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      contentId: this.contentId
    };
  }
};

// src/confluence/database/types.ts
var ConfluenceDatabaseAriResourceOwner = "confluence", ConfluenceDatabaseAriResourceType = "database";

// src/confluence/database/manifest.ts
var confluenceDatabaseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceDatabaseAriResourceOwner,
  resourceType: ConfluenceDatabaseAriResourceType,
  resourceIdSlug: "activation/{activationId}/{databaseId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    databaseId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/database/index.ts
var ConfluenceDatabaseAri = class _ConfluenceDatabaseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._databaseId = opts.resourceIdSegmentValues.databaseId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get databaseId() {
    return this._databaseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceDatabaseAriStaticOpts.qualifier,
      platformQualifier: confluenceDatabaseAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceDatabaseAriStaticOpts.resourceOwner,
      resourceType: confluenceDatabaseAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.databaseId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        databaseId: opts.databaseId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceDatabaseAriStaticOpts);
    return new _ConfluenceDatabaseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceDatabaseAriStaticOpts);
    return new _ConfluenceDatabaseAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      databaseId: this.databaseId
    };
  }
};

// src/confluence/embed/types.ts
var ConfluenceEmbedAriResourceOwner = "confluence", ConfluenceEmbedAriResourceType = "embed";

// src/confluence/embed/manifest.ts
var confluenceEmbedAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceEmbedAriResourceOwner,
  resourceType: ConfluenceEmbedAriResourceType,
  resourceIdSlug: "activation/{activationId}/{embedId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    embedId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/embed/index.ts
var ConfluenceEmbedAri = class _ConfluenceEmbedAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._embedId = opts.resourceIdSegmentValues.embedId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get embedId() {
    return this._embedId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceEmbedAriStaticOpts.qualifier,
      platformQualifier: confluenceEmbedAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceEmbedAriStaticOpts.resourceOwner,
      resourceType: confluenceEmbedAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.embedId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        embedId: opts.embedId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceEmbedAriStaticOpts);
    return new _ConfluenceEmbedAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceEmbedAriStaticOpts);
    return new _ConfluenceEmbedAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      embedId: this.embedId
    };
  }
};

// src/confluence/event/types.ts
var ConfluenceEventAriResourceOwner = "confluence", ConfluenceEventAriResourceType = "event";

// src/confluence/event/manifest.ts
var confluenceEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceEventAriResourceOwner,
  resourceType: ConfluenceEventAriResourceType,
  resourceIdSlug: "{eventType}/activation/{activationId}/event/{eventId}",
  resourceIdSegmentFormats: {
    eventType: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    eventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/event/index.ts
var ConfluenceEventAri = class _ConfluenceEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._eventType = opts.resourceIdSegmentValues.eventType, this._activationId = opts.resourceIdSegmentValues.activationId, this._eventId = opts.resourceIdSegmentValues.eventId;
  }
  get siteId() {
    return this._siteId;
  }
  get eventType() {
    return this._eventType;
  }
  get activationId() {
    return this._activationId;
  }
  get eventId() {
    return this._eventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceEventAriStaticOpts.qualifier,
      platformQualifier: confluenceEventAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceEventAriStaticOpts.resourceOwner,
      resourceType: confluenceEventAriStaticOpts.resourceType,
      resourceId: `${opts.eventType}/activation/${opts.activationId}/event/${opts.eventId}`,
      resourceIdSegmentValues: {
        eventType: opts.eventType,
        activationId: opts.activationId,
        eventId: opts.eventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceEventAriStaticOpts);
    return new _ConfluenceEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceEventAriStaticOpts);
    return new _ConfluenceEventAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      eventType: this.eventType,
      activationId: this.activationId,
      eventId: this.eventId
    };
  }
};

// src/confluence/folder/types.ts
var ConfluenceFolderAriResourceOwner = "confluence", ConfluenceFolderAriResourceType = "folder";

// src/confluence/folder/manifest.ts
var confluenceFolderAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceFolderAriResourceOwner,
  resourceType: ConfluenceFolderAriResourceType,
  resourceIdSlug: "activation/{activationId}/{folderId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    folderId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/folder/index.ts
var ConfluenceFolderAri = class _ConfluenceFolderAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._folderId = opts.resourceIdSegmentValues.folderId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get folderId() {
    return this._folderId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceFolderAriStaticOpts.qualifier,
      platformQualifier: confluenceFolderAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceFolderAriStaticOpts.resourceOwner,
      resourceType: confluenceFolderAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.folderId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        folderId: opts.folderId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceFolderAriStaticOpts);
    return new _ConfluenceFolderAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceFolderAriStaticOpts);
    return new _ConfluenceFolderAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      folderId: this.folderId
    };
  }
};

// src/confluence/long-running-task/types.ts
var ConfluenceLongRunningTaskAriResourceOwner = "confluence", ConfluenceLongRunningTaskAriResourceType = "long-running-task";

// src/confluence/long-running-task/manifest.ts
var confluenceLongRunningTaskAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceLongRunningTaskAriResourceOwner,
  resourceType: ConfluenceLongRunningTaskAriResourceType,
  resourceIdSlug: "activation/{activationId}/{taskId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    taskId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/long-running-task/index.ts
var ConfluenceLongRunningTaskAri = class _ConfluenceLongRunningTaskAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._taskId = opts.resourceIdSegmentValues.taskId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get taskId() {
    return this._taskId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceLongRunningTaskAriStaticOpts.qualifier,
      platformQualifier: confluenceLongRunningTaskAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceLongRunningTaskAriStaticOpts.resourceOwner,
      resourceType: confluenceLongRunningTaskAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.taskId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        taskId: opts.taskId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceLongRunningTaskAriStaticOpts);
    return new _ConfluenceLongRunningTaskAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceLongRunningTaskAriStaticOpts);
    return new _ConfluenceLongRunningTaskAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      taskId: this.taskId
    };
  }
};

// src/confluence/note/types.ts
var ConfluenceNoteAriResourceOwner = "confluence", ConfluenceNoteAriResourceType = "note";

// src/confluence/note/manifest.ts
var confluenceNoteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceNoteAriResourceOwner,
  resourceType: ConfluenceNoteAriResourceType,
  resourceIdSlug: "activation/{activationId}/{noteId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    noteId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/note/index.ts
var ConfluenceNoteAri = class _ConfluenceNoteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._noteId = opts.resourceIdSegmentValues.noteId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get noteId() {
    return this._noteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceNoteAriStaticOpts.qualifier,
      platformQualifier: confluenceNoteAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceNoteAriStaticOpts.resourceOwner,
      resourceType: confluenceNoteAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.noteId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        noteId: opts.noteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceNoteAriStaticOpts);
    return new _ConfluenceNoteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceNoteAriStaticOpts);
    return new _ConfluenceNoteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      noteId: this.noteId
    };
  }
};

// src/confluence/page/types.ts
var ConfluencePageAriResourceOwner = "confluence", ConfluencePageAriResourceType = "page";

// src/confluence/page/manifest.ts
var confluencePageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluencePageAriResourceOwner,
  resourceType: ConfluencePageAriResourceType,
  resourceIdSlug: "{pageId}",
  resourceIdSegmentFormats: {
    pageId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/page/index.ts
var ConfluencePageAri = class _ConfluencePageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._pageId = opts.resourceIdSegmentValues.pageId;
  }
  get siteId() {
    return this._siteId;
  }
  get pageId() {
    return this._pageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluencePageAriStaticOpts.qualifier,
      platformQualifier: confluencePageAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluencePageAriStaticOpts.resourceOwner,
      resourceType: confluencePageAriStaticOpts.resourceType,
      resourceId: `${opts.pageId}`,
      resourceIdSegmentValues: {
        pageId: opts.pageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluencePageAriStaticOpts);
    return new _ConfluencePageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluencePageAriStaticOpts);
    return new _ConfluencePageAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      pageId: this.pageId
    };
  }
};

// src/confluence/public-link/types.ts
var ConfluencePublicLinkAriResourceOwner = "confluence", ConfluencePublicLinkAriResourceType = "public-link";

// src/confluence/public-link/manifest.ts
var confluencePublicLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluencePublicLinkAriResourceOwner,
  resourceType: ConfluencePublicLinkAriResourceType,
  resourceIdSlug: "activation/{activationId}/{publicLinkId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    publicLinkId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/public-link/index.ts
var ConfluencePublicLinkAri = class _ConfluencePublicLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._publicLinkId = opts.resourceIdSegmentValues.publicLinkId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get publicLinkId() {
    return this._publicLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluencePublicLinkAriStaticOpts.qualifier,
      platformQualifier: confluencePublicLinkAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluencePublicLinkAriStaticOpts.resourceOwner,
      resourceType: confluencePublicLinkAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.publicLinkId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        publicLinkId: opts.publicLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluencePublicLinkAriStaticOpts);
    return new _ConfluencePublicLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluencePublicLinkAriStaticOpts);
    return new _ConfluencePublicLinkAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      publicLinkId: this.publicLinkId
    };
  }
};

// src/confluence/role/types.ts
var ConfluenceRoleAriResourceOwner = "confluence", ConfluenceRoleAriResourceType = "role";

// src/confluence/role/manifest.ts
var confluenceRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]*$"),
  resourceOwner: ConfluenceRoleAriResourceOwner,
  resourceType: ConfluenceRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/role/index.ts
var ConfluenceRoleAri = class _ConfluenceRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._optionalSiteId = opts.cloudId || "", this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get optionalSiteId() {
    return this._optionalSiteId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceRoleAriStaticOpts.qualifier,
      platformQualifier: confluenceRoleAriStaticOpts.platformQualifier,
      cloudId: opts.optionalSiteId,
      resourceOwner: confluenceRoleAriStaticOpts.resourceOwner,
      resourceType: confluenceRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceRoleAriStaticOpts);
    return new _ConfluenceRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceRoleAriStaticOpts);
    return new _ConfluenceRoleAri(opts);
  }
  getVariables() {
    return {
      optionalSiteId: this.optionalSiteId,
      roleId: this.roleId
    };
  }
};

// src/confluence/site/types.ts
var ConfluenceSiteAriResourceOwner = "confluence", ConfluenceSiteAriResourceType = "site";

// src/confluence/site/manifest.ts
var confluenceSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ConfluenceSiteAriResourceOwner,
  resourceType: ConfluenceSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/site/index.ts
var ConfluenceSiteAri = class _ConfluenceSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceSiteAriStaticOpts.qualifier,
      platformQualifier: confluenceSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: confluenceSiteAriStaticOpts.resourceOwner,
      resourceType: confluenceSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceSiteAriStaticOpts);
    return new _ConfluenceSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceSiteAriStaticOpts);
    return new _ConfluenceSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/confluence/space/types.ts
var ConfluenceSpaceAriResourceOwner = "confluence", ConfluenceSpaceAriResourceType = "space";

// src/confluence/space/manifest.ts
var confluenceSpaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceSpaceAriResourceOwner,
  resourceType: ConfluenceSpaceAriResourceType,
  resourceIdSlug: "{spaceId}",
  resourceIdSegmentFormats: {
    spaceId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/space/index.ts
var ConfluenceSpaceAri = class _ConfluenceSpaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._spaceId = opts.resourceIdSegmentValues.spaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get spaceId() {
    return this._spaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceSpaceAriStaticOpts.qualifier,
      platformQualifier: confluenceSpaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceSpaceAriStaticOpts.resourceOwner,
      resourceType: confluenceSpaceAriStaticOpts.resourceType,
      resourceId: `${opts.spaceId}`,
      resourceIdSegmentValues: {
        spaceId: opts.spaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceSpaceAriStaticOpts);
    return new _ConfluenceSpaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceSpaceAriStaticOpts);
    return new _ConfluenceSpaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      spaceId: this.spaceId
    };
  }
};

// src/confluence/task/types.ts
var ConfluenceTaskAriResourceOwner = "confluence", ConfluenceTaskAriResourceType = "task";

// src/confluence/task/manifest.ts
var confluenceTaskAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceTaskAriResourceOwner,
  resourceType: ConfluenceTaskAriResourceType,
  resourceIdSlug: "{taskId}",
  resourceIdSegmentFormats: {
    taskId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/task/index.ts
var ConfluenceTaskAri = class _ConfluenceTaskAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._taskId = opts.resourceIdSegmentValues.taskId;
  }
  get siteId() {
    return this._siteId;
  }
  get taskId() {
    return this._taskId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceTaskAriStaticOpts.qualifier,
      platformQualifier: confluenceTaskAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceTaskAriStaticOpts.resourceOwner,
      resourceType: confluenceTaskAriStaticOpts.resourceType,
      resourceId: `${opts.taskId}`,
      resourceIdSegmentValues: {
        taskId: opts.taskId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceTaskAriStaticOpts);
    return new _ConfluenceTaskAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceTaskAriStaticOpts);
    return new _ConfluenceTaskAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      taskId: this.taskId
    };
  }
};

// src/confluence/team-calendar/types.ts
var ConfluenceTeamCalendarAriResourceOwner = "confluence", ConfluenceTeamCalendarAriResourceType = "team-calendar";

// src/confluence/team-calendar/manifest.ts
var confluenceTeamCalendarAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceTeamCalendarAriResourceOwner,
  resourceType: ConfluenceTeamCalendarAriResourceType,
  resourceIdSlug: "activation/{activationId}/{calendarId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    calendarId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/team-calendar/index.ts
var ConfluenceTeamCalendarAri = class _ConfluenceTeamCalendarAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._calendarId = opts.resourceIdSegmentValues.calendarId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get calendarId() {
    return this._calendarId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceTeamCalendarAriStaticOpts.qualifier,
      platformQualifier: confluenceTeamCalendarAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceTeamCalendarAriStaticOpts.resourceOwner,
      resourceType: confluenceTeamCalendarAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.calendarId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        calendarId: opts.calendarId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceTeamCalendarAriStaticOpts);
    return new _ConfluenceTeamCalendarAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceTeamCalendarAriStaticOpts);
    return new _ConfluenceTeamCalendarAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      calendarId: this.calendarId
    };
  }
};

// src/confluence/user-property/types.ts
var ConfluenceUserPropertyAriResourceOwner = "confluence", ConfluenceUserPropertyAriResourceType = "user-property";

// src/confluence/user-property/manifest.ts
var confluenceUserPropertyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceUserPropertyAriResourceOwner,
  resourceType: ConfluenceUserPropertyAriResourceType,
  resourceIdSlug: "{userPropertyId}",
  resourceIdSegmentFormats: {
    userPropertyId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/user-property/index.ts
var ConfluenceUserPropertyAri = class _ConfluenceUserPropertyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._userPropertyId = opts.resourceIdSegmentValues.userPropertyId;
  }
  get siteId() {
    return this._siteId;
  }
  get userPropertyId() {
    return this._userPropertyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceUserPropertyAriStaticOpts.qualifier,
      platformQualifier: confluenceUserPropertyAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceUserPropertyAriStaticOpts.resourceOwner,
      resourceType: confluenceUserPropertyAriStaticOpts.resourceType,
      resourceId: `${opts.userPropertyId}`,
      resourceIdSegmentValues: {
        userPropertyId: opts.userPropertyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceUserPropertyAriStaticOpts);
    return new _ConfluenceUserPropertyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceUserPropertyAriStaticOpts);
    return new _ConfluenceUserPropertyAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      userPropertyId: this.userPropertyId
    };
  }
};

// src/confluence/whiteboard/types.ts
var ConfluenceWhiteboardAriResourceOwner = "confluence", ConfluenceWhiteboardAriResourceType = "whiteboard";

// src/confluence/whiteboard/manifest.ts
var confluenceWhiteboardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceWhiteboardAriResourceOwner,
  resourceType: ConfluenceWhiteboardAriResourceType,
  resourceIdSlug: "{whiteboardId}",
  resourceIdSegmentFormats: {
    whiteboardId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/whiteboard/index.ts
var ConfluenceWhiteboardAri = class _ConfluenceWhiteboardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._whiteboardId = opts.resourceIdSegmentValues.whiteboardId;
  }
  get siteId() {
    return this._siteId;
  }
  get whiteboardId() {
    return this._whiteboardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceWhiteboardAriStaticOpts.qualifier,
      platformQualifier: confluenceWhiteboardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceWhiteboardAriStaticOpts.resourceOwner,
      resourceType: confluenceWhiteboardAriStaticOpts.resourceType,
      resourceId: `${opts.whiteboardId}`,
      resourceIdSegmentValues: {
        whiteboardId: opts.whiteboardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceWhiteboardAriStaticOpts);
    return new _ConfluenceWhiteboardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceWhiteboardAriStaticOpts);
    return new _ConfluenceWhiteboardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      whiteboardId: this.whiteboardId
    };
  }
};

// src/confluence/workspace/types.ts
var ConfluenceWorkspaceAriResourceOwner = "confluence", ConfluenceWorkspaceAriResourceType = "workspace";

// src/confluence/workspace/manifest.ts
var confluenceWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConfluenceWorkspaceAriResourceOwner,
  resourceType: ConfluenceWorkspaceAriResourceType,
  resourceIdSlug: "{activationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/workspace/index.ts
var ConfluenceWorkspaceAri = class _ConfluenceWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceWorkspaceAriStaticOpts.qualifier,
      platformQualifier: confluenceWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceWorkspaceAriStaticOpts.resourceOwner,
      resourceType: confluenceWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceWorkspaceAriStaticOpts);
    return new _ConfluenceWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceWorkspaceAriStaticOpts);
    return new _ConfluenceWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId
    };
  }
};

// src/connection-registry/link/types.ts
var ConnectionRegistryLinkAriResourceOwner = "connection-registry", ConnectionRegistryLinkAriResourceType = "link";

// src/connection-registry/link/manifest.ts
var connectionRegistryLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ConnectionRegistryLinkAriResourceOwner,
  resourceType: ConnectionRegistryLinkAriResourceType,
  resourceIdSlug: "{linkId}",
  resourceIdSegmentFormats: {
    linkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/connection-registry/link/index.ts
var ConnectionRegistryLinkAri = class _ConnectionRegistryLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._linkId = opts.resourceIdSegmentValues.linkId;
  }
  get linkId() {
    return this._linkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: connectionRegistryLinkAriStaticOpts.qualifier,
      platformQualifier: connectionRegistryLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: connectionRegistryLinkAriStaticOpts.resourceOwner,
      resourceType: connectionRegistryLinkAriStaticOpts.resourceType,
      resourceId: `${opts.linkId}`,
      resourceIdSegmentValues: {
        linkId: opts.linkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, connectionRegistryLinkAriStaticOpts);
    return new _ConnectionRegistryLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, connectionRegistryLinkAriStaticOpts);
    return new _ConnectionRegistryLinkAri(opts);
  }
  getVariables() {
    return {
      linkId: this.linkId
    };
  }
};

// src/conversational-help/conversation/types.ts
var ConversationalHelpConversationAriResourceOwner = "conversational-help", ConversationalHelpConversationAriResourceType = "conversation";

// src/conversational-help/conversation/manifest.ts
var conversationalHelpConversationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConversationalHelpConversationAriResourceOwner,
  resourceType: ConversationalHelpConversationAriResourceType,
  resourceIdSlug: "{conversationId}",
  resourceIdSegmentFormats: {
    conversationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/conversational-help/conversation/index.ts
var ConversationalHelpConversationAri = class _ConversationalHelpConversationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._conversationId = opts.resourceIdSegmentValues.conversationId;
  }
  get siteId() {
    return this._siteId;
  }
  get conversationId() {
    return this._conversationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: conversationalHelpConversationAriStaticOpts.qualifier,
      platformQualifier: conversationalHelpConversationAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: conversationalHelpConversationAriStaticOpts.resourceOwner,
      resourceType: conversationalHelpConversationAriStaticOpts.resourceType,
      resourceId: `${opts.conversationId}`,
      resourceIdSegmentValues: {
        conversationId: opts.conversationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, conversationalHelpConversationAriStaticOpts);
    return new _ConversationalHelpConversationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, conversationalHelpConversationAriStaticOpts);
    return new _ConversationalHelpConversationAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      conversationId: this.conversationId
    };
  }
};

// src/conversational-help/conversation-message/types.ts
var ConversationalHelpConversationMessageAriResourceOwner = "conversational-help", ConversationalHelpConversationMessageAriResourceType = "conversation-message";

// src/conversational-help/conversation-message/manifest.ts
var conversationalHelpConversationMessageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: ConversationalHelpConversationMessageAriResourceOwner,
  resourceType: ConversationalHelpConversationMessageAriResourceType,
  resourceIdSlug: "{conversationMessageId}",
  resourceIdSegmentFormats: {
    conversationMessageId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/conversational-help/conversation-message/index.ts
var ConversationalHelpConversationMessageAri = class _ConversationalHelpConversationMessageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._conversationMessageId = opts.resourceIdSegmentValues.conversationMessageId;
  }
  get siteId() {
    return this._siteId;
  }
  get conversationMessageId() {
    return this._conversationMessageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: conversationalHelpConversationMessageAriStaticOpts.qualifier,
      platformQualifier: conversationalHelpConversationMessageAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: conversationalHelpConversationMessageAriStaticOpts.resourceOwner,
      resourceType: conversationalHelpConversationMessageAriStaticOpts.resourceType,
      resourceId: `${opts.conversationMessageId}`,
      resourceIdSegmentValues: {
        conversationMessageId: opts.conversationMessageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, conversationalHelpConversationMessageAriStaticOpts);
    return new _ConversationalHelpConversationMessageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, conversationalHelpConversationMessageAriStaticOpts);
    return new _ConversationalHelpConversationMessageAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      conversationMessageId: this.conversationMessageId
    };
  }
};

// src/data-lake/lake-connection/types.ts
var DataLakeLakeConnectionAriResourceOwner = "data-lake", DataLakeLakeConnectionAriResourceType = "lake-connection";

// src/data-lake/lake-connection/manifest.ts
var dataLakeLakeConnectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: DataLakeLakeConnectionAriResourceOwner,
  resourceType: DataLakeLakeConnectionAriResourceType,
  resourceIdSlug: "{lakeConnectionId}",
  resourceIdSegmentFormats: {
    lakeConnectionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/data-lake/lake-connection/index.ts
var DataLakeLakeConnectionAri = class _DataLakeLakeConnectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._lakeConnectionId = opts.resourceIdSegmentValues.lakeConnectionId;
  }
  get lakeConnectionId() {
    return this._lakeConnectionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: dataLakeLakeConnectionAriStaticOpts.qualifier,
      platformQualifier: dataLakeLakeConnectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: dataLakeLakeConnectionAriStaticOpts.resourceOwner,
      resourceType: dataLakeLakeConnectionAriStaticOpts.resourceType,
      resourceId: `${opts.lakeConnectionId}`,
      resourceIdSegmentValues: {
        lakeConnectionId: opts.lakeConnectionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, dataLakeLakeConnectionAriStaticOpts);
    return new _DataLakeLakeConnectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, dataLakeLakeConnectionAriStaticOpts);
    return new _DataLakeLakeConnectionAri(opts);
  }
  getVariables() {
    return {
      lakeConnectionId: this.lakeConnectionId
    };
  }
};

// src/devops/container/types.ts
var DevopsContainerAriResourceOwner = "devops", DevopsContainerAriResourceType = "container";

// src/devops/container/manifest.ts
var devopsContainerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: DevopsContainerAriResourceOwner,
  resourceType: DevopsContainerAriResourceType,
  resourceIdSlug: "{containerId}",
  resourceIdSegmentFormats: {
    containerId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/container/index.ts
var DevopsContainerAri = class _DevopsContainerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._containerId = opts.resourceIdSegmentValues.containerId;
  }
  get siteId() {
    return this._siteId;
  }
  get containerId() {
    return this._containerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsContainerAriStaticOpts.qualifier,
      platformQualifier: devopsContainerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: devopsContainerAriStaticOpts.resourceOwner,
      resourceType: devopsContainerAriStaticOpts.resourceType,
      resourceId: `${opts.containerId}`,
      resourceIdSegmentValues: {
        containerId: opts.containerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsContainerAriStaticOpts);
    return new _DevopsContainerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsContainerAriStaticOpts);
    return new _DevopsContainerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      containerId: this.containerId
    };
  }
};

// src/devops/namespace/types.ts
var DevopsNamespaceAriResourceOwner = "devops", DevopsNamespaceAriResourceType = "namespace";

// src/devops/namespace/manifest.ts
var devopsNamespaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: DevopsNamespaceAriResourceOwner,
  resourceType: DevopsNamespaceAriResourceType,
  resourceIdSlug: "{namespaceId}",
  resourceIdSegmentFormats: {
    namespaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/namespace/index.ts
var DevopsNamespaceAri = class _DevopsNamespaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._namespaceId = opts.resourceIdSegmentValues.namespaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get namespaceId() {
    return this._namespaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsNamespaceAriStaticOpts.qualifier,
      platformQualifier: devopsNamespaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: devopsNamespaceAriStaticOpts.resourceOwner,
      resourceType: devopsNamespaceAriStaticOpts.resourceType,
      resourceId: `${opts.namespaceId}`,
      resourceIdSegmentValues: {
        namespaceId: opts.namespaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsNamespaceAriStaticOpts);
    return new _DevopsNamespaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsNamespaceAriStaticOpts);
    return new _DevopsNamespaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      namespaceId: this.namespaceId
    };
  }
};

// src/devops/provider/types.ts
var DevopsProviderAriResourceOwner = "devops", DevopsProviderAriResourceType = "provider";

// src/devops/provider/manifest.ts
var devopsProviderAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: DevopsProviderAriResourceOwner,
  resourceType: DevopsProviderAriResourceType,
  resourceIdSlug: "{providerNamespace}/{providerAppId}",
  resourceIdSegmentFormats: {
    providerNamespace: /(classic|forge|asap|oauth)/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/provider/index.ts
var DevopsProviderAri = class _DevopsProviderAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._providerNamespace = opts.resourceIdSegmentValues.providerNamespace, this._providerAppId = opts.resourceIdSegmentValues.providerAppId;
  }
  get providerNamespace() {
    return this._providerNamespace;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsProviderAriStaticOpts.qualifier,
      platformQualifier: devopsProviderAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: devopsProviderAriStaticOpts.resourceOwner,
      resourceType: devopsProviderAriStaticOpts.resourceType,
      resourceId: `${opts.providerNamespace}/${opts.providerAppId}`,
      resourceIdSegmentValues: {
        providerNamespace: opts.providerNamespace,
        providerAppId: opts.providerAppId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsProviderAriStaticOpts);
    return new _DevopsProviderAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsProviderAriStaticOpts);
    return new _DevopsProviderAri(opts);
  }
  getVariables() {
    return {
      providerNamespace: this.providerNamespace,
      providerAppId: this.providerAppId
    };
  }
};

// src/devops/relationship/types.ts
var DevopsRelationshipAriResourceOwner = "devops", DevopsRelationshipAriResourceType = "relationship";

// src/devops/relationship/manifest.ts
var devopsRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: DevopsRelationshipAriResourceOwner,
  resourceType: DevopsRelationshipAriResourceType,
  resourceIdSlug: "{relationshipId}",
  resourceIdSegmentFormats: {
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/relationship/index.ts
var DevopsRelationshipAri = class _DevopsRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsRelationshipAriStaticOpts.qualifier,
      platformQualifier: devopsRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: devopsRelationshipAriStaticOpts.resourceOwner,
      resourceType: devopsRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.relationshipId}`,
      resourceIdSegmentValues: {
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsRelationshipAriStaticOpts);
    return new _DevopsRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsRelationshipAriStaticOpts);
    return new _DevopsRelationshipAri(opts);
  }
  getVariables() {
    return {
      relationshipId: this.relationshipId
    };
  }
};

// src/devops/tool/types.ts
var DevopsToolAriResourceOwner = "devops", DevopsToolAriResourceType = "tool";

// src/devops/tool/manifest.ts
var devopsToolAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: DevopsToolAriResourceOwner,
  resourceType: DevopsToolAriResourceType,
  resourceIdSlug: "{toolId}",
  resourceIdSegmentFormats: {
    toolId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/tool/index.ts
var DevopsToolAri = class _DevopsToolAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._toolId = opts.resourceIdSegmentValues.toolId;
  }
  get siteId() {
    return this._siteId;
  }
  get toolId() {
    return this._toolId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsToolAriStaticOpts.qualifier,
      platformQualifier: devopsToolAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: devopsToolAriStaticOpts.resourceOwner,
      resourceType: devopsToolAriStaticOpts.resourceType,
      resourceId: `${opts.toolId}`,
      resourceIdSegmentValues: {
        toolId: opts.toolId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsToolAriStaticOpts);
    return new _DevopsToolAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsToolAriStaticOpts);
    return new _DevopsToolAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      toolId: this.toolId
    };
  }
};

// src/ecosystem/app/types.ts
var EcosystemAppAriResourceOwner = "ecosystem", EcosystemAppAriResourceType = "app";

// src/ecosystem/app/manifest.ts
var ecosystemAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemAppAriResourceOwner,
  resourceType: EcosystemAppAriResourceType,
  resourceIdSlug: "{appId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/app/index.ts
var EcosystemAppAri = class _EcosystemAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId;
  }
  get appId() {
    return this._appId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemAppAriStaticOpts.qualifier,
      platformQualifier: ecosystemAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemAppAriStaticOpts.resourceOwner,
      resourceType: ecosystemAppAriStaticOpts.resourceType,
      resourceId: `${opts.appId}`,
      resourceIdSegmentValues: {
        appId: opts.appId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemAppAriStaticOpts);
    return new _EcosystemAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemAppAriStaticOpts);
    return new _EcosystemAppAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId
    };
  }
};

// src/ecosystem/app-environment-version/types.ts
var EcosystemAppEnvironmentVersionAriResourceOwner = "ecosystem", EcosystemAppEnvironmentVersionAriResourceType = "app-environment-version";

// src/ecosystem/app-environment-version/manifest.ts
var ecosystemAppEnvironmentVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemAppEnvironmentVersionAriResourceOwner,
  resourceType: EcosystemAppEnvironmentVersionAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}/{versionId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    versionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/app-environment-version/index.ts
var EcosystemAppEnvironmentVersionAri = class _EcosystemAppEnvironmentVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId, this._versionId = opts.resourceIdSegmentValues.versionId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  get versionId() {
    return this._versionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemAppEnvironmentVersionAriStaticOpts.qualifier,
      platformQualifier: ecosystemAppEnvironmentVersionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemAppEnvironmentVersionAriStaticOpts.resourceOwner,
      resourceType: ecosystemAppEnvironmentVersionAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}/${opts.versionId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId,
        versionId: opts.versionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemAppEnvironmentVersionAriStaticOpts);
    return new _EcosystemAppEnvironmentVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemAppEnvironmentVersionAriStaticOpts);
    return new _EcosystemAppEnvironmentVersionAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId,
      versionId: this.versionId
    };
  }
};

// src/ecosystem/connect-app/types.ts
var EcosystemConnectAppAriResourceOwner = "ecosystem", EcosystemConnectAppAriResourceType = "connect-app";

// src/ecosystem/connect-app/manifest.ts
var ecosystemConnectAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemConnectAppAriResourceOwner,
  resourceType: EcosystemConnectAppAriResourceType,
  resourceIdSlug: "{appKey}",
  resourceIdSegmentFormats: {
    appKey: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/connect-app/index.ts
var EcosystemConnectAppAri = class _EcosystemConnectAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appKey = opts.resourceIdSegmentValues.appKey;
  }
  get appKey() {
    return this._appKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemConnectAppAriStaticOpts.qualifier,
      platformQualifier: ecosystemConnectAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemConnectAppAriStaticOpts.resourceOwner,
      resourceType: ecosystemConnectAppAriStaticOpts.resourceType,
      resourceId: `${opts.appKey}`,
      resourceIdSegmentValues: {
        appKey: opts.appKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemConnectAppAriStaticOpts);
    return new _EcosystemConnectAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemConnectAppAriStaticOpts);
    return new _EcosystemConnectAppAri(opts);
  }
  getVariables() {
    return {
      appKey: this.appKey
    };
  }
};

// src/ecosystem/environment/types.ts
var EcosystemEnvironmentAriResourceOwner = "ecosystem", EcosystemEnvironmentAriResourceType = "environment";

// src/ecosystem/environment/manifest.ts
var ecosystemEnvironmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemEnvironmentAriResourceOwner,
  resourceType: EcosystemEnvironmentAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/environment/index.ts
var EcosystemEnvironmentAri = class _EcosystemEnvironmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemEnvironmentAriStaticOpts.qualifier,
      platformQualifier: ecosystemEnvironmentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemEnvironmentAriStaticOpts.resourceOwner,
      resourceType: ecosystemEnvironmentAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemEnvironmentAriStaticOpts);
    return new _EcosystemEnvironmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemEnvironmentAriStaticOpts);
    return new _EcosystemEnvironmentAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId
    };
  }
};

// src/ecosystem/extension/types.ts
var EcosystemExtensionAriResourceOwner = "ecosystem", EcosystemExtensionAriResourceType = "extension";

// src/ecosystem/extension/manifest.ts
var ecosystemExtensionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemExtensionAriResourceOwner,
  resourceType: EcosystemExtensionAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}/{groupId}/{extensionKey}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    groupId: /([0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}|static)/,
    // eslint-disable-line no-useless-escape
    extensionKey: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/extension/index.ts
var EcosystemExtensionAri = class _EcosystemExtensionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId, this._groupId = opts.resourceIdSegmentValues.groupId, this._extensionKey = opts.resourceIdSegmentValues.extensionKey;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  get groupId() {
    return this._groupId;
  }
  get extensionKey() {
    return this._extensionKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemExtensionAriStaticOpts.qualifier,
      platformQualifier: ecosystemExtensionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemExtensionAriStaticOpts.resourceOwner,
      resourceType: ecosystemExtensionAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}/${opts.groupId}/${opts.extensionKey}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId,
        groupId: opts.groupId,
        extensionKey: opts.extensionKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemExtensionAriStaticOpts);
    return new _EcosystemExtensionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemExtensionAriStaticOpts);
    return new _EcosystemExtensionAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId,
      groupId: this.groupId,
      extensionKey: this.extensionKey
    };
  }
};

// src/ecosystem/extension-group/types.ts
var EcosystemExtensionGroupAriResourceOwner = "ecosystem", EcosystemExtensionGroupAriResourceType = "extension-group";

// src/ecosystem/extension-group/manifest.ts
var ecosystemExtensionGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemExtensionGroupAriResourceOwner,
  resourceType: EcosystemExtensionGroupAriResourceType,
  resourceIdSlug: "{appId}/{environmentId}/{groupId}",
  resourceIdSegmentFormats: {
    appId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    environmentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    groupId: /([0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}|static)/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/extension-group/index.ts
var EcosystemExtensionGroupAri = class _EcosystemExtensionGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._appId = opts.resourceIdSegmentValues.appId, this._environmentId = opts.resourceIdSegmentValues.environmentId, this._groupId = opts.resourceIdSegmentValues.groupId;
  }
  get appId() {
    return this._appId;
  }
  get environmentId() {
    return this._environmentId;
  }
  get groupId() {
    return this._groupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemExtensionGroupAriStaticOpts.qualifier,
      platformQualifier: ecosystemExtensionGroupAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemExtensionGroupAriStaticOpts.resourceOwner,
      resourceType: ecosystemExtensionGroupAriStaticOpts.resourceType,
      resourceId: `${opts.appId}/${opts.environmentId}/${opts.groupId}`,
      resourceIdSegmentValues: {
        appId: opts.appId,
        environmentId: opts.environmentId,
        groupId: opts.groupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemExtensionGroupAriStaticOpts);
    return new _EcosystemExtensionGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemExtensionGroupAriStaticOpts);
    return new _EcosystemExtensionGroupAri(opts);
  }
  getVariables() {
    return {
      appId: this.appId,
      environmentId: this.environmentId,
      groupId: this.groupId
    };
  }
};

// src/ecosystem/installation/types.ts
var EcosystemInstallationAriResourceOwner = "ecosystem", EcosystemInstallationAriResourceType = "installation";

// src/ecosystem/installation/manifest.ts
var ecosystemInstallationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: EcosystemInstallationAriResourceOwner,
  resourceType: EcosystemInstallationAriResourceType,
  resourceIdSlug: "{installationId}",
  resourceIdSegmentFormats: {
    installationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/installation/index.ts
var EcosystemInstallationAri = class _EcosystemInstallationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._installationId = opts.resourceIdSegmentValues.installationId;
  }
  get installationId() {
    return this._installationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemInstallationAriStaticOpts.qualifier,
      platformQualifier: ecosystemInstallationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemInstallationAriStaticOpts.resourceOwner,
      resourceType: ecosystemInstallationAriStaticOpts.resourceType,
      resourceId: `${opts.installationId}`,
      resourceIdSegmentValues: {
        installationId: opts.installationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemInstallationAriStaticOpts);
    return new _EcosystemInstallationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemInstallationAriStaticOpts);
    return new _EcosystemInstallationAri(opts);
  }
  getVariables() {
    return {
      installationId: this.installationId
    };
  }
};

// src/elements/custom-emoji-metadata/types.ts
var ElementsCustomEmojiMetadataAriResourceOwner = "elements", ElementsCustomEmojiMetadataAriResourceType = "custom-emoji-metadata";

// src/elements/custom-emoji-metadata/manifest.ts
var elementsCustomEmojiMetadataAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ElementsCustomEmojiMetadataAriResourceOwner,
  resourceType: ElementsCustomEmojiMetadataAriResourceType,
  resourceIdSlug: "{customEmojiMetadataId}",
  resourceIdSegmentFormats: {
    customEmojiMetadataId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/elements/custom-emoji-metadata/index.ts
var ElementsCustomEmojiMetadataAri = class _ElementsCustomEmojiMetadataAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._customEmojiMetadataId = opts.resourceIdSegmentValues.customEmojiMetadataId;
  }
  get customEmojiMetadataId() {
    return this._customEmojiMetadataId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: elementsCustomEmojiMetadataAriStaticOpts.qualifier,
      platformQualifier: elementsCustomEmojiMetadataAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: elementsCustomEmojiMetadataAriStaticOpts.resourceOwner,
      resourceType: elementsCustomEmojiMetadataAriStaticOpts.resourceType,
      resourceId: `${opts.customEmojiMetadataId}`,
      resourceIdSegmentValues: {
        customEmojiMetadataId: opts.customEmojiMetadataId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, elementsCustomEmojiMetadataAriStaticOpts);
    return new _ElementsCustomEmojiMetadataAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, elementsCustomEmojiMetadataAriStaticOpts);
    return new _ElementsCustomEmojiMetadataAri(opts);
  }
  getVariables() {
    return {
      customEmojiMetadataId: this.customEmojiMetadataId
    };
  }
};

// src/elements/workspace/types.ts
var ElementsWorkspaceAriResourceOwner = "elements", ElementsWorkspaceAriResourceType = "workspace";

// src/elements/workspace/manifest.ts
var elementsWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ElementsWorkspaceAriResourceOwner,
  resourceType: ElementsWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/elements/workspace/index.ts
var ElementsWorkspaceAri = class _ElementsWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: elementsWorkspaceAriStaticOpts.qualifier,
      platformQualifier: elementsWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: elementsWorkspaceAriStaticOpts.resourceOwner,
      resourceType: elementsWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, elementsWorkspaceAriStaticOpts);
    return new _ElementsWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, elementsWorkspaceAriStaticOpts);
    return new _ElementsWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/exus-external/user/types.ts
var ExusExternalUserAriResourceOwner = "exus-external", ExusExternalUserAriResourceType = "user";

// src/exus-external/user/manifest.ts
var exusExternalUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: ExusExternalUserAriResourceOwner,
  resourceType: ExusExternalUserAriResourceType,
  resourceIdSlug: "{thirdPartySource}/{thirdPartyUserId}",
  resourceIdSegmentFormats: {
    thirdPartySource: /[a-z0-9-]+/,
    // eslint-disable-line no-useless-escape
    thirdPartyUserId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/exus-external/user/index.ts
var ExusExternalUserAri = class _ExusExternalUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._thirdPartySource = opts.resourceIdSegmentValues.thirdPartySource, this._thirdPartyUserId = opts.resourceIdSegmentValues.thirdPartyUserId;
  }
  get thirdPartySource() {
    return this._thirdPartySource;
  }
  get thirdPartyUserId() {
    return this._thirdPartyUserId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: exusExternalUserAriStaticOpts.qualifier,
      platformQualifier: exusExternalUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: exusExternalUserAriStaticOpts.resourceOwner,
      resourceType: exusExternalUserAriStaticOpts.resourceType,
      resourceId: `${opts.thirdPartySource}/${opts.thirdPartyUserId}`,
      resourceIdSegmentValues: {
        thirdPartySource: opts.thirdPartySource,
        thirdPartyUserId: opts.thirdPartyUserId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, exusExternalUserAriStaticOpts);
    return new _ExusExternalUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, exusExternalUserAriStaticOpts);
    return new _ExusExternalUserAri(opts);
  }
  getVariables() {
    return {
      thirdPartySource: this.thirdPartySource,
      thirdPartyUserId: this.thirdPartyUserId
    };
  }
};

// src/figma/file/types.ts
var FigmaFileAriResourceOwner = "figma", FigmaFileAriResourceType = "file";

// src/figma/file/manifest.ts
var figmaFileAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: FigmaFileAriResourceOwner,
  resourceType: FigmaFileAriResourceType,
  resourceIdSlug: "{fileId}",
  resourceIdSegmentFormats: {
    fileId: /[A-z0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/figma/file/index.ts
var FigmaFileAri = class _FigmaFileAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._fileId = opts.resourceIdSegmentValues.fileId;
  }
  get fileId() {
    return this._fileId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: figmaFileAriStaticOpts.qualifier,
      platformQualifier: figmaFileAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: figmaFileAriStaticOpts.resourceOwner,
      resourceType: figmaFileAriStaticOpts.resourceType,
      resourceId: `${opts.fileId}`,
      resourceIdSegmentValues: {
        fileId: opts.fileId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, figmaFileAriStaticOpts);
    return new _FigmaFileAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, figmaFileAriStaticOpts);
    return new _FigmaFileAri(opts);
  }
  getVariables() {
    return {
      fileId: this.fileId
    };
  }
};

// src/google/document/types.ts
var GoogleDocumentAriResourceOwner = "google", GoogleDocumentAriResourceType = "document";

// src/google/document/manifest.ts
var googleDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: GoogleDocumentAriResourceOwner,
  resourceType: GoogleDocumentAriResourceType,
  resourceIdSlug: "{docId}",
  resourceIdSegmentFormats: {
    docId: /[a-zA-Z0-9_-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/google/document/index.ts
var GoogleDocumentAri = class _GoogleDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._docId = opts.resourceIdSegmentValues.docId;
  }
  get docId() {
    return this._docId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: googleDocumentAriStaticOpts.qualifier,
      platformQualifier: googleDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: googleDocumentAriStaticOpts.resourceOwner,
      resourceType: googleDocumentAriStaticOpts.resourceType,
      resourceId: `${opts.docId}`,
      resourceIdSegmentValues: {
        docId: opts.docId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, googleDocumentAriStaticOpts);
    return new _GoogleDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, googleDocumentAriStaticOpts);
    return new _GoogleDocumentAri(opts);
  }
  getVariables() {
    return {
      docId: this.docId
    };
  }
};

// src/google/form/types.ts
var GoogleFormAriResourceOwner = "google", GoogleFormAriResourceType = "form";

// src/google/form/manifest.ts
var googleFormAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: GoogleFormAriResourceOwner,
  resourceType: GoogleFormAriResourceType,
  resourceIdSlug: "{docId}",
  resourceIdSegmentFormats: {
    docId: /[a-zA-Z0-9_-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/google/form/index.ts
var GoogleFormAri = class _GoogleFormAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._docId = opts.resourceIdSegmentValues.docId;
  }
  get docId() {
    return this._docId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: googleFormAriStaticOpts.qualifier,
      platformQualifier: googleFormAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: googleFormAriStaticOpts.resourceOwner,
      resourceType: googleFormAriStaticOpts.resourceType,
      resourceId: `${opts.docId}`,
      resourceIdSegmentValues: {
        docId: opts.docId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, googleFormAriStaticOpts);
    return new _GoogleFormAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, googleFormAriStaticOpts);
    return new _GoogleFormAri(opts);
  }
  getVariables() {
    return {
      docId: this.docId
    };
  }
};

// src/google/presentation/types.ts
var GooglePresentationAriResourceOwner = "google", GooglePresentationAriResourceType = "presentation";

// src/google/presentation/manifest.ts
var googlePresentationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: GooglePresentationAriResourceOwner,
  resourceType: GooglePresentationAriResourceType,
  resourceIdSlug: "{docId}",
  resourceIdSegmentFormats: {
    docId: /[a-zA-Z0-9_-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/google/presentation/index.ts
var GooglePresentationAri = class _GooglePresentationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._docId = opts.resourceIdSegmentValues.docId;
  }
  get docId() {
    return this._docId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: googlePresentationAriStaticOpts.qualifier,
      platformQualifier: googlePresentationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: googlePresentationAriStaticOpts.resourceOwner,
      resourceType: googlePresentationAriStaticOpts.resourceType,
      resourceId: `${opts.docId}`,
      resourceIdSegmentValues: {
        docId: opts.docId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, googlePresentationAriStaticOpts);
    return new _GooglePresentationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, googlePresentationAriStaticOpts);
    return new _GooglePresentationAri(opts);
  }
  getVariables() {
    return {
      docId: this.docId
    };
  }
};

// src/google/spreadsheet/types.ts
var GoogleSpreadsheetAriResourceOwner = "google", GoogleSpreadsheetAriResourceType = "spreadsheet";

// src/google/spreadsheet/manifest.ts
var googleSpreadsheetAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: GoogleSpreadsheetAriResourceOwner,
  resourceType: GoogleSpreadsheetAriResourceType,
  resourceIdSlug: "{docId}",
  resourceIdSegmentFormats: {
    docId: /[a-zA-Z0-9_-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/google/spreadsheet/index.ts
var GoogleSpreadsheetAri = class _GoogleSpreadsheetAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._docId = opts.resourceIdSegmentValues.docId;
  }
  get docId() {
    return this._docId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: googleSpreadsheetAriStaticOpts.qualifier,
      platformQualifier: googleSpreadsheetAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: googleSpreadsheetAriStaticOpts.resourceOwner,
      resourceType: googleSpreadsheetAriStaticOpts.resourceType,
      resourceId: `${opts.docId}`,
      resourceIdSegmentValues: {
        docId: opts.docId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, googleSpreadsheetAriStaticOpts);
    return new _GoogleSpreadsheetAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, googleSpreadsheetAriStaticOpts);
    return new _GoogleSpreadsheetAri(opts);
  }
  getVariables() {
    return {
      docId: this.docId
    };
  }
};

// src/graph/branch/types.ts
var GraphBranchAriResourceOwner = "graph", GraphBranchAriResourceType = "branch";

// src/graph/branch/manifest.ts
var graphBranchAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphBranchAriResourceOwner,
  resourceType: GraphBranchAriResourceType,
  resourceIdSlug: "activation/{activationId}/{branchId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    branchId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/branch/index.ts
var GraphBranchAri = class _GraphBranchAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._branchId = opts.resourceIdSegmentValues.branchId;
  }
  get activationId() {
    return this._activationId;
  }
  get branchId() {
    return this._branchId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphBranchAriStaticOpts.qualifier,
      platformQualifier: graphBranchAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphBranchAriStaticOpts.resourceOwner,
      resourceType: graphBranchAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.branchId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        branchId: opts.branchId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphBranchAriStaticOpts);
    return new _GraphBranchAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphBranchAriStaticOpts);
    return new _GraphBranchAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      branchId: this.branchId
    };
  }
};

// src/graph/branch-history/types.ts
var GraphBranchHistoryAriResourceOwner = "graph", GraphBranchHistoryAriResourceType = "branch-history";

// src/graph/branch-history/manifest.ts
var graphBranchHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphBranchHistoryAriResourceOwner,
  resourceType: GraphBranchHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{branchId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    branchId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/branch-history/index.ts
var GraphBranchHistoryAri = class _GraphBranchHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._branchId = opts.resourceIdSegmentValues.branchId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get branchId() {
    return this._branchId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphBranchHistoryAriStaticOpts.qualifier,
      platformQualifier: graphBranchHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphBranchHistoryAriStaticOpts.resourceOwner,
      resourceType: graphBranchHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.branchId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        branchId: opts.branchId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphBranchHistoryAriStaticOpts);
    return new _GraphBranchHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphBranchHistoryAriStaticOpts);
    return new _GraphBranchHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      branchId: this.branchId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/build/types.ts
var GraphBuildAriResourceOwner = "graph", GraphBuildAriResourceType = "build";

// src/graph/build/manifest.ts
var graphBuildAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphBuildAriResourceOwner,
  resourceType: GraphBuildAriResourceType,
  resourceIdSlug: "activation/{activationId}/{buildId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    buildId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/build/index.ts
var GraphBuildAri = class _GraphBuildAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._buildId = opts.resourceIdSegmentValues.buildId;
  }
  get activationId() {
    return this._activationId;
  }
  get buildId() {
    return this._buildId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphBuildAriStaticOpts.qualifier,
      platformQualifier: graphBuildAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphBuildAriStaticOpts.resourceOwner,
      resourceType: graphBuildAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.buildId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        buildId: opts.buildId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphBuildAriStaticOpts);
    return new _GraphBuildAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphBuildAriStaticOpts);
    return new _GraphBuildAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      buildId: this.buildId
    };
  }
};

// src/graph/build-history/types.ts
var GraphBuildHistoryAriResourceOwner = "graph", GraphBuildHistoryAriResourceType = "build-history";

// src/graph/build-history/manifest.ts
var graphBuildHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphBuildHistoryAriResourceOwner,
  resourceType: GraphBuildHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{buildId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    buildId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/build-history/index.ts
var GraphBuildHistoryAri = class _GraphBuildHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._buildId = opts.resourceIdSegmentValues.buildId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get buildId() {
    return this._buildId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphBuildHistoryAriStaticOpts.qualifier,
      platformQualifier: graphBuildHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphBuildHistoryAriStaticOpts.resourceOwner,
      resourceType: graphBuildHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.buildId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        buildId: opts.buildId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphBuildHistoryAriStaticOpts);
    return new _GraphBuildHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphBuildHistoryAriStaticOpts);
    return new _GraphBuildHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      buildId: this.buildId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/commit/types.ts
var GraphCommitAriResourceOwner = "graph", GraphCommitAriResourceType = "commit";

// src/graph/commit/manifest.ts
var graphCommitAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphCommitAriResourceOwner,
  resourceType: GraphCommitAriResourceType,
  resourceIdSlug: "activation/{activationId}/{commitId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    commitId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/commit/index.ts
var GraphCommitAri = class _GraphCommitAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._commitId = opts.resourceIdSegmentValues.commitId;
  }
  get activationId() {
    return this._activationId;
  }
  get commitId() {
    return this._commitId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphCommitAriStaticOpts.qualifier,
      platformQualifier: graphCommitAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphCommitAriStaticOpts.resourceOwner,
      resourceType: graphCommitAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.commitId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        commitId: opts.commitId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphCommitAriStaticOpts);
    return new _GraphCommitAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphCommitAriStaticOpts);
    return new _GraphCommitAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      commitId: this.commitId
    };
  }
};

// src/graph/content/types.ts
var GraphContentAriResourceOwner = "graph", GraphContentAriResourceType = "content";

// src/graph/content/manifest.ts
var graphContentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphContentAriResourceOwner,
  resourceType: GraphContentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{contentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    contentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/content/index.ts
var GraphContentAri = class _GraphContentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._contentId = opts.resourceIdSegmentValues.contentId;
  }
  get activationId() {
    return this._activationId;
  }
  get contentId() {
    return this._contentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphContentAriStaticOpts.qualifier,
      platformQualifier: graphContentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphContentAriStaticOpts.resourceOwner,
      resourceType: graphContentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.contentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        contentId: opts.contentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphContentAriStaticOpts);
    return new _GraphContentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphContentAriStaticOpts);
    return new _GraphContentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      contentId: this.contentId
    };
  }
};

// src/graph/deployment/types.ts
var GraphDeploymentAriResourceOwner = "graph", GraphDeploymentAriResourceType = "deployment";

// src/graph/deployment/manifest.ts
var graphDeploymentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDeploymentAriResourceOwner,
  resourceType: GraphDeploymentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{deploymentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/deployment/index.ts
var GraphDeploymentAri = class _GraphDeploymentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId;
  }
  get activationId() {
    return this._activationId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDeploymentAriStaticOpts.qualifier,
      platformQualifier: graphDeploymentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDeploymentAriStaticOpts.resourceOwner,
      resourceType: graphDeploymentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.deploymentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        deploymentId: opts.deploymentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDeploymentAriStaticOpts);
    return new _GraphDeploymentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDeploymentAriStaticOpts);
    return new _GraphDeploymentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      deploymentId: this.deploymentId
    };
  }
};

// src/graph/deployment-history/types.ts
var GraphDeploymentHistoryAriResourceOwner = "graph", GraphDeploymentHistoryAriResourceType = "deployment-history";

// src/graph/deployment-history/manifest.ts
var graphDeploymentHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDeploymentHistoryAriResourceOwner,
  resourceType: GraphDeploymentHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{deploymentId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/deployment-history/index.ts
var GraphDeploymentHistoryAri = class _GraphDeploymentHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDeploymentHistoryAriStaticOpts.qualifier,
      platformQualifier: graphDeploymentHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDeploymentHistoryAriStaticOpts.resourceOwner,
      resourceType: graphDeploymentHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.deploymentId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        deploymentId: opts.deploymentId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDeploymentHistoryAriStaticOpts);
    return new _GraphDeploymentHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDeploymentHistoryAriStaticOpts);
    return new _GraphDeploymentHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      deploymentId: this.deploymentId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/design/types.ts
var GraphDesignAriResourceOwner = "graph", GraphDesignAriResourceType = "design";

// src/graph/design/manifest.ts
var graphDesignAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDesignAriResourceOwner,
  resourceType: GraphDesignAriResourceType,
  resourceIdSlug: "activation/{activationId}/{designId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    designId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/design/index.ts
var GraphDesignAri = class _GraphDesignAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._designId = opts.resourceIdSegmentValues.designId;
  }
  get activationId() {
    return this._activationId;
  }
  get designId() {
    return this._designId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDesignAriStaticOpts.qualifier,
      platformQualifier: graphDesignAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDesignAriStaticOpts.resourceOwner,
      resourceType: graphDesignAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.designId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        designId: opts.designId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDesignAriStaticOpts);
    return new _GraphDesignAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDesignAriStaticOpts);
    return new _GraphDesignAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      designId: this.designId
    };
  }
};

// src/graph/design-history/types.ts
var GraphDesignHistoryAriResourceOwner = "graph", GraphDesignHistoryAriResourceType = "design-history";

// src/graph/design-history/manifest.ts
var graphDesignHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDesignHistoryAriResourceOwner,
  resourceType: GraphDesignHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{designId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    designId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/design-history/index.ts
var GraphDesignHistoryAri = class _GraphDesignHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._designId = opts.resourceIdSegmentValues.designId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get designId() {
    return this._designId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDesignHistoryAriStaticOpts.qualifier,
      platformQualifier: graphDesignHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDesignHistoryAriStaticOpts.resourceOwner,
      resourceType: graphDesignHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.designId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        designId: opts.designId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDesignHistoryAriStaticOpts);
    return new _GraphDesignHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDesignHistoryAriStaticOpts);
    return new _GraphDesignHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      designId: this.designId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/devops-component/types.ts
var GraphDevopsComponentAriResourceOwner = "graph", GraphDevopsComponentAriResourceType = "devops-component";

// src/graph/devops-component/manifest.ts
var graphDevopsComponentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDevopsComponentAriResourceOwner,
  resourceType: GraphDevopsComponentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{devopsComponentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    devopsComponentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/devops-component/index.ts
var GraphDevopsComponentAri = class _GraphDevopsComponentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._devopsComponentId = opts.resourceIdSegmentValues.devopsComponentId;
  }
  get activationId() {
    return this._activationId;
  }
  get devopsComponentId() {
    return this._devopsComponentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDevopsComponentAriStaticOpts.qualifier,
      platformQualifier: graphDevopsComponentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDevopsComponentAriStaticOpts.resourceOwner,
      resourceType: graphDevopsComponentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.devopsComponentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        devopsComponentId: opts.devopsComponentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDevopsComponentAriStaticOpts);
    return new _GraphDevopsComponentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDevopsComponentAriStaticOpts);
    return new _GraphDevopsComponentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      devopsComponentId: this.devopsComponentId
    };
  }
};

// src/graph/document/types.ts
var GraphDocumentAriResourceOwner = "graph", GraphDocumentAriResourceType = "document";

// src/graph/document/manifest.ts
var graphDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDocumentAriResourceOwner,
  resourceType: GraphDocumentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{documentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    documentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/document/index.ts
var GraphDocumentAri = class _GraphDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._documentId = opts.resourceIdSegmentValues.documentId;
  }
  get activationId() {
    return this._activationId;
  }
  get documentId() {
    return this._documentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDocumentAriStaticOpts.qualifier,
      platformQualifier: graphDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDocumentAriStaticOpts.resourceOwner,
      resourceType: graphDocumentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.documentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        documentId: opts.documentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDocumentAriStaticOpts);
    return new _GraphDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDocumentAriStaticOpts);
    return new _GraphDocumentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      documentId: this.documentId
    };
  }
};

// src/graph/document-history/types.ts
var GraphDocumentHistoryAriResourceOwner = "graph", GraphDocumentHistoryAriResourceType = "document-history";

// src/graph/document-history/manifest.ts
var graphDocumentHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphDocumentHistoryAriResourceOwner,
  resourceType: GraphDocumentHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{documentId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    documentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/document-history/index.ts
var GraphDocumentHistoryAri = class _GraphDocumentHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._documentId = opts.resourceIdSegmentValues.documentId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get documentId() {
    return this._documentId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphDocumentHistoryAriStaticOpts.qualifier,
      platformQualifier: graphDocumentHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphDocumentHistoryAriStaticOpts.resourceOwner,
      resourceType: graphDocumentHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.documentId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        documentId: opts.documentId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphDocumentHistoryAriStaticOpts);
    return new _GraphDocumentHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphDocumentHistoryAriStaticOpts);
    return new _GraphDocumentHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      documentId: this.documentId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/employee/types.ts
var GraphEmployeeAriResourceOwner = "graph", GraphEmployeeAriResourceType = "employee";

// src/graph/employee/manifest.ts
var graphEmployeeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphEmployeeAriResourceOwner,
  resourceType: GraphEmployeeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{employeeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    employeeId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/employee/index.ts
var GraphEmployeeAri = class _GraphEmployeeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._employeeId = opts.resourceIdSegmentValues.employeeId;
  }
  get activationId() {
    return this._activationId;
  }
  get employeeId() {
    return this._employeeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphEmployeeAriStaticOpts.qualifier,
      platformQualifier: graphEmployeeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphEmployeeAriStaticOpts.resourceOwner,
      resourceType: graphEmployeeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.employeeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        employeeId: opts.employeeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphEmployeeAriStaticOpts);
    return new _GraphEmployeeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphEmployeeAriStaticOpts);
    return new _GraphEmployeeAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      employeeId: this.employeeId
    };
  }
};

// src/graph/employee-history/types.ts
var GraphEmployeeHistoryAriResourceOwner = "graph", GraphEmployeeHistoryAriResourceType = "employee-history";

// src/graph/employee-history/manifest.ts
var graphEmployeeHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphEmployeeHistoryAriResourceOwner,
  resourceType: GraphEmployeeHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{employeeId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    employeeId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/employee-history/index.ts
var GraphEmployeeHistoryAri = class _GraphEmployeeHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._employeeId = opts.resourceIdSegmentValues.employeeId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get employeeId() {
    return this._employeeId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphEmployeeHistoryAriStaticOpts.qualifier,
      platformQualifier: graphEmployeeHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphEmployeeHistoryAriStaticOpts.resourceOwner,
      resourceType: graphEmployeeHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.employeeId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        employeeId: opts.employeeId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphEmployeeHistoryAriStaticOpts);
    return new _GraphEmployeeHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphEmployeeHistoryAriStaticOpts);
    return new _GraphEmployeeHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      employeeId: this.employeeId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/feature-flag/types.ts
var GraphFeatureFlagAriResourceOwner = "graph", GraphFeatureFlagAriResourceType = "feature-flag";

// src/graph/feature-flag/manifest.ts
var graphFeatureFlagAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphFeatureFlagAriResourceOwner,
  resourceType: GraphFeatureFlagAriResourceType,
  resourceIdSlug: "activation/{activationId}/{featureFlagId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    featureFlagId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/feature-flag/index.ts
var GraphFeatureFlagAri = class _GraphFeatureFlagAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._featureFlagId = opts.resourceIdSegmentValues.featureFlagId;
  }
  get activationId() {
    return this._activationId;
  }
  get featureFlagId() {
    return this._featureFlagId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphFeatureFlagAriStaticOpts.qualifier,
      platformQualifier: graphFeatureFlagAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphFeatureFlagAriStaticOpts.resourceOwner,
      resourceType: graphFeatureFlagAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.featureFlagId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        featureFlagId: opts.featureFlagId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphFeatureFlagAriStaticOpts);
    return new _GraphFeatureFlagAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphFeatureFlagAriStaticOpts);
    return new _GraphFeatureFlagAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      featureFlagId: this.featureFlagId
    };
  }
};

// src/graph/feature-flag-history/types.ts
var GraphFeatureFlagHistoryAriResourceOwner = "graph", GraphFeatureFlagHistoryAriResourceType = "feature-flag-history";

// src/graph/feature-flag-history/manifest.ts
var graphFeatureFlagHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphFeatureFlagHistoryAriResourceOwner,
  resourceType: GraphFeatureFlagHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{featureFlagId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    featureFlagId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/feature-flag-history/index.ts
var GraphFeatureFlagHistoryAri = class _GraphFeatureFlagHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._featureFlagId = opts.resourceIdSegmentValues.featureFlagId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get featureFlagId() {
    return this._featureFlagId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphFeatureFlagHistoryAriStaticOpts.qualifier,
      platformQualifier: graphFeatureFlagHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphFeatureFlagHistoryAriStaticOpts.resourceOwner,
      resourceType: graphFeatureFlagHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.featureFlagId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        featureFlagId: opts.featureFlagId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphFeatureFlagHistoryAriStaticOpts);
    return new _GraphFeatureFlagHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphFeatureFlagHistoryAriStaticOpts);
    return new _GraphFeatureFlagHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      featureFlagId: this.featureFlagId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/incident/types.ts
var GraphIncidentAriResourceOwner = "graph", GraphIncidentAriResourceType = "incident";

// src/graph/incident/manifest.ts
var graphIncidentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphIncidentAriResourceOwner,
  resourceType: GraphIncidentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{incidentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/incident/index.ts
var GraphIncidentAri = class _GraphIncidentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._incidentId = opts.resourceIdSegmentValues.incidentId;
  }
  get activationId() {
    return this._activationId;
  }
  get incidentId() {
    return this._incidentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphIncidentAriStaticOpts.qualifier,
      platformQualifier: graphIncidentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphIncidentAriStaticOpts.resourceOwner,
      resourceType: graphIncidentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.incidentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        incidentId: opts.incidentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphIncidentAriStaticOpts);
    return new _GraphIncidentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphIncidentAriStaticOpts);
    return new _GraphIncidentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      incidentId: this.incidentId
    };
  }
};

// src/graph/incident-history/types.ts
var GraphIncidentHistoryAriResourceOwner = "graph", GraphIncidentHistoryAriResourceType = "incident-history";

// src/graph/incident-history/manifest.ts
var graphIncidentHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphIncidentHistoryAriResourceOwner,
  resourceType: GraphIncidentHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{incidentId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/incident-history/index.ts
var GraphIncidentHistoryAri = class _GraphIncidentHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._incidentId = opts.resourceIdSegmentValues.incidentId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get incidentId() {
    return this._incidentId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphIncidentHistoryAriStaticOpts.qualifier,
      platformQualifier: graphIncidentHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphIncidentHistoryAriStaticOpts.resourceOwner,
      resourceType: graphIncidentHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.incidentId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        incidentId: opts.incidentId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphIncidentHistoryAriStaticOpts);
    return new _GraphIncidentHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphIncidentHistoryAriStaticOpts);
    return new _GraphIncidentHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      incidentId: this.incidentId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/jira-project-and-devops-tool-relationship/types.ts
var GraphJiraProjectAndDevopsToolRelationshipAriResourceOwner = "graph", GraphJiraProjectAndDevopsToolRelationshipAriResourceType = "jira-project-and-devops-tool-relationship";

// src/graph/jira-project-and-devops-tool-relationship/manifest.ts
var graphJiraProjectAndDevopsToolRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphJiraProjectAndDevopsToolRelationshipAriResourceOwner,
  resourceType: GraphJiraProjectAndDevopsToolRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/jira-project-and-devops-tool-relationship/index.ts
var GraphJiraProjectAndDevopsToolRelationshipAri = class _GraphJiraProjectAndDevopsToolRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphJiraProjectAndDevopsToolRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphJiraProjectAndDevopsToolRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphJiraProjectAndDevopsToolRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphJiraProjectAndDevopsToolRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphJiraProjectAndDevopsToolRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndDevopsToolRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphJiraProjectAndDevopsToolRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndDevopsToolRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/jira-project-and-documentation-space-relationship/types.ts
var GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceOwner = "graph", GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceType = "jira-project-and-documentation-space-relationship";

// src/graph/jira-project-and-documentation-space-relationship/manifest.ts
var graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceOwner,
  resourceType: GraphJiraProjectAndDocumentationSpaceRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/jira-project-and-documentation-space-relationship/index.ts
var GraphJiraProjectAndDocumentationSpaceRelationshipAri = class _GraphJiraProjectAndDocumentationSpaceRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndDocumentationSpaceRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphJiraProjectAndDocumentationSpaceRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndDocumentationSpaceRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/jira-project-and-operations-team-relationship/types.ts
var GraphJiraProjectAndOperationsTeamRelationshipAriResourceOwner = "graph", GraphJiraProjectAndOperationsTeamRelationshipAriResourceType = "jira-project-and-operations-team-relationship";

// src/graph/jira-project-and-operations-team-relationship/manifest.ts
var graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphJiraProjectAndOperationsTeamRelationshipAriResourceOwner,
  resourceType: GraphJiraProjectAndOperationsTeamRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/jira-project-and-operations-team-relationship/index.ts
var GraphJiraProjectAndOperationsTeamRelationshipAri = class _GraphJiraProjectAndOperationsTeamRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndOperationsTeamRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphJiraProjectAndOperationsTeamRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndOperationsTeamRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/jira-project-and-vcs-repository-relationship/types.ts
var GraphJiraProjectAndVcsRepositoryRelationshipAriResourceOwner = "graph", GraphJiraProjectAndVcsRepositoryRelationshipAriResourceType = "jira-project-and-vcs-repository-relationship";

// src/graph/jira-project-and-vcs-repository-relationship/manifest.ts
var graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphJiraProjectAndVcsRepositoryRelationshipAriResourceOwner,
  resourceType: GraphJiraProjectAndVcsRepositoryRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/jira-project-and-vcs-repository-relationship/index.ts
var GraphJiraProjectAndVcsRepositoryRelationshipAri = class _GraphJiraProjectAndVcsRepositoryRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndVcsRepositoryRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphJiraProjectAndVcsRepositoryRelationshipAriStaticOpts);
    return new _GraphJiraProjectAndVcsRepositoryRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/jira-project-and-vcs-repository-relationship-temp-migration/types.ts
var GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceOwner = "graph", GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceType = "jira-project-and-vcs-repository-relationship-temp-migration";

// src/graph/jira-project-and-vcs-repository-relationship-temp-migration/manifest.ts
var graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceOwner,
  resourceType: GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriResourceType,
  resourceIdSlug: "{siteId}/{projectId}/{activationId}/{repositoryId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    projectId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/jira-project-and-vcs-repository-relationship-temp-migration/index.ts
var GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri = class _GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId, this._projectId = opts.resourceIdSegmentValues.projectId, this._activationId = opts.resourceIdSegmentValues.activationId, this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get siteId() {
    return this._siteId;
  }
  get projectId() {
    return this._projectId;
  }
  get activationId() {
    return this._activationId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts.qualifier,
      platformQualifier: graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts.resourceOwner,
      resourceType: graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}/${opts.projectId}/${opts.activationId}/${opts.repositoryId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId,
        projectId: opts.projectId,
        activationId: opts.activationId,
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(
      derivedOpts,
      graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts
    );
    return new _GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphJiraProjectAndVcsRepositoryRelationshipTempMigrationAriStaticOpts);
    return new _GraphJiraProjectAndVcsRepositoryRelationshipTempMigrationAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      projectId: this.projectId,
      activationId: this.activationId,
      repositoryId: this.repositoryId
    };
  }
};

// src/graph/operations-workspace/types.ts
var GraphOperationsWorkspaceAriResourceOwner = "graph", GraphOperationsWorkspaceAriResourceType = "operations-workspace";

// src/graph/operations-workspace/manifest.ts
var graphOperationsWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphOperationsWorkspaceAriResourceOwner,
  resourceType: GraphOperationsWorkspaceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{providerAppId}/{operationsWorkspaceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/,
    // eslint-disable-line no-useless-escape
    operationsWorkspaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/operations-workspace/index.ts
var GraphOperationsWorkspaceAri = class _GraphOperationsWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._providerAppId = opts.resourceIdSegmentValues.providerAppId, this._operationsWorkspaceId = opts.resourceIdSegmentValues.operationsWorkspaceId;
  }
  get activationId() {
    return this._activationId;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  get operationsWorkspaceId() {
    return this._operationsWorkspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphOperationsWorkspaceAriStaticOpts.qualifier,
      platformQualifier: graphOperationsWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphOperationsWorkspaceAriStaticOpts.resourceOwner,
      resourceType: graphOperationsWorkspaceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.providerAppId}/${opts.operationsWorkspaceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        providerAppId: opts.providerAppId,
        operationsWorkspaceId: opts.operationsWorkspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphOperationsWorkspaceAriStaticOpts);
    return new _GraphOperationsWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphOperationsWorkspaceAriStaticOpts);
    return new _GraphOperationsWorkspaceAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      providerAppId: this.providerAppId,
      operationsWorkspaceId: this.operationsWorkspaceId
    };
  }
};

// src/graph/post-incident-review/types.ts
var GraphPostIncidentReviewAriResourceOwner = "graph", GraphPostIncidentReviewAriResourceType = "post-incident-review";

// src/graph/post-incident-review/manifest.ts
var graphPostIncidentReviewAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphPostIncidentReviewAriResourceOwner,
  resourceType: GraphPostIncidentReviewAriResourceType,
  resourceIdSlug: "activation/{activationId}/{postIncidentReviewId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    postIncidentReviewId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/post-incident-review/index.ts
var GraphPostIncidentReviewAri = class _GraphPostIncidentReviewAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._postIncidentReviewId = opts.resourceIdSegmentValues.postIncidentReviewId;
  }
  get activationId() {
    return this._activationId;
  }
  get postIncidentReviewId() {
    return this._postIncidentReviewId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphPostIncidentReviewAriStaticOpts.qualifier,
      platformQualifier: graphPostIncidentReviewAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphPostIncidentReviewAriStaticOpts.resourceOwner,
      resourceType: graphPostIncidentReviewAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.postIncidentReviewId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        postIncidentReviewId: opts.postIncidentReviewId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphPostIncidentReviewAriStaticOpts);
    return new _GraphPostIncidentReviewAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphPostIncidentReviewAriStaticOpts);
    return new _GraphPostIncidentReviewAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      postIncidentReviewId: this.postIncidentReviewId
    };
  }
};

// src/graph/post-incident-review-history/types.ts
var GraphPostIncidentReviewHistoryAriResourceOwner = "graph", GraphPostIncidentReviewHistoryAriResourceType = "post-incident-review-history";

// src/graph/post-incident-review-history/manifest.ts
var graphPostIncidentReviewHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphPostIncidentReviewHistoryAriResourceOwner,
  resourceType: GraphPostIncidentReviewHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{postIncidentReviewId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    postIncidentReviewId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/post-incident-review-history/index.ts
var GraphPostIncidentReviewHistoryAri = class _GraphPostIncidentReviewHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._postIncidentReviewId = opts.resourceIdSegmentValues.postIncidentReviewId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get postIncidentReviewId() {
    return this._postIncidentReviewId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphPostIncidentReviewHistoryAriStaticOpts.qualifier,
      platformQualifier: graphPostIncidentReviewHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphPostIncidentReviewHistoryAriStaticOpts.resourceOwner,
      resourceType: graphPostIncidentReviewHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.postIncidentReviewId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        postIncidentReviewId: opts.postIncidentReviewId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphPostIncidentReviewHistoryAriStaticOpts);
    return new _GraphPostIncidentReviewHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphPostIncidentReviewHistoryAriStaticOpts);
    return new _GraphPostIncidentReviewHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      postIncidentReviewId: this.postIncidentReviewId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/project/types.ts
var GraphProjectAriResourceOwner = "graph", GraphProjectAriResourceType = "project";

// src/graph/project/manifest.ts
var graphProjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphProjectAriResourceOwner,
  resourceType: GraphProjectAriResourceType,
  resourceIdSlug: "activation/{activationId}/{projectId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    projectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/project/index.ts
var GraphProjectAri = class _GraphProjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._projectId = opts.resourceIdSegmentValues.projectId;
  }
  get activationId() {
    return this._activationId;
  }
  get projectId() {
    return this._projectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphProjectAriStaticOpts.qualifier,
      platformQualifier: graphProjectAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphProjectAriStaticOpts.resourceOwner,
      resourceType: graphProjectAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.projectId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        projectId: opts.projectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphProjectAriStaticOpts);
    return new _GraphProjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphProjectAriStaticOpts);
    return new _GraphProjectAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      projectId: this.projectId
    };
  }
};

// src/graph/pull-request/types.ts
var GraphPullRequestAriResourceOwner = "graph", GraphPullRequestAriResourceType = "pull-request";

// src/graph/pull-request/manifest.ts
var graphPullRequestAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphPullRequestAriResourceOwner,
  resourceType: GraphPullRequestAriResourceType,
  resourceIdSlug: "activation/{activationId}/{pullRequestId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    pullRequestId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/pull-request/index.ts
var GraphPullRequestAri = class _GraphPullRequestAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId;
  }
  get activationId() {
    return this._activationId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphPullRequestAriStaticOpts.qualifier,
      platformQualifier: graphPullRequestAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphPullRequestAriStaticOpts.resourceOwner,
      resourceType: graphPullRequestAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.pullRequestId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        pullRequestId: opts.pullRequestId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphPullRequestAriStaticOpts);
    return new _GraphPullRequestAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphPullRequestAriStaticOpts);
    return new _GraphPullRequestAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      pullRequestId: this.pullRequestId
    };
  }
};

// src/graph/pull-request-history/types.ts
var GraphPullRequestHistoryAriResourceOwner = "graph", GraphPullRequestHistoryAriResourceType = "pull-request-history";

// src/graph/pull-request-history/manifest.ts
var graphPullRequestHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphPullRequestHistoryAriResourceOwner,
  resourceType: GraphPullRequestHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{pullRequestId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    pullRequestId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/pull-request-history/index.ts
var GraphPullRequestHistoryAri = class _GraphPullRequestHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphPullRequestHistoryAriStaticOpts.qualifier,
      platformQualifier: graphPullRequestHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphPullRequestHistoryAriStaticOpts.resourceOwner,
      resourceType: graphPullRequestHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.pullRequestId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        pullRequestId: opts.pullRequestId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphPullRequestHistoryAriStaticOpts);
    return new _GraphPullRequestHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphPullRequestHistoryAriStaticOpts);
    return new _GraphPullRequestHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      pullRequestId: this.pullRequestId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/remote-link/types.ts
var GraphRemoteLinkAriResourceOwner = "graph", GraphRemoteLinkAriResourceType = "remote-link";

// src/graph/remote-link/manifest.ts
var graphRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphRemoteLinkAriResourceOwner,
  resourceType: GraphRemoteLinkAriResourceType,
  resourceIdSlug: "activation/{activationId}/{remoteLinkId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    remoteLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/remote-link/index.ts
var GraphRemoteLinkAri = class _GraphRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._remoteLinkId = opts.resourceIdSegmentValues.remoteLinkId;
  }
  get activationId() {
    return this._activationId;
  }
  get remoteLinkId() {
    return this._remoteLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: graphRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: graphRemoteLinkAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.remoteLinkId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        remoteLinkId: opts.remoteLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphRemoteLinkAriStaticOpts);
    return new _GraphRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphRemoteLinkAriStaticOpts);
    return new _GraphRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      remoteLinkId: this.remoteLinkId
    };
  }
};

// src/graph/remote-link-history/types.ts
var GraphRemoteLinkHistoryAriResourceOwner = "graph", GraphRemoteLinkHistoryAriResourceType = "remote-link-history";

// src/graph/remote-link-history/manifest.ts
var graphRemoteLinkHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphRemoteLinkHistoryAriResourceOwner,
  resourceType: GraphRemoteLinkHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{remoteLinkId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    remoteLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/remote-link-history/index.ts
var GraphRemoteLinkHistoryAri = class _GraphRemoteLinkHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._remoteLinkId = opts.resourceIdSegmentValues.remoteLinkId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get remoteLinkId() {
    return this._remoteLinkId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphRemoteLinkHistoryAriStaticOpts.qualifier,
      platformQualifier: graphRemoteLinkHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphRemoteLinkHistoryAriStaticOpts.resourceOwner,
      resourceType: graphRemoteLinkHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.remoteLinkId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        remoteLinkId: opts.remoteLinkId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphRemoteLinkHistoryAriStaticOpts);
    return new _GraphRemoteLinkHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphRemoteLinkHistoryAriStaticOpts);
    return new _GraphRemoteLinkHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      remoteLinkId: this.remoteLinkId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/repository/types.ts
var GraphRepositoryAriResourceOwner = "graph", GraphRepositoryAriResourceType = "repository";

// src/graph/repository/manifest.ts
var graphRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphRepositoryAriResourceOwner,
  resourceType: GraphRepositoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{repositoryId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/repository/index.ts
var GraphRepositoryAri = class _GraphRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get activationId() {
    return this._activationId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphRepositoryAriStaticOpts.qualifier,
      platformQualifier: graphRepositoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphRepositoryAriStaticOpts.resourceOwner,
      resourceType: graphRepositoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.repositoryId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphRepositoryAriStaticOpts);
    return new _GraphRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphRepositoryAriStaticOpts);
    return new _GraphRepositoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      repositoryId: this.repositoryId
    };
  }
};

// src/graph/security-container/types.ts
var GraphSecurityContainerAriResourceOwner = "graph", GraphSecurityContainerAriResourceType = "security-container";

// src/graph/security-container/manifest.ts
var graphSecurityContainerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphSecurityContainerAriResourceOwner,
  resourceType: GraphSecurityContainerAriResourceType,
  resourceIdSlug: "activation/{activationId}/{providerAppId}/{securityContainerId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/,
    // eslint-disable-line no-useless-escape
    securityContainerId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/security-container/index.ts
var GraphSecurityContainerAri = class _GraphSecurityContainerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._providerAppId = opts.resourceIdSegmentValues.providerAppId, this._securityContainerId = opts.resourceIdSegmentValues.securityContainerId;
  }
  get activationId() {
    return this._activationId;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  get securityContainerId() {
    return this._securityContainerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphSecurityContainerAriStaticOpts.qualifier,
      platformQualifier: graphSecurityContainerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphSecurityContainerAriStaticOpts.resourceOwner,
      resourceType: graphSecurityContainerAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.providerAppId}/${opts.securityContainerId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        providerAppId: opts.providerAppId,
        securityContainerId: opts.securityContainerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphSecurityContainerAriStaticOpts);
    return new _GraphSecurityContainerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphSecurityContainerAriStaticOpts);
    return new _GraphSecurityContainerAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      providerAppId: this.providerAppId,
      securityContainerId: this.securityContainerId
    };
  }
};

// src/graph/security-workspace/types.ts
var GraphSecurityWorkspaceAriResourceOwner = "graph", GraphSecurityWorkspaceAriResourceType = "security-workspace";

// src/graph/security-workspace/manifest.ts
var graphSecurityWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphSecurityWorkspaceAriResourceOwner,
  resourceType: GraphSecurityWorkspaceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{providerAppId}/{securityWorkspaceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/,
    // eslint-disable-line no-useless-escape
    securityWorkspaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/security-workspace/index.ts
var GraphSecurityWorkspaceAri = class _GraphSecurityWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._providerAppId = opts.resourceIdSegmentValues.providerAppId, this._securityWorkspaceId = opts.resourceIdSegmentValues.securityWorkspaceId;
  }
  get activationId() {
    return this._activationId;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  get securityWorkspaceId() {
    return this._securityWorkspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphSecurityWorkspaceAriStaticOpts.qualifier,
      platformQualifier: graphSecurityWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphSecurityWorkspaceAriStaticOpts.resourceOwner,
      resourceType: graphSecurityWorkspaceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.providerAppId}/${opts.securityWorkspaceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        providerAppId: opts.providerAppId,
        securityWorkspaceId: opts.securityWorkspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphSecurityWorkspaceAriStaticOpts);
    return new _GraphSecurityWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphSecurityWorkspaceAriStaticOpts);
    return new _GraphSecurityWorkspaceAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      providerAppId: this.providerAppId,
      securityWorkspaceId: this.securityWorkspaceId
    };
  }
};

// src/graph/service/types.ts
var GraphServiceAriResourceOwner = "graph", GraphServiceAriResourceType = "service";

// src/graph/service/manifest.ts
var graphServiceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphServiceAriResourceOwner,
  resourceType: GraphServiceAriResourceType,
  resourceIdSlug: "{workspaceId}/{serviceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    serviceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/service/index.ts
var GraphServiceAri = class _GraphServiceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._serviceId = opts.resourceIdSegmentValues.serviceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get serviceId() {
    return this._serviceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphServiceAriStaticOpts.qualifier,
      platformQualifier: graphServiceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphServiceAriStaticOpts.resourceOwner,
      resourceType: graphServiceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.serviceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        serviceId: opts.serviceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphServiceAriStaticOpts);
    return new _GraphServiceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphServiceAriStaticOpts);
    return new _GraphServiceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      serviceId: this.serviceId
    };
  }
};

// src/graph/service-and-jira-project-relationship/types.ts
var GraphServiceAndJiraProjectRelationshipAriResourceOwner = "graph", GraphServiceAndJiraProjectRelationshipAriResourceType = "service-and-jira-project-relationship";

// src/graph/service-and-jira-project-relationship/manifest.ts
var graphServiceAndJiraProjectRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphServiceAndJiraProjectRelationshipAriResourceOwner,
  resourceType: GraphServiceAndJiraProjectRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/service-and-jira-project-relationship/index.ts
var GraphServiceAndJiraProjectRelationshipAri = class _GraphServiceAndJiraProjectRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphServiceAndJiraProjectRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphServiceAndJiraProjectRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphServiceAndJiraProjectRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphServiceAndJiraProjectRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphServiceAndJiraProjectRelationshipAriStaticOpts);
    return new _GraphServiceAndJiraProjectRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphServiceAndJiraProjectRelationshipAriStaticOpts);
    return new _GraphServiceAndJiraProjectRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/service-and-operations-team-relationship/types.ts
var GraphServiceAndOperationsTeamRelationshipAriResourceOwner = "graph", GraphServiceAndOperationsTeamRelationshipAriResourceType = "service-and-operations-team-relationship";

// src/graph/service-and-operations-team-relationship/manifest.ts
var graphServiceAndOperationsTeamRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphServiceAndOperationsTeamRelationshipAriResourceOwner,
  resourceType: GraphServiceAndOperationsTeamRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/service-and-operations-team-relationship/index.ts
var GraphServiceAndOperationsTeamRelationshipAri = class _GraphServiceAndOperationsTeamRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphServiceAndOperationsTeamRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphServiceAndOperationsTeamRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphServiceAndOperationsTeamRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphServiceAndOperationsTeamRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphServiceAndOperationsTeamRelationshipAriStaticOpts);
    return new _GraphServiceAndOperationsTeamRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphServiceAndOperationsTeamRelationshipAriStaticOpts);
    return new _GraphServiceAndOperationsTeamRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/service-and-vcs-repository-relationship/types.ts
var GraphServiceAndVcsRepositoryRelationshipAriResourceOwner = "graph", GraphServiceAndVcsRepositoryRelationshipAriResourceType = "service-and-vcs-repository-relationship";

// src/graph/service-and-vcs-repository-relationship/manifest.ts
var graphServiceAndVcsRepositoryRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphServiceAndVcsRepositoryRelationshipAriResourceOwner,
  resourceType: GraphServiceAndVcsRepositoryRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/service-and-vcs-repository-relationship/index.ts
var GraphServiceAndVcsRepositoryRelationshipAri = class _GraphServiceAndVcsRepositoryRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphServiceAndVcsRepositoryRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphServiceAndVcsRepositoryRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphServiceAndVcsRepositoryRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphServiceAndVcsRepositoryRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphServiceAndVcsRepositoryRelationshipAriStaticOpts);
    return new _GraphServiceAndVcsRepositoryRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphServiceAndVcsRepositoryRelationshipAriStaticOpts);
    return new _GraphServiceAndVcsRepositoryRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/service-relationship/types.ts
var GraphServiceRelationshipAriResourceOwner = "graph", GraphServiceRelationshipAriResourceType = "service-relationship";

// src/graph/service-relationship/manifest.ts
var graphServiceRelationshipAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphServiceRelationshipAriResourceOwner,
  resourceType: GraphServiceRelationshipAriResourceType,
  resourceIdSlug: "{workspaceId}/{relationshipId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    relationshipId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/service-relationship/index.ts
var GraphServiceRelationshipAri = class _GraphServiceRelationshipAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._relationshipId = opts.resourceIdSegmentValues.relationshipId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get relationshipId() {
    return this._relationshipId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphServiceRelationshipAriStaticOpts.qualifier,
      platformQualifier: graphServiceRelationshipAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphServiceRelationshipAriStaticOpts.resourceOwner,
      resourceType: graphServiceRelationshipAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.relationshipId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        relationshipId: opts.relationshipId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphServiceRelationshipAriStaticOpts);
    return new _GraphServiceRelationshipAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphServiceRelationshipAriStaticOpts);
    return new _GraphServiceRelationshipAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      relationshipId: this.relationshipId
    };
  }
};

// src/graph/video/types.ts
var GraphVideoAriResourceOwner = "graph", GraphVideoAriResourceType = "video";

// src/graph/video/manifest.ts
var graphVideoAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphVideoAriResourceOwner,
  resourceType: GraphVideoAriResourceType,
  resourceIdSlug: "activation/{activationId}/{entityUUID}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    entityUUID: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/video/index.ts
var GraphVideoAri = class _GraphVideoAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._entityUUID = opts.resourceIdSegmentValues.entityUUID;
  }
  get activationId() {
    return this._activationId;
  }
  get entityUUID() {
    return this._entityUUID;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphVideoAriStaticOpts.qualifier,
      platformQualifier: graphVideoAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphVideoAriStaticOpts.resourceOwner,
      resourceType: graphVideoAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.entityUUID}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        entityUUID: opts.entityUUID
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphVideoAriStaticOpts);
    return new _GraphVideoAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphVideoAriStaticOpts);
    return new _GraphVideoAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      entityUUID: this.entityUUID
    };
  }
};

// src/graph/video-history/types.ts
var GraphVideoHistoryAriResourceOwner = "graph", GraphVideoHistoryAriResourceType = "video-history";

// src/graph/video-history/manifest.ts
var graphVideoHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphVideoHistoryAriResourceOwner,
  resourceType: GraphVideoHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{entityUUID}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    entityUUID: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/video-history/index.ts
var GraphVideoHistoryAri = class _GraphVideoHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._entityUUID = opts.resourceIdSegmentValues.entityUUID, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get entityUUID() {
    return this._entityUUID;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphVideoHistoryAriStaticOpts.qualifier,
      platformQualifier: graphVideoHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphVideoHistoryAriStaticOpts.resourceOwner,
      resourceType: graphVideoHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.entityUUID}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        entityUUID: opts.entityUUID,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphVideoHistoryAriStaticOpts);
    return new _GraphVideoHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphVideoHistoryAriStaticOpts);
    return new _GraphVideoHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      entityUUID: this.entityUUID,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/vulnerability/types.ts
var GraphVulnerabilityAriResourceOwner = "graph", GraphVulnerabilityAriResourceType = "vulnerability";

// src/graph/vulnerability/manifest.ts
var graphVulnerabilityAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphVulnerabilityAriResourceOwner,
  resourceType: GraphVulnerabilityAriResourceType,
  resourceIdSlug: "activation/{activationId}/{vulnerabilityId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    vulnerabilityId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/vulnerability/index.ts
var GraphVulnerabilityAri = class _GraphVulnerabilityAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._vulnerabilityId = opts.resourceIdSegmentValues.vulnerabilityId;
  }
  get activationId() {
    return this._activationId;
  }
  get vulnerabilityId() {
    return this._vulnerabilityId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphVulnerabilityAriStaticOpts.qualifier,
      platformQualifier: graphVulnerabilityAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphVulnerabilityAriStaticOpts.resourceOwner,
      resourceType: graphVulnerabilityAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.vulnerabilityId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        vulnerabilityId: opts.vulnerabilityId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphVulnerabilityAriStaticOpts);
    return new _GraphVulnerabilityAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphVulnerabilityAriStaticOpts);
    return new _GraphVulnerabilityAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      vulnerabilityId: this.vulnerabilityId
    };
  }
};

// src/graph/vulnerability-history/types.ts
var GraphVulnerabilityHistoryAriResourceOwner = "graph", GraphVulnerabilityHistoryAriResourceType = "vulnerability-history";

// src/graph/vulnerability-history/manifest.ts
var graphVulnerabilityHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphVulnerabilityHistoryAriResourceOwner,
  resourceType: GraphVulnerabilityHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{vulnerabilityId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    vulnerabilityId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/vulnerability-history/index.ts
var GraphVulnerabilityHistoryAri = class _GraphVulnerabilityHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._vulnerabilityId = opts.resourceIdSegmentValues.vulnerabilityId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get vulnerabilityId() {
    return this._vulnerabilityId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphVulnerabilityHistoryAriStaticOpts.qualifier,
      platformQualifier: graphVulnerabilityHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphVulnerabilityHistoryAriStaticOpts.resourceOwner,
      resourceType: graphVulnerabilityHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.vulnerabilityId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        vulnerabilityId: opts.vulnerabilityId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphVulnerabilityHistoryAriStaticOpts);
    return new _GraphVulnerabilityHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphVulnerabilityHistoryAriStaticOpts);
    return new _GraphVulnerabilityHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      vulnerabilityId: this.vulnerabilityId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/graph/workspace/types.ts
var GraphWorkspaceAriResourceOwner = "graph", GraphWorkspaceAriResourceType = "workspace";

// src/graph/workspace/manifest.ts
var graphWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: GraphWorkspaceAriResourceOwner,
  resourceType: GraphWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/workspace/index.ts
var GraphWorkspaceAri = class _GraphWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphWorkspaceAriStaticOpts.qualifier,
      platformQualifier: graphWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphWorkspaceAriStaticOpts.resourceOwner,
      resourceType: graphWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphWorkspaceAriStaticOpts);
    return new _GraphWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphWorkspaceAriStaticOpts);
    return new _GraphWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/help/article/types.ts
var HelpArticleAriResourceOwner = "help", HelpArticleAriResourceType = "article";

// src/help/article/manifest.ts
var helpArticleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpArticleAriResourceOwner,
  resourceType: HelpArticleAriResourceType,
  resourceIdSlug: "{activationId}/{helpObjectId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpObjectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/article/index.ts
var HelpArticleAri = class _HelpArticleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpObjectId = opts.resourceIdSegmentValues.helpObjectId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpObjectId() {
    return this._helpObjectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpArticleAriStaticOpts.qualifier,
      platformQualifier: helpArticleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpArticleAriStaticOpts.resourceOwner,
      resourceType: helpArticleAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpObjectId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpObjectId: opts.helpObjectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpArticleAriStaticOpts);
    return new _HelpArticleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpArticleAriStaticOpts);
    return new _HelpArticleAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpObjectId: this.helpObjectId
    };
  }
};

// src/help/channel/types.ts
var HelpChannelAriResourceOwner = "help", HelpChannelAriResourceType = "channel";

// src/help/channel/manifest.ts
var helpChannelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpChannelAriResourceOwner,
  resourceType: HelpChannelAriResourceType,
  resourceIdSlug: "{activationId}/{helpObjectId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpObjectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/channel/index.ts
var HelpChannelAri = class _HelpChannelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpObjectId = opts.resourceIdSegmentValues.helpObjectId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpObjectId() {
    return this._helpObjectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpChannelAriStaticOpts.qualifier,
      platformQualifier: helpChannelAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpChannelAriStaticOpts.resourceOwner,
      resourceType: helpChannelAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpObjectId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpObjectId: opts.helpObjectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpChannelAriStaticOpts);
    return new _HelpChannelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpChannelAriStaticOpts);
    return new _HelpChannelAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpObjectId: this.helpObjectId
    };
  }
};

// src/help/help-center/types.ts
var HelpHelpCenterAriResourceOwner = "help", HelpHelpCenterAriResourceType = "help-center";

// src/help/help-center/manifest.ts
var helpHelpCenterAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpHelpCenterAriResourceOwner,
  resourceType: HelpHelpCenterAriResourceType,
  resourceIdSlug: "{activationId}/{helpCenterId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpCenterId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/help-center/index.ts
var HelpHelpCenterAri = class _HelpHelpCenterAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpCenterId = opts.resourceIdSegmentValues.helpCenterId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpCenterId() {
    return this._helpCenterId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpHelpCenterAriStaticOpts.qualifier,
      platformQualifier: helpHelpCenterAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpHelpCenterAriStaticOpts.resourceOwner,
      resourceType: helpHelpCenterAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpCenterId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpCenterId: opts.helpCenterId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpHelpCenterAriStaticOpts);
    return new _HelpHelpCenterAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpHelpCenterAriStaticOpts);
    return new _HelpHelpCenterAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpCenterId: this.helpCenterId
    };
  }
};

// src/help/help-desk/types.ts
var HelpHelpDeskAriResourceOwner = "help", HelpHelpDeskAriResourceType = "help-desk";

// src/help/help-desk/manifest.ts
var helpHelpDeskAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpHelpDeskAriResourceOwner,
  resourceType: HelpHelpDeskAriResourceType,
  resourceIdSlug: "{activationId}/{helpDeskId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpDeskId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/help-desk/index.ts
var HelpHelpDeskAri = class _HelpHelpDeskAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpDeskId = opts.resourceIdSegmentValues.helpDeskId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpDeskId() {
    return this._helpDeskId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpHelpDeskAriStaticOpts.qualifier,
      platformQualifier: helpHelpDeskAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpHelpDeskAriStaticOpts.resourceOwner,
      resourceType: helpHelpDeskAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpDeskId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpDeskId: opts.helpDeskId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpHelpDeskAriStaticOpts);
    return new _HelpHelpDeskAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpHelpDeskAriStaticOpts);
    return new _HelpHelpDeskAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpDeskId: this.helpDeskId
    };
  }
};

// src/help/layout/types.ts
var HelpLayoutAriResourceOwner = "help", HelpLayoutAriResourceType = "layout";

// src/help/layout/manifest.ts
var helpLayoutAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpLayoutAriResourceOwner,
  resourceType: HelpLayoutAriResourceType,
  resourceIdSlug: "{activationId}/{layoutId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    layoutId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/layout/index.ts
var HelpLayoutAri = class _HelpLayoutAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._layoutId = opts.resourceIdSegmentValues.layoutId;
  }
  get activationId() {
    return this._activationId;
  }
  get layoutId() {
    return this._layoutId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpLayoutAriStaticOpts.qualifier,
      platformQualifier: helpLayoutAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpLayoutAriStaticOpts.resourceOwner,
      resourceType: helpLayoutAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.layoutId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        layoutId: opts.layoutId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpLayoutAriStaticOpts);
    return new _HelpLayoutAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpLayoutAriStaticOpts);
    return new _HelpLayoutAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      layoutId: this.layoutId
    };
  }
};

// src/help/portal/types.ts
var HelpPortalAriResourceOwner = "help", HelpPortalAriResourceType = "portal";

// src/help/portal/manifest.ts
var helpPortalAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpPortalAriResourceOwner,
  resourceType: HelpPortalAriResourceType,
  resourceIdSlug: "{activationId}/{helpObjectId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpObjectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/portal/index.ts
var HelpPortalAri = class _HelpPortalAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpObjectId = opts.resourceIdSegmentValues.helpObjectId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpObjectId() {
    return this._helpObjectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpPortalAriStaticOpts.qualifier,
      platformQualifier: helpPortalAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpPortalAriStaticOpts.resourceOwner,
      resourceType: helpPortalAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpObjectId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpObjectId: opts.helpObjectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpPortalAriStaticOpts);
    return new _HelpPortalAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpPortalAriStaticOpts);
    return new _HelpPortalAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpObjectId: this.helpObjectId
    };
  }
};

// src/help/request-form/types.ts
var HelpRequestFormAriResourceOwner = "help", HelpRequestFormAriResourceType = "request-form";

// src/help/request-form/manifest.ts
var helpRequestFormAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: HelpRequestFormAriResourceOwner,
  resourceType: HelpRequestFormAriResourceType,
  resourceIdSlug: "{activationId}/{helpObjectId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    helpObjectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/help/request-form/index.ts
var HelpRequestFormAri = class _HelpRequestFormAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._helpObjectId = opts.resourceIdSegmentValues.helpObjectId;
  }
  get activationId() {
    return this._activationId;
  }
  get helpObjectId() {
    return this._helpObjectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: helpRequestFormAriStaticOpts.qualifier,
      platformQualifier: helpRequestFormAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: helpRequestFormAriStaticOpts.resourceOwner,
      resourceType: helpRequestFormAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.helpObjectId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        helpObjectId: opts.helpObjectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, helpRequestFormAriStaticOpts);
    return new _HelpRequestFormAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, helpRequestFormAriStaticOpts);
    return new _HelpRequestFormAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      helpObjectId: this.helpObjectId
    };
  }
};

// src/identity/app/types.ts
var IdentityAppAriResourceOwner = "identity", IdentityAppAriResourceType = "app";

// src/identity/app/manifest.ts
var identityAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityAppAriResourceOwner,
  resourceType: IdentityAppAriResourceType,
  resourceIdSlug: "{platform}/{appId}",
  resourceIdSegmentFormats: {
    platform: /(android|ios|macos)/,
    // eslint-disable-line no-useless-escape
    appId: /(([a-zA-Z]+)\.)+([a-zA-Z]+)/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/app/index.ts
var IdentityAppAri = class _IdentityAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._platform = opts.resourceIdSegmentValues.platform, this._appId = opts.resourceIdSegmentValues.appId;
  }
  get platform() {
    return this._platform;
  }
  get appId() {
    return this._appId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityAppAriStaticOpts.qualifier,
      platformQualifier: identityAppAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityAppAriStaticOpts.resourceOwner,
      resourceType: identityAppAriStaticOpts.resourceType,
      resourceId: `${opts.platform}/${opts.appId}`,
      resourceIdSegmentValues: {
        platform: opts.platform,
        appId: opts.appId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityAppAriStaticOpts);
    return new _IdentityAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityAppAriStaticOpts);
    return new _IdentityAppAri(opts);
  }
  getVariables() {
    return {
      platform: this.platform,
      appId: this.appId
    };
  }
};

// src/identity/auth-policy/types.ts
var IdentityAuthPolicyAriResourceOwner = "identity", IdentityAuthPolicyAriResourceType = "auth-policy";

// src/identity/auth-policy/manifest.ts
var identityAuthPolicyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityAuthPolicyAriResourceOwner,
  resourceType: IdentityAuthPolicyAriResourceType,
  resourceIdSlug: "{authPolicyId}",
  resourceIdSegmentFormats: {
    authPolicyId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/auth-policy/index.ts
var IdentityAuthPolicyAri = class _IdentityAuthPolicyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._authPolicyId = opts.resourceIdSegmentValues.authPolicyId;
  }
  get authPolicyId() {
    return this._authPolicyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityAuthPolicyAriStaticOpts.qualifier,
      platformQualifier: identityAuthPolicyAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityAuthPolicyAriStaticOpts.resourceOwner,
      resourceType: identityAuthPolicyAriStaticOpts.resourceType,
      resourceId: `${opts.authPolicyId}`,
      resourceIdSegmentValues: {
        authPolicyId: opts.authPolicyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityAuthPolicyAriStaticOpts);
    return new _IdentityAuthPolicyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityAuthPolicyAriStaticOpts);
    return new _IdentityAuthPolicyAri(opts);
  }
  getVariables() {
    return {
      authPolicyId: this.authPolicyId
    };
  }
};

// src/identity/customer-directory/types.ts
var IdentityCustomerDirectoryAriResourceOwner = "identity", IdentityCustomerDirectoryAriResourceType = "customer-directory";

// src/identity/customer-directory/manifest.ts
var identityCustomerDirectoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityCustomerDirectoryAriResourceOwner,
  resourceType: IdentityCustomerDirectoryAriResourceType,
  resourceIdSlug: "{customerDirectoryId}",
  resourceIdSegmentFormats: {
    customerDirectoryId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/customer-directory/index.ts
var IdentityCustomerDirectoryAri = class _IdentityCustomerDirectoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._customerDirectoryId = opts.resourceIdSegmentValues.customerDirectoryId;
  }
  get customerDirectoryId() {
    return this._customerDirectoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityCustomerDirectoryAriStaticOpts.qualifier,
      platformQualifier: identityCustomerDirectoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityCustomerDirectoryAriStaticOpts.resourceOwner,
      resourceType: identityCustomerDirectoryAriStaticOpts.resourceType,
      resourceId: `${opts.customerDirectoryId}`,
      resourceIdSegmentValues: {
        customerDirectoryId: opts.customerDirectoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityCustomerDirectoryAriStaticOpts);
    return new _IdentityCustomerDirectoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityCustomerDirectoryAriStaticOpts);
    return new _IdentityCustomerDirectoryAri(opts);
  }
  getVariables() {
    return {
      customerDirectoryId: this.customerDirectoryId
    };
  }
};

// src/identity/customer-organization/types.ts
var IdentityCustomerOrganizationAriResourceOwner = "identity", IdentityCustomerOrganizationAriResourceType = "customer-organization";

// src/identity/customer-organization/manifest.ts
var identityCustomerOrganizationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityCustomerOrganizationAriResourceOwner,
  resourceType: IdentityCustomerOrganizationAriResourceType,
  resourceIdSlug: "{customerOrganizationId}",
  resourceIdSegmentFormats: {
    customerOrganizationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/customer-organization/index.ts
var IdentityCustomerOrganizationAri = class _IdentityCustomerOrganizationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._customerOrganizationId = opts.resourceIdSegmentValues.customerOrganizationId;
  }
  get customerOrganizationId() {
    return this._customerOrganizationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityCustomerOrganizationAriStaticOpts.qualifier,
      platformQualifier: identityCustomerOrganizationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityCustomerOrganizationAriStaticOpts.resourceOwner,
      resourceType: identityCustomerOrganizationAriStaticOpts.resourceType,
      resourceId: `${opts.customerOrganizationId}`,
      resourceIdSegmentValues: {
        customerOrganizationId: opts.customerOrganizationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityCustomerOrganizationAriStaticOpts);
    return new _IdentityCustomerOrganizationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityCustomerOrganizationAriStaticOpts);
    return new _IdentityCustomerOrganizationAri(opts);
  }
  getVariables() {
    return {
      customerOrganizationId: this.customerOrganizationId
    };
  }
};

// src/identity/directory/types.ts
var IdentityDirectoryAriResourceOwner = "identity", IdentityDirectoryAriResourceType = "directory";

// src/identity/directory/manifest.ts
var identityDirectoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityDirectoryAriResourceOwner,
  resourceType: IdentityDirectoryAriResourceType,
  resourceIdSlug: "{directoryId}",
  resourceIdSegmentFormats: {
    directoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/directory/index.ts
var IdentityDirectoryAri = class _IdentityDirectoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._directoryId = opts.resourceIdSegmentValues.directoryId;
  }
  get directoryId() {
    return this._directoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityDirectoryAriStaticOpts.qualifier,
      platformQualifier: identityDirectoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityDirectoryAriStaticOpts.resourceOwner,
      resourceType: identityDirectoryAriStaticOpts.resourceType,
      resourceId: `${opts.directoryId}`,
      resourceIdSegmentValues: {
        directoryId: opts.directoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityDirectoryAriStaticOpts);
    return new _IdentityDirectoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityDirectoryAriStaticOpts);
    return new _IdentityDirectoryAri(opts);
  }
  getVariables() {
    return {
      directoryId: this.directoryId
    };
  }
};

// src/identity/domain/types.ts
var IdentityDomainAriResourceOwner = "identity", IdentityDomainAriResourceType = "domain";

// src/identity/domain/manifest.ts
var identityDomainAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityDomainAriResourceOwner,
  resourceType: IdentityDomainAriResourceType,
  resourceIdSlug: "{base64Domain}",
  resourceIdSegmentFormats: {
    base64Domain: /[a-zA-Z0-9=]+={0,1}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/domain/index.ts
var IdentityDomainAri = class _IdentityDomainAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._base64Domain = opts.resourceIdSegmentValues.base64Domain;
  }
  get base64Domain() {
    return this._base64Domain;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityDomainAriStaticOpts.qualifier,
      platformQualifier: identityDomainAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityDomainAriStaticOpts.resourceOwner,
      resourceType: identityDomainAriStaticOpts.resourceType,
      resourceId: `${opts.base64Domain}`,
      resourceIdSegmentValues: {
        base64Domain: opts.base64Domain
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityDomainAriStaticOpts);
    return new _IdentityDomainAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityDomainAriStaticOpts);
    return new _IdentityDomainAri(opts);
  }
  getVariables() {
    return {
      base64Domain: this.base64Domain
    };
  }
};

// src/identity/group/types.ts
var IdentityGroupAriResourceOwner = "identity", IdentityGroupAriResourceType = "group";

// src/identity/group/manifest.ts
var identityGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityGroupAriResourceOwner,
  resourceType: IdentityGroupAriResourceType,
  resourceIdSlug: "{groupId}",
  resourceIdSegmentFormats: {
    groupId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/group/index.ts
var IdentityGroupAri = class _IdentityGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._groupId = opts.resourceIdSegmentValues.groupId;
  }
  get groupId() {
    return this._groupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityGroupAriStaticOpts.qualifier,
      platformQualifier: identityGroupAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityGroupAriStaticOpts.resourceOwner,
      resourceType: identityGroupAriStaticOpts.resourceType,
      resourceId: `${opts.groupId}`,
      resourceIdSegmentValues: {
        groupId: opts.groupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityGroupAriStaticOpts);
    return new _IdentityGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityGroupAriStaticOpts);
    return new _IdentityGroupAri(opts);
  }
  getVariables() {
    return {
      groupId: this.groupId
    };
  }
};

// src/identity/oauthClient/types.ts
var IdentityOauthClientAriResourceOwner = "identity", IdentityOauthClientAriResourceType = "oauthClient";

// src/identity/oauthClient/manifest.ts
var identityOauthClientAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityOauthClientAriResourceOwner,
  resourceType: IdentityOauthClientAriResourceType,
  resourceIdSlug: "{clientId}",
  resourceIdSegmentFormats: {
    clientId: /[0-9a-zA-Z-_]{5,50}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/oauthClient/index.ts
var IdentityOauthClientAri = class _IdentityOauthClientAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._clientId = opts.resourceIdSegmentValues.clientId;
  }
  get clientId() {
    return this._clientId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityOauthClientAriStaticOpts.qualifier,
      platformQualifier: identityOauthClientAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityOauthClientAriStaticOpts.resourceOwner,
      resourceType: identityOauthClientAriStaticOpts.resourceType,
      resourceId: `${opts.clientId}`,
      resourceIdSegmentValues: {
        clientId: opts.clientId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityOauthClientAriStaticOpts);
    return new _IdentityOauthClientAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityOauthClientAriStaticOpts);
    return new _IdentityOauthClientAri(opts);
  }
  getVariables() {
    return {
      clientId: this.clientId
    };
  }
};

// src/identity/role/types.ts
var IdentityRoleAriResourceOwner = "identity", IdentityRoleAriResourceType = "role";

// src/identity/role/manifest.ts
var identityRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]*$"),
  resourceOwner: IdentityRoleAriResourceOwner,
  resourceType: IdentityRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/role/index.ts
var IdentityRoleAri = class _IdentityRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._optionalSiteId = opts.cloudId || "", this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get optionalSiteId() {
    return this._optionalSiteId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityRoleAriStaticOpts.qualifier,
      platformQualifier: identityRoleAriStaticOpts.platformQualifier,
      cloudId: opts.optionalSiteId,
      resourceOwner: identityRoleAriStaticOpts.resourceOwner,
      resourceType: identityRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityRoleAriStaticOpts);
    return new _IdentityRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityRoleAriStaticOpts);
    return new _IdentityRoleAri(opts);
  }
  getVariables() {
    return {
      optionalSiteId: this.optionalSiteId,
      roleId: this.roleId
    };
  }
};

// src/identity/site/types.ts
var IdentitySiteAriResourceOwner = "identity", IdentitySiteAriResourceType = "site";

// src/identity/site/manifest.ts
var identitySiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentitySiteAriResourceOwner,
  resourceType: IdentitySiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/site/index.ts
var IdentitySiteAri = class _IdentitySiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identitySiteAriStaticOpts.qualifier,
      platformQualifier: identitySiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identitySiteAriStaticOpts.resourceOwner,
      resourceType: identitySiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identitySiteAriStaticOpts);
    return new _IdentitySiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identitySiteAriStaticOpts);
    return new _IdentitySiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/identity/team/types.ts
var IdentityTeamAriResourceOwner = "identity", IdentityTeamAriResourceType = "team";

// src/identity/team/manifest.ts
var identityTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityTeamAriResourceOwner,
  resourceType: IdentityTeamAriResourceType,
  resourceIdSlug: "{teamId}",
  resourceIdSegmentFormats: {
    teamId: /[a-zA-Z0-9.\-_~]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/team/index.ts
var IdentityTeamAri = class _IdentityTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId;
  }
  get teamId() {
    return this._teamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityTeamAriStaticOpts.qualifier,
      platformQualifier: identityTeamAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityTeamAriStaticOpts.resourceOwner,
      resourceType: identityTeamAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityTeamAriStaticOpts);
    return new _IdentityTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityTeamAriStaticOpts);
    return new _IdentityTeamAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId
    };
  }
};

// src/identity/team-member/types.ts
var IdentityTeamMemberAriResourceOwner = "identity", IdentityTeamMemberAriResourceType = "team-member";

// src/identity/team-member/manifest.ts
var identityTeamMemberAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityTeamMemberAriResourceOwner,
  resourceType: IdentityTeamMemberAriResourceType,
  resourceIdSlug: "{teamId}/{userId}",
  resourceIdSegmentFormats: {
    teamId: /[a-zA-Z0-9.\-_~]+/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/team-member/index.ts
var IdentityTeamMemberAri = class _IdentityTeamMemberAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId, this._userId = opts.resourceIdSegmentValues.userId;
  }
  get teamId() {
    return this._teamId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityTeamMemberAriStaticOpts.qualifier,
      platformQualifier: identityTeamMemberAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityTeamMemberAriStaticOpts.resourceOwner,
      resourceType: identityTeamMemberAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}/${opts.userId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId,
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityTeamMemberAriStaticOpts);
    return new _IdentityTeamMemberAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityTeamMemberAriStaticOpts);
    return new _IdentityTeamMemberAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId,
      userId: this.userId
    };
  }
};

// src/identity/third-party-group/types.ts
var IdentityThirdPartyGroupAriResourceOwner = "identity", IdentityThirdPartyGroupAriResourceType = "third-party-group";

// src/identity/third-party-group/manifest.ts
var identityThirdPartyGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityThirdPartyGroupAriResourceOwner,
  resourceType: IdentityThirdPartyGroupAriResourceType,
  resourceIdSlug: "{directoryId}/{groupId}",
  resourceIdSegmentFormats: {
    directoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    groupId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/third-party-group/index.ts
var IdentityThirdPartyGroupAri = class _IdentityThirdPartyGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._directoryId = opts.resourceIdSegmentValues.directoryId, this._groupId = opts.resourceIdSegmentValues.groupId;
  }
  get directoryId() {
    return this._directoryId;
  }
  get groupId() {
    return this._groupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityThirdPartyGroupAriStaticOpts.qualifier,
      platformQualifier: identityThirdPartyGroupAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityThirdPartyGroupAriStaticOpts.resourceOwner,
      resourceType: identityThirdPartyGroupAriStaticOpts.resourceType,
      resourceId: `${opts.directoryId}/${opts.groupId}`,
      resourceIdSegmentValues: {
        directoryId: opts.directoryId,
        groupId: opts.groupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityThirdPartyGroupAriStaticOpts);
    return new _IdentityThirdPartyGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityThirdPartyGroupAriStaticOpts);
    return new _IdentityThirdPartyGroupAri(opts);
  }
  getVariables() {
    return {
      directoryId: this.directoryId,
      groupId: this.groupId
    };
  }
};

// src/identity/third-party-user/types.ts
var IdentityThirdPartyUserAriResourceOwner = "identity", IdentityThirdPartyUserAriResourceType = "third-party-user";

// src/identity/third-party-user/manifest.ts
var identityThirdPartyUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityThirdPartyUserAriResourceOwner,
  resourceType: IdentityThirdPartyUserAriResourceType,
  resourceIdSlug: "{directoryId}/{userId}",
  resourceIdSegmentFormats: {
    directoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/third-party-user/index.ts
var IdentityThirdPartyUserAri = class _IdentityThirdPartyUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._directoryId = opts.resourceIdSegmentValues.directoryId, this._userId = opts.resourceIdSegmentValues.userId;
  }
  get directoryId() {
    return this._directoryId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityThirdPartyUserAriStaticOpts.qualifier,
      platformQualifier: identityThirdPartyUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityThirdPartyUserAriStaticOpts.resourceOwner,
      resourceType: identityThirdPartyUserAriStaticOpts.resourceType,
      resourceId: `${opts.directoryId}/${opts.userId}`,
      resourceIdSegmentValues: {
        directoryId: opts.directoryId,
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityThirdPartyUserAriStaticOpts);
    return new _IdentityThirdPartyUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityThirdPartyUserAriStaticOpts);
    return new _IdentityThirdPartyUserAri(opts);
  }
  getVariables() {
    return {
      directoryId: this.directoryId,
      userId: this.userId
    };
  }
};

// src/identity/user/types.ts
var IdentityUserAriResourceOwner = "identity", IdentityUserAriResourceType = "user";

// src/identity/user/manifest.ts
var identityUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityUserAriResourceOwner,
  resourceType: IdentityUserAriResourceType,
  resourceIdSlug: "{userId}",
  resourceIdSegmentFormats: {
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/user/index.ts
var IdentityUserAri = class _IdentityUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityUserAriStaticOpts.qualifier,
      platformQualifier: identityUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityUserAriStaticOpts.resourceOwner,
      resourceType: identityUserAriStaticOpts.resourceType,
      resourceId: `${opts.userId}`,
      resourceIdSegmentValues: {
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityUserAriStaticOpts);
    return new _IdentityUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityUserAriStaticOpts);
    return new _IdentityUserAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId
    };
  }
};

// src/identity/userbase/types.ts
var IdentityUserbaseAriResourceOwner = "identity", IdentityUserbaseAriResourceType = "userbase";

// src/identity/userbase/manifest.ts
var identityUserbaseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityUserbaseAriResourceOwner,
  resourceType: IdentityUserbaseAriResourceType,
  resourceIdSlug: "{userbaseId}",
  resourceIdSegmentFormats: {
    userbaseId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/userbase/index.ts
var IdentityUserbaseAri = class _IdentityUserbaseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userbaseId = opts.resourceIdSegmentValues.userbaseId;
  }
  get userbaseId() {
    return this._userbaseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityUserbaseAriStaticOpts.qualifier,
      platformQualifier: identityUserbaseAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityUserbaseAriStaticOpts.resourceOwner,
      resourceType: identityUserbaseAriStaticOpts.resourceType,
      resourceId: `${opts.userbaseId}`,
      resourceIdSegmentValues: {
        userbaseId: opts.userbaseId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityUserbaseAriStaticOpts);
    return new _IdentityUserbaseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityUserbaseAriStaticOpts);
    return new _IdentityUserbaseAri(opts);
  }
  getVariables() {
    return {
      userbaseId: this.userbaseId
    };
  }
};

// src/identity/userGrant/types.ts
var IdentityUserGrantAriResourceOwner = "identity", IdentityUserGrantAriResourceType = "userGrant";

// src/identity/userGrant/manifest.ts
var identityUserGrantAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: IdentityUserGrantAriResourceOwner,
  resourceType: IdentityUserGrantAriResourceType,
  resourceIdSlug: "{userId}-{clientId}",
  resourceIdSegmentFormats: {
    userId: /[a-zA-Z0-9_\-\:]{1,128}/,
    // eslint-disable-line no-useless-escape
    clientId: /[0-9a-zA-Z-_]{5,50}/
    // eslint-disable-line no-useless-escape
  }
};

// src/identity/userGrant/index.ts
var IdentityUserGrantAri = class _IdentityUserGrantAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId, this._clientId = opts.resourceIdSegmentValues.clientId;
  }
  get userId() {
    return this._userId;
  }
  get clientId() {
    return this._clientId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: identityUserGrantAriStaticOpts.qualifier,
      platformQualifier: identityUserGrantAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: identityUserGrantAriStaticOpts.resourceOwner,
      resourceType: identityUserGrantAriStaticOpts.resourceType,
      resourceId: `${opts.userId}-${opts.clientId}`,
      resourceIdSegmentValues: {
        userId: opts.userId,
        clientId: opts.clientId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, identityUserGrantAriStaticOpts);
    return new _IdentityUserGrantAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, identityUserGrantAriStaticOpts);
    return new _IdentityUserGrantAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId,
      clientId: this.clientId
    };
  }
};

// src/jira/announcement-banner/types.ts
var JiraAnnouncementBannerAriResourceOwner = "jira", JiraAnnouncementBannerAriResourceType = "announcement-banner";

// src/jira/announcement-banner/manifest.ts
var jiraAnnouncementBannerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraAnnouncementBannerAriResourceOwner,
  resourceType: JiraAnnouncementBannerAriResourceType,
  resourceIdSlug: "activation/{activationId}/{announcementBannerHashId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    announcementBannerHashId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/announcement-banner/index.ts
var JiraAnnouncementBannerAri = class _JiraAnnouncementBannerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._announcementBannerHashId = opts.resourceIdSegmentValues.announcementBannerHashId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get announcementBannerHashId() {
    return this._announcementBannerHashId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraAnnouncementBannerAriStaticOpts.qualifier,
      platformQualifier: jiraAnnouncementBannerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraAnnouncementBannerAriStaticOpts.resourceOwner,
      resourceType: jiraAnnouncementBannerAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.announcementBannerHashId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        announcementBannerHashId: opts.announcementBannerHashId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraAnnouncementBannerAriStaticOpts);
    return new _JiraAnnouncementBannerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraAnnouncementBannerAriStaticOpts);
    return new _JiraAnnouncementBannerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      announcementBannerHashId: this.announcementBannerHashId
    };
  }
};

// src/jira/available-fields/types.ts
var JiraAvailableFieldsAriResourceOwner = "jira", JiraAvailableFieldsAriResourceType = "available-fields";

// src/jira/available-fields/manifest.ts
var jiraAvailableFieldsAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraAvailableFieldsAriResourceOwner,
  resourceType: JiraAvailableFieldsAriResourceType,
  resourceIdSlug: "activation/{activationId}/{projectId}/{issueTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    projectId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    issueTypeId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/available-fields/index.ts
var JiraAvailableFieldsAri = class _JiraAvailableFieldsAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._projectId = opts.resourceIdSegmentValues.projectId, this._issueTypeId = opts.resourceIdSegmentValues.issueTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get projectId() {
    return this._projectId;
  }
  get issueTypeId() {
    return this._issueTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraAvailableFieldsAriStaticOpts.qualifier,
      platformQualifier: jiraAvailableFieldsAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraAvailableFieldsAriStaticOpts.resourceOwner,
      resourceType: jiraAvailableFieldsAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.projectId}/${opts.issueTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        projectId: opts.projectId,
        issueTypeId: opts.issueTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraAvailableFieldsAriStaticOpts);
    return new _JiraAvailableFieldsAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraAvailableFieldsAriStaticOpts);
    return new _JiraAvailableFieldsAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      projectId: this.projectId,
      issueTypeId: this.issueTypeId
    };
  }
};

// src/jira/branch/types.ts
var JiraBranchAriResourceOwner = "jira", JiraBranchAriResourceType = "branch";

// src/jira/branch/manifest.ts
var jiraBranchAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraBranchAriResourceOwner,
  resourceType: JiraBranchAriResourceType,
  resourceIdSlug: "activation/{activationId}/{branchId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    branchId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/branch/index.ts
var JiraBranchAri = class _JiraBranchAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._branchId = opts.resourceIdSegmentValues.branchId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get branchId() {
    return this._branchId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraBranchAriStaticOpts.qualifier,
      platformQualifier: jiraBranchAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraBranchAriStaticOpts.resourceOwner,
      resourceType: jiraBranchAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.branchId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        branchId: opts.branchId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraBranchAriStaticOpts);
    return new _JiraBranchAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraBranchAriStaticOpts);
    return new _JiraBranchAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      branchId: this.branchId
    };
  }
};

// src/jira/branch-history/types.ts
var JiraBranchHistoryAriResourceOwner = "jira", JiraBranchHistoryAriResourceType = "branch-history";

// src/jira/branch-history/manifest.ts
var jiraBranchHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraBranchHistoryAriResourceOwner,
  resourceType: JiraBranchHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{branchId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    branchId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/branch-history/index.ts
var JiraBranchHistoryAri = class _JiraBranchHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._branchId = opts.resourceIdSegmentValues.branchId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get branchId() {
    return this._branchId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraBranchHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraBranchHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraBranchHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraBranchHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.branchId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        branchId: opts.branchId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraBranchHistoryAriStaticOpts);
    return new _JiraBranchHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraBranchHistoryAriStaticOpts);
    return new _JiraBranchHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      branchId: this.branchId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/build/types.ts
var JiraBuildAriResourceOwner = "jira", JiraBuildAriResourceType = "build";

// src/jira/build/manifest.ts
var jiraBuildAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraBuildAriResourceOwner,
  resourceType: JiraBuildAriResourceType,
  resourceIdSlug: "activation/{activationId}/{buildId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    buildId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/build/index.ts
var JiraBuildAri = class _JiraBuildAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._buildId = opts.resourceIdSegmentValues.buildId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get buildId() {
    return this._buildId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraBuildAriStaticOpts.qualifier,
      platformQualifier: jiraBuildAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraBuildAriStaticOpts.resourceOwner,
      resourceType: jiraBuildAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.buildId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        buildId: opts.buildId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraBuildAriStaticOpts);
    return new _JiraBuildAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraBuildAriStaticOpts);
    return new _JiraBuildAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      buildId: this.buildId
    };
  }
};

// src/jira/build-history/types.ts
var JiraBuildHistoryAriResourceOwner = "jira", JiraBuildHistoryAriResourceType = "build-history";

// src/jira/build-history/manifest.ts
var jiraBuildHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraBuildHistoryAriResourceOwner,
  resourceType: JiraBuildHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{buildId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    buildId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/build-history/index.ts
var JiraBuildHistoryAri = class _JiraBuildHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._buildId = opts.resourceIdSegmentValues.buildId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get buildId() {
    return this._buildId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraBuildHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraBuildHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraBuildHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraBuildHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.buildId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        buildId: opts.buildId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraBuildHistoryAriStaticOpts);
    return new _JiraBuildHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraBuildHistoryAriStaticOpts);
    return new _JiraBuildHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      buildId: this.buildId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/bulk-operation-task/types.ts
var JiraBulkOperationTaskAriResourceOwner = "jira", JiraBulkOperationTaskAriResourceType = "bulk-operation-task";

// src/jira/bulk-operation-task/manifest.ts
var jiraBulkOperationTaskAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraBulkOperationTaskAriResourceOwner,
  resourceType: JiraBulkOperationTaskAriResourceType,
  resourceIdSlug: "activation/{activationId}/{taskId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    taskId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/bulk-operation-task/index.ts
var JiraBulkOperationTaskAri = class _JiraBulkOperationTaskAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._taskId = opts.resourceIdSegmentValues.taskId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get taskId() {
    return this._taskId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraBulkOperationTaskAriStaticOpts.qualifier,
      platformQualifier: jiraBulkOperationTaskAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraBulkOperationTaskAriStaticOpts.resourceOwner,
      resourceType: jiraBulkOperationTaskAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.taskId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        taskId: opts.taskId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraBulkOperationTaskAriStaticOpts);
    return new _JiraBulkOperationTaskAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraBulkOperationTaskAriStaticOpts);
    return new _JiraBulkOperationTaskAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      taskId: this.taskId
    };
  }
};

// src/jira/comment/types.ts
var JiraCommentAriResourceOwner = "jira", JiraCommentAriResourceType = "comment";

// src/jira/comment/manifest.ts
var jiraCommentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraCommentAriResourceOwner,
  resourceType: JiraCommentAriResourceType,
  resourceIdSlug: "{commentId}",
  resourceIdSegmentFormats: {
    commentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/comment/index.ts
var JiraCommentAri = class _JiraCommentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._commentId = opts.resourceIdSegmentValues.commentId;
  }
  get siteId() {
    return this._siteId;
  }
  get commentId() {
    return this._commentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraCommentAriStaticOpts.qualifier,
      platformQualifier: jiraCommentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraCommentAriStaticOpts.resourceOwner,
      resourceType: jiraCommentAriStaticOpts.resourceType,
      resourceId: `${opts.commentId}`,
      resourceIdSegmentValues: {
        commentId: opts.commentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraCommentAriStaticOpts);
    return new _JiraCommentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraCommentAriStaticOpts);
    return new _JiraCommentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      commentId: this.commentId
    };
  }
};

// src/jira/commit/types.ts
var JiraCommitAriResourceOwner = "jira", JiraCommitAriResourceType = "commit";

// src/jira/commit/manifest.ts
var jiraCommitAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraCommitAriResourceOwner,
  resourceType: JiraCommitAriResourceType,
  resourceIdSlug: "activation/{activationId}/{commitId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    commitId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/commit/index.ts
var JiraCommitAri = class _JiraCommitAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._commitId = opts.resourceIdSegmentValues.commitId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get commitId() {
    return this._commitId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraCommitAriStaticOpts.qualifier,
      platformQualifier: jiraCommitAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraCommitAriStaticOpts.resourceOwner,
      resourceType: jiraCommitAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.commitId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        commitId: opts.commitId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraCommitAriStaticOpts);
    return new _JiraCommitAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraCommitAriStaticOpts);
    return new _JiraCommitAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      commitId: this.commitId
    };
  }
};

// src/jira/component/types.ts
var JiraComponentAriResourceOwner = "jira", JiraComponentAriResourceType = "component";

// src/jira/component/manifest.ts
var jiraComponentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraComponentAriResourceOwner,
  resourceType: JiraComponentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{componentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    componentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/component/index.ts
var JiraComponentAri = class _JiraComponentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._componentId = opts.resourceIdSegmentValues.componentId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get componentId() {
    return this._componentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraComponentAriStaticOpts.qualifier,
      platformQualifier: jiraComponentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraComponentAriStaticOpts.resourceOwner,
      resourceType: jiraComponentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.componentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        componentId: opts.componentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraComponentAriStaticOpts);
    return new _JiraComponentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraComponentAriStaticOpts);
    return new _JiraComponentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      componentId: this.componentId
    };
  }
};

// src/jira/connect-app/types.ts
var JiraConnectAppAriResourceOwner = "jira", JiraConnectAppAriResourceType = "connect-app";

// src/jira/connect-app/manifest.ts
var jiraConnectAppAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraConnectAppAriResourceOwner,
  resourceType: JiraConnectAppAriResourceType,
  resourceIdSlug: "activation/{activationId}/{appKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    appKey: /[a-zA-Z0-9-._]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/connect-app/index.ts
var JiraConnectAppAri = class _JiraConnectAppAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._appKey = opts.resourceIdSegmentValues.appKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get appKey() {
    return this._appKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraConnectAppAriStaticOpts.qualifier,
      platformQualifier: jiraConnectAppAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraConnectAppAriStaticOpts.resourceOwner,
      resourceType: jiraConnectAppAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.appKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        appKey: opts.appKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraConnectAppAriStaticOpts);
    return new _JiraConnectAppAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraConnectAppAriStaticOpts);
    return new _JiraConnectAppAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      appKey: this.appKey
    };
  }
};

// src/jira/dashboard/types.ts
var JiraDashboardAriResourceOwner = "jira", JiraDashboardAriResourceType = "dashboard";

// src/jira/dashboard/manifest.ts
var jiraDashboardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDashboardAriResourceOwner,
  resourceType: JiraDashboardAriResourceType,
  resourceIdSlug: "activation/{activationId}/{dashboardId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    dashboardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/dashboard/index.ts
var JiraDashboardAri = class _JiraDashboardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._dashboardId = opts.resourceIdSegmentValues.dashboardId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get dashboardId() {
    return this._dashboardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDashboardAriStaticOpts.qualifier,
      platformQualifier: jiraDashboardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDashboardAriStaticOpts.resourceOwner,
      resourceType: jiraDashboardAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.dashboardId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        dashboardId: opts.dashboardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDashboardAriStaticOpts);
    return new _JiraDashboardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDashboardAriStaticOpts);
    return new _JiraDashboardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      dashboardId: this.dashboardId
    };
  }
};

// src/jira/deployment/types.ts
var JiraDeploymentAriResourceOwner = "jira", JiraDeploymentAriResourceType = "deployment";

// src/jira/deployment/manifest.ts
var jiraDeploymentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDeploymentAriResourceOwner,
  resourceType: JiraDeploymentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{deploymentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/deployment/index.ts
var JiraDeploymentAri = class _JiraDeploymentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDeploymentAriStaticOpts.qualifier,
      platformQualifier: jiraDeploymentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDeploymentAriStaticOpts.resourceOwner,
      resourceType: jiraDeploymentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.deploymentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        deploymentId: opts.deploymentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDeploymentAriStaticOpts);
    return new _JiraDeploymentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDeploymentAriStaticOpts);
    return new _JiraDeploymentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      deploymentId: this.deploymentId
    };
  }
};

// src/jira/deployment-history/types.ts
var JiraDeploymentHistoryAriResourceOwner = "jira", JiraDeploymentHistoryAriResourceType = "deployment-history";

// src/jira/deployment-history/manifest.ts
var jiraDeploymentHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDeploymentHistoryAriResourceOwner,
  resourceType: JiraDeploymentHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{deploymentId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/deployment-history/index.ts
var JiraDeploymentHistoryAri = class _JiraDeploymentHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDeploymentHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraDeploymentHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDeploymentHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraDeploymentHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.deploymentId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        deploymentId: opts.deploymentId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDeploymentHistoryAriStaticOpts);
    return new _JiraDeploymentHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDeploymentHistoryAriStaticOpts);
    return new _JiraDeploymentHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      deploymentId: this.deploymentId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/design/types.ts
var JiraDesignAriResourceOwner = "jira", JiraDesignAriResourceType = "design";

// src/jira/design/manifest.ts
var jiraDesignAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDesignAriResourceOwner,
  resourceType: JiraDesignAriResourceType,
  resourceIdSlug: "activation/{activationId}/{designId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    designId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/design/index.ts
var JiraDesignAri = class _JiraDesignAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._designId = opts.resourceIdSegmentValues.designId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get designId() {
    return this._designId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDesignAriStaticOpts.qualifier,
      platformQualifier: jiraDesignAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDesignAriStaticOpts.resourceOwner,
      resourceType: jiraDesignAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.designId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        designId: opts.designId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDesignAriStaticOpts);
    return new _JiraDesignAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDesignAriStaticOpts);
    return new _JiraDesignAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      designId: this.designId
    };
  }
};

// src/jira/design-history/types.ts
var JiraDesignHistoryAriResourceOwner = "jira", JiraDesignHistoryAriResourceType = "design-history";

// src/jira/design-history/manifest.ts
var jiraDesignHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDesignHistoryAriResourceOwner,
  resourceType: JiraDesignHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{designId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    designId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/design-history/index.ts
var JiraDesignHistoryAri = class _JiraDesignHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._designId = opts.resourceIdSegmentValues.designId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get designId() {
    return this._designId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDesignHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraDesignHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDesignHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraDesignHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.designId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        designId: opts.designId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDesignHistoryAriStaticOpts);
    return new _JiraDesignHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDesignHistoryAriStaticOpts);
    return new _JiraDesignHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      designId: this.designId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/devops-component/types.ts
var JiraDevopsComponentAriResourceOwner = "jira", JiraDevopsComponentAriResourceType = "devops-component";

// src/jira/devops-component/manifest.ts
var jiraDevopsComponentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDevopsComponentAriResourceOwner,
  resourceType: JiraDevopsComponentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{devopsComponentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    devopsComponentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/devops-component/index.ts
var JiraDevopsComponentAri = class _JiraDevopsComponentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._devopsComponentId = opts.resourceIdSegmentValues.devopsComponentId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get devopsComponentId() {
    return this._devopsComponentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDevopsComponentAriStaticOpts.qualifier,
      platformQualifier: jiraDevopsComponentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDevopsComponentAriStaticOpts.resourceOwner,
      resourceType: jiraDevopsComponentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.devopsComponentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        devopsComponentId: opts.devopsComponentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDevopsComponentAriStaticOpts);
    return new _JiraDevopsComponentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDevopsComponentAriStaticOpts);
    return new _JiraDevopsComponentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      devopsComponentId: this.devopsComponentId
    };
  }
};

// src/jira/document/types.ts
var JiraDocumentAriResourceOwner = "jira", JiraDocumentAriResourceType = "document";

// src/jira/document/manifest.ts
var jiraDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDocumentAriResourceOwner,
  resourceType: JiraDocumentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{documentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    documentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/document/index.ts
var JiraDocumentAri = class _JiraDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._documentId = opts.resourceIdSegmentValues.documentId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get documentId() {
    return this._documentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDocumentAriStaticOpts.qualifier,
      platformQualifier: jiraDocumentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDocumentAriStaticOpts.resourceOwner,
      resourceType: jiraDocumentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.documentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        documentId: opts.documentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDocumentAriStaticOpts);
    return new _JiraDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDocumentAriStaticOpts);
    return new _JiraDocumentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      documentId: this.documentId
    };
  }
};

// src/jira/document-history/types.ts
var JiraDocumentHistoryAriResourceOwner = "jira", JiraDocumentHistoryAriResourceType = "document-history";

// src/jira/document-history/manifest.ts
var jiraDocumentHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraDocumentHistoryAriResourceOwner,
  resourceType: JiraDocumentHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{documentId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    documentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/document-history/index.ts
var JiraDocumentHistoryAri = class _JiraDocumentHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._documentId = opts.resourceIdSegmentValues.documentId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get documentId() {
    return this._documentId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraDocumentHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraDocumentHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraDocumentHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraDocumentHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.documentId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        documentId: opts.documentId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraDocumentHistoryAriStaticOpts);
    return new _JiraDocumentHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraDocumentHistoryAriStaticOpts);
    return new _JiraDocumentHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      documentId: this.documentId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/entitlement/types.ts
var JiraEntitlementAriResourceOwner = "jira", JiraEntitlementAriResourceType = "entitlement";

// src/jira/entitlement/manifest.ts
var jiraEntitlementAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraEntitlementAriResourceOwner,
  resourceType: JiraEntitlementAriResourceType,
  resourceIdSlug: "activation/{activationId}/{entitlementId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    entitlementId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/entitlement/index.ts
var JiraEntitlementAri = class _JiraEntitlementAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._entitlementId = opts.resourceIdSegmentValues.entitlementId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get entitlementId() {
    return this._entitlementId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraEntitlementAriStaticOpts.qualifier,
      platformQualifier: jiraEntitlementAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraEntitlementAriStaticOpts.resourceOwner,
      resourceType: jiraEntitlementAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.entitlementId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        entitlementId: opts.entitlementId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraEntitlementAriStaticOpts);
    return new _JiraEntitlementAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraEntitlementAriStaticOpts);
    return new _JiraEntitlementAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      entitlementId: this.entitlementId
    };
  }
};

// src/jira/entity-property/types.ts
var JiraEntityPropertyAriResourceOwner = "jira", JiraEntityPropertyAriResourceType = "entity-property";

// src/jira/entity-property/manifest.ts
var jiraEntityPropertyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraEntityPropertyAriResourceOwner,
  resourceType: JiraEntityPropertyAriResourceType,
  resourceIdSlug: "activation/{activationId}/{entityType}/{entityId}/{propertyKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    entityType: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    entityId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    propertyKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/entity-property/index.ts
var JiraEntityPropertyAri = class _JiraEntityPropertyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._entityType = opts.resourceIdSegmentValues.entityType, this._entityId = opts.resourceIdSegmentValues.entityId, this._propertyKey = opts.resourceIdSegmentValues.propertyKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get entityType() {
    return this._entityType;
  }
  get entityId() {
    return this._entityId;
  }
  get propertyKey() {
    return this._propertyKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraEntityPropertyAriStaticOpts.qualifier,
      platformQualifier: jiraEntityPropertyAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraEntityPropertyAriStaticOpts.resourceOwner,
      resourceType: jiraEntityPropertyAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.entityType}/${opts.entityId}/${opts.propertyKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        entityType: opts.entityType,
        entityId: opts.entityId,
        propertyKey: opts.propertyKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraEntityPropertyAriStaticOpts);
    return new _JiraEntityPropertyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraEntityPropertyAriStaticOpts);
    return new _JiraEntityPropertyAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      entityType: this.entityType,
      entityId: this.entityId,
      propertyKey: this.propertyKey
    };
  }
};

// src/jira/favourite/types.ts
var JiraFavouriteAriResourceOwner = "jira", JiraFavouriteAriResourceType = "favourite";

// src/jira/favourite/manifest.ts
var jiraFavouriteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraFavouriteAriResourceOwner,
  resourceType: JiraFavouriteAriResourceType,
  resourceIdSlug: "activation/{activationId}/{favouriteId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    favouriteId: /[a-zA-Z0-9_\|\-\:~]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/favourite/index.ts
var JiraFavouriteAri = class _JiraFavouriteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._favouriteId = opts.resourceIdSegmentValues.favouriteId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get favouriteId() {
    return this._favouriteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraFavouriteAriStaticOpts.qualifier,
      platformQualifier: jiraFavouriteAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraFavouriteAriStaticOpts.resourceOwner,
      resourceType: jiraFavouriteAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.favouriteId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        favouriteId: opts.favouriteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraFavouriteAriStaticOpts);
    return new _JiraFavouriteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraFavouriteAriStaticOpts);
    return new _JiraFavouriteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      favouriteId: this.favouriteId
    };
  }
};

// src/jira/feature-flag/types.ts
var JiraFeatureFlagAriResourceOwner = "jira", JiraFeatureFlagAriResourceType = "feature-flag";

// src/jira/feature-flag/manifest.ts
var jiraFeatureFlagAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraFeatureFlagAriResourceOwner,
  resourceType: JiraFeatureFlagAriResourceType,
  resourceIdSlug: "activation/{activationId}/{featureFlagId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    featureFlagId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/feature-flag/index.ts
var JiraFeatureFlagAri = class _JiraFeatureFlagAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._featureFlagId = opts.resourceIdSegmentValues.featureFlagId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get featureFlagId() {
    return this._featureFlagId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraFeatureFlagAriStaticOpts.qualifier,
      platformQualifier: jiraFeatureFlagAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraFeatureFlagAriStaticOpts.resourceOwner,
      resourceType: jiraFeatureFlagAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.featureFlagId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        featureFlagId: opts.featureFlagId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraFeatureFlagAriStaticOpts);
    return new _JiraFeatureFlagAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraFeatureFlagAriStaticOpts);
    return new _JiraFeatureFlagAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      featureFlagId: this.featureFlagId
    };
  }
};

// src/jira/feature-flag-history/types.ts
var JiraFeatureFlagHistoryAriResourceOwner = "jira", JiraFeatureFlagHistoryAriResourceType = "feature-flag-history";

// src/jira/feature-flag-history/manifest.ts
var jiraFeatureFlagHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraFeatureFlagHistoryAriResourceOwner,
  resourceType: JiraFeatureFlagHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{featureFlagId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    featureFlagId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/feature-flag-history/index.ts
var JiraFeatureFlagHistoryAri = class _JiraFeatureFlagHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._featureFlagId = opts.resourceIdSegmentValues.featureFlagId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get featureFlagId() {
    return this._featureFlagId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraFeatureFlagHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraFeatureFlagHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraFeatureFlagHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraFeatureFlagHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.featureFlagId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        featureFlagId: opts.featureFlagId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraFeatureFlagHistoryAriStaticOpts);
    return new _JiraFeatureFlagHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraFeatureFlagHistoryAriStaticOpts);
    return new _JiraFeatureFlagHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      featureFlagId: this.featureFlagId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/filter/types.ts
var JiraFilterAriResourceOwner = "jira", JiraFilterAriResourceType = "filter";

// src/jira/filter/manifest.ts
var jiraFilterAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraFilterAriResourceOwner,
  resourceType: JiraFilterAriResourceType,
  resourceIdSlug: "activation/{activationId}/{filterId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    filterId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/filter/index.ts
var JiraFilterAri = class _JiraFilterAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._filterId = opts.resourceIdSegmentValues.filterId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get filterId() {
    return this._filterId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraFilterAriStaticOpts.qualifier,
      platformQualifier: jiraFilterAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraFilterAriStaticOpts.resourceOwner,
      resourceType: jiraFilterAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.filterId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        filterId: opts.filterId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraFilterAriStaticOpts);
    return new _JiraFilterAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraFilterAriStaticOpts);
    return new _JiraFilterAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      filterId: this.filterId
    };
  }
};

// src/jira/filter-email-subscription/types.ts
var JiraFilterEmailSubscriptionAriResourceOwner = "jira", JiraFilterEmailSubscriptionAriResourceType = "filter-email-subscription";

// src/jira/filter-email-subscription/manifest.ts
var jiraFilterEmailSubscriptionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraFilterEmailSubscriptionAriResourceOwner,
  resourceType: JiraFilterEmailSubscriptionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{filterEmailSubscriptionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    filterEmailSubscriptionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/filter-email-subscription/index.ts
var JiraFilterEmailSubscriptionAri = class _JiraFilterEmailSubscriptionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._filterEmailSubscriptionId = opts.resourceIdSegmentValues.filterEmailSubscriptionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get filterEmailSubscriptionId() {
    return this._filterEmailSubscriptionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraFilterEmailSubscriptionAriStaticOpts.qualifier,
      platformQualifier: jiraFilterEmailSubscriptionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraFilterEmailSubscriptionAriStaticOpts.resourceOwner,
      resourceType: jiraFilterEmailSubscriptionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.filterEmailSubscriptionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        filterEmailSubscriptionId: opts.filterEmailSubscriptionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraFilterEmailSubscriptionAriStaticOpts);
    return new _JiraFilterEmailSubscriptionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraFilterEmailSubscriptionAriStaticOpts);
    return new _JiraFilterEmailSubscriptionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      filterEmailSubscriptionId: this.filterEmailSubscriptionId
    };
  }
};

// src/jira/incident/types.ts
var JiraIncidentAriResourceOwner = "jira", JiraIncidentAriResourceType = "incident";

// src/jira/incident/manifest.ts
var jiraIncidentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIncidentAriResourceOwner,
  resourceType: JiraIncidentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{incidentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/incident/index.ts
var JiraIncidentAri = class _JiraIncidentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._incidentId = opts.resourceIdSegmentValues.incidentId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get incidentId() {
    return this._incidentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIncidentAriStaticOpts.qualifier,
      platformQualifier: jiraIncidentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIncidentAriStaticOpts.resourceOwner,
      resourceType: jiraIncidentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.incidentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        incidentId: opts.incidentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIncidentAriStaticOpts);
    return new _JiraIncidentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIncidentAriStaticOpts);
    return new _JiraIncidentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      incidentId: this.incidentId
    };
  }
};

// src/jira/incident-history/types.ts
var JiraIncidentHistoryAriResourceOwner = "jira", JiraIncidentHistoryAriResourceType = "incident-history";

// src/jira/incident-history/manifest.ts
var jiraIncidentHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIncidentHistoryAriResourceOwner,
  resourceType: JiraIncidentHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{incidentId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/incident-history/index.ts
var JiraIncidentHistoryAri = class _JiraIncidentHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._incidentId = opts.resourceIdSegmentValues.incidentId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get incidentId() {
    return this._incidentId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIncidentHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraIncidentHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIncidentHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraIncidentHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.incidentId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        incidentId: opts.incidentId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIncidentHistoryAriStaticOpts);
    return new _JiraIncidentHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIncidentHistoryAriStaticOpts);
    return new _JiraIncidentHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      incidentId: this.incidentId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/issue/types.ts
var JiraIssueAriResourceOwner = "jira", JiraIssueAriResourceType = "issue";

// src/jira/issue/manifest.ts
var jiraIssueAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueAriResourceOwner,
  resourceType: JiraIssueAriResourceType,
  resourceIdSlug: "{issueId}",
  resourceIdSegmentFormats: {
    issueId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue/index.ts
var JiraIssueAri = class _JiraIssueAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._issueId = opts.resourceIdSegmentValues.issueId;
  }
  get siteId() {
    return this._siteId;
  }
  get issueId() {
    return this._issueId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueAriStaticOpts.qualifier,
      platformQualifier: jiraIssueAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueAriStaticOpts.resourceOwner,
      resourceType: jiraIssueAriStaticOpts.resourceType,
      resourceId: `${opts.issueId}`,
      resourceIdSegmentValues: {
        issueId: opts.issueId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueAriStaticOpts);
    return new _JiraIssueAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueAriStaticOpts);
    return new _JiraIssueAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      issueId: this.issueId
    };
  }
};

// src/jira/issue-attachment/types.ts
var JiraIssueAttachmentAriResourceOwner = "jira", JiraIssueAttachmentAriResourceType = "issue-attachment";

// src/jira/issue-attachment/manifest.ts
var jiraIssueAttachmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueAttachmentAriResourceOwner,
  resourceType: JiraIssueAttachmentAriResourceType,
  resourceIdSlug: "{issueId}/{attachmentId}",
  resourceIdSegmentFormats: {
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    attachmentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-attachment/index.ts
var JiraIssueAttachmentAri = class _JiraIssueAttachmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._issueId = opts.resourceIdSegmentValues.issueId, this._attachmentId = opts.resourceIdSegmentValues.attachmentId;
  }
  get siteId() {
    return this._siteId;
  }
  get issueId() {
    return this._issueId;
  }
  get attachmentId() {
    return this._attachmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueAttachmentAriStaticOpts.qualifier,
      platformQualifier: jiraIssueAttachmentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueAttachmentAriStaticOpts.resourceOwner,
      resourceType: jiraIssueAttachmentAriStaticOpts.resourceType,
      resourceId: `${opts.issueId}/${opts.attachmentId}`,
      resourceIdSegmentValues: {
        issueId: opts.issueId,
        attachmentId: opts.attachmentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueAttachmentAriStaticOpts);
    return new _JiraIssueAttachmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueAttachmentAriStaticOpts);
    return new _JiraIssueAttachmentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      issueId: this.issueId,
      attachmentId: this.attachmentId
    };
  }
};

// src/jira/issue-comment/types.ts
var JiraIssueCommentAriResourceOwner = "jira", JiraIssueCommentAriResourceType = "issue-comment";

// src/jira/issue-comment/manifest.ts
var jiraIssueCommentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueCommentAriResourceOwner,
  resourceType: JiraIssueCommentAriResourceType,
  resourceIdSlug: "{issueId}/{commentId}",
  resourceIdSegmentFormats: {
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    commentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-comment/index.ts
var JiraIssueCommentAri = class _JiraIssueCommentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._issueId = opts.resourceIdSegmentValues.issueId, this._commentId = opts.resourceIdSegmentValues.commentId;
  }
  get siteId() {
    return this._siteId;
  }
  get issueId() {
    return this._issueId;
  }
  get commentId() {
    return this._commentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueCommentAriStaticOpts.qualifier,
      platformQualifier: jiraIssueCommentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueCommentAriStaticOpts.resourceOwner,
      resourceType: jiraIssueCommentAriStaticOpts.resourceType,
      resourceId: `${opts.issueId}/${opts.commentId}`,
      resourceIdSegmentValues: {
        issueId: opts.issueId,
        commentId: opts.commentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueCommentAriStaticOpts);
    return new _JiraIssueCommentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueCommentAriStaticOpts);
    return new _JiraIssueCommentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      issueId: this.issueId,
      commentId: this.commentId
    };
  }
};

// src/jira/issue-field-metadata/types.ts
var JiraIssueFieldMetadataAriResourceOwner = "jira", JiraIssueFieldMetadataAriResourceType = "issue-field-metadata";

// src/jira/issue-field-metadata/manifest.ts
var jiraIssueFieldMetadataAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueFieldMetadataAriResourceOwner,
  resourceType: JiraIssueFieldMetadataAriResourceType,
  resourceIdSlug: "activation/{activationId}/{fieldId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    fieldId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-field-metadata/index.ts
var JiraIssueFieldMetadataAri = class _JiraIssueFieldMetadataAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._fieldId = opts.resourceIdSegmentValues.fieldId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get fieldId() {
    return this._fieldId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueFieldMetadataAriStaticOpts.qualifier,
      platformQualifier: jiraIssueFieldMetadataAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueFieldMetadataAriStaticOpts.resourceOwner,
      resourceType: jiraIssueFieldMetadataAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.fieldId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        fieldId: opts.fieldId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueFieldMetadataAriStaticOpts);
    return new _JiraIssueFieldMetadataAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueFieldMetadataAriStaticOpts);
    return new _JiraIssueFieldMetadataAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      fieldId: this.fieldId
    };
  }
};

// src/jira/issue-field-option/types.ts
var JiraIssueFieldOptionAriResourceOwner = "jira", JiraIssueFieldOptionAriResourceType = "issue-field-option";

// src/jira/issue-field-option/manifest.ts
var jiraIssueFieldOptionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueFieldOptionAriResourceOwner,
  resourceType: JiraIssueFieldOptionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{fieldId}/{optionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    fieldId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    optionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-field-option/index.ts
var JiraIssueFieldOptionAri = class _JiraIssueFieldOptionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._fieldId = opts.resourceIdSegmentValues.fieldId, this._optionId = opts.resourceIdSegmentValues.optionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get fieldId() {
    return this._fieldId;
  }
  get optionId() {
    return this._optionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueFieldOptionAriStaticOpts.qualifier,
      platformQualifier: jiraIssueFieldOptionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueFieldOptionAriStaticOpts.resourceOwner,
      resourceType: jiraIssueFieldOptionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.fieldId}/${opts.optionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        fieldId: opts.fieldId,
        optionId: opts.optionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueFieldOptionAriStaticOpts);
    return new _JiraIssueFieldOptionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueFieldOptionAriStaticOpts);
    return new _JiraIssueFieldOptionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      fieldId: this.fieldId,
      optionId: this.optionId
    };
  }
};

// src/jira/issue-history/types.ts
var JiraIssueHistoryAriResourceOwner = "jira", JiraIssueHistoryAriResourceType = "issue-history";

// src/jira/issue-history/manifest.ts
var jiraIssueHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueHistoryAriResourceOwner,
  resourceType: JiraIssueHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueId}/{changeGroupId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    changeGroupId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-history/index.ts
var JiraIssueHistoryAri = class _JiraIssueHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueId = opts.resourceIdSegmentValues.issueId, this._changeGroupId = opts.resourceIdSegmentValues.changeGroupId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueId() {
    return this._issueId;
  }
  get changeGroupId() {
    return this._changeGroupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraIssueHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraIssueHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueId}/${opts.changeGroupId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueId: opts.issueId,
        changeGroupId: opts.changeGroupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueHistoryAriStaticOpts);
    return new _JiraIssueHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueHistoryAriStaticOpts);
    return new _JiraIssueHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueId: this.issueId,
      changeGroupId: this.changeGroupId
    };
  }
};

// src/jira/issue-link/types.ts
var JiraIssueLinkAriResourceOwner = "jira", JiraIssueLinkAriResourceType = "issue-link";

// src/jira/issue-link/manifest.ts
var jiraIssueLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueLinkAriResourceOwner,
  resourceType: JiraIssueLinkAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueId}/{linkId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    linkId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-link/index.ts
var JiraIssueLinkAri = class _JiraIssueLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueId = opts.resourceIdSegmentValues.issueId, this._linkId = opts.resourceIdSegmentValues.linkId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueId() {
    return this._issueId;
  }
  get linkId() {
    return this._linkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueLinkAriStaticOpts.qualifier,
      platformQualifier: jiraIssueLinkAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueLinkAriStaticOpts.resourceOwner,
      resourceType: jiraIssueLinkAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueId}/${opts.linkId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueId: opts.issueId,
        linkId: opts.linkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueLinkAriStaticOpts);
    return new _JiraIssueLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueLinkAriStaticOpts);
    return new _JiraIssueLinkAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueId: this.issueId,
      linkId: this.linkId
    };
  }
};

// src/jira/issue-link-type/types.ts
var JiraIssueLinkTypeAriResourceOwner = "jira", JiraIssueLinkTypeAriResourceType = "issue-link-type";

// src/jira/issue-link-type/manifest.ts
var jiraIssueLinkTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueLinkTypeAriResourceOwner,
  resourceType: JiraIssueLinkTypeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueLinkTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueLinkTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-link-type/index.ts
var JiraIssueLinkTypeAri = class _JiraIssueLinkTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueLinkTypeId = opts.resourceIdSegmentValues.issueLinkTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueLinkTypeId() {
    return this._issueLinkTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueLinkTypeAriStaticOpts.qualifier,
      platformQualifier: jiraIssueLinkTypeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueLinkTypeAriStaticOpts.resourceOwner,
      resourceType: jiraIssueLinkTypeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueLinkTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueLinkTypeId: opts.issueLinkTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueLinkTypeAriStaticOpts);
    return new _JiraIssueLinkTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueLinkTypeAriStaticOpts);
    return new _JiraIssueLinkTypeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueLinkTypeId: this.issueLinkTypeId
    };
  }
};

// src/jira/issue-remote-link/types.ts
var JiraIssueRemoteLinkAriResourceOwner = "jira", JiraIssueRemoteLinkAriResourceType = "issue-remote-link";

// src/jira/issue-remote-link/manifest.ts
var jiraIssueRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueRemoteLinkAriResourceOwner,
  resourceType: JiraIssueRemoteLinkAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueId}/{linkId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    linkId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-remote-link/index.ts
var JiraIssueRemoteLinkAri = class _JiraIssueRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueId = opts.resourceIdSegmentValues.issueId, this._linkId = opts.resourceIdSegmentValues.linkId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueId() {
    return this._issueId;
  }
  get linkId() {
    return this._linkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: jiraIssueRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: jiraIssueRemoteLinkAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueId}/${opts.linkId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueId: opts.issueId,
        linkId: opts.linkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueRemoteLinkAriStaticOpts);
    return new _JiraIssueRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueRemoteLinkAriStaticOpts);
    return new _JiraIssueRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueId: this.issueId,
      linkId: this.linkId
    };
  }
};

// src/jira/issue-search-view/types.ts
var JiraIssueSearchViewAriResourceOwner = "jira", JiraIssueSearchViewAriResourceType = "issue-search-view";

// src/jira/issue-search-view/manifest.ts
var jiraIssueSearchViewAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueSearchViewAriResourceOwner,
  resourceType: JiraIssueSearchViewAriResourceType,
  resourceIdSlug: "activation/{activationId}/{namespaceId}/{viewId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    namespaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    viewId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-search-view/index.ts
var JiraIssueSearchViewAri = class _JiraIssueSearchViewAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._namespaceId = opts.resourceIdSegmentValues.namespaceId, this._viewId = opts.resourceIdSegmentValues.viewId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get namespaceId() {
    return this._namespaceId;
  }
  get viewId() {
    return this._viewId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueSearchViewAriStaticOpts.qualifier,
      platformQualifier: jiraIssueSearchViewAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueSearchViewAriStaticOpts.resourceOwner,
      resourceType: jiraIssueSearchViewAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.namespaceId}/${opts.viewId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        namespaceId: opts.namespaceId,
        viewId: opts.viewId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueSearchViewAriStaticOpts);
    return new _JiraIssueSearchViewAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueSearchViewAriStaticOpts);
    return new _JiraIssueSearchViewAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      namespaceId: this.namespaceId,
      viewId: this.viewId
    };
  }
};

// src/jira/issue-status/types.ts
var JiraIssueStatusAriResourceOwner = "jira", JiraIssueStatusAriResourceType = "issue-status";

// src/jira/issue-status/manifest.ts
var jiraIssueStatusAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueStatusAriResourceOwner,
  resourceType: JiraIssueStatusAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issuestatusId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issuestatusId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-status/index.ts
var JiraIssueStatusAri = class _JiraIssueStatusAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issuestatusId = opts.resourceIdSegmentValues.issuestatusId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issuestatusId() {
    return this._issuestatusId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueStatusAriStaticOpts.qualifier,
      platformQualifier: jiraIssueStatusAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueStatusAriStaticOpts.resourceOwner,
      resourceType: jiraIssueStatusAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issuestatusId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issuestatusId: opts.issuestatusId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueStatusAriStaticOpts);
    return new _JiraIssueStatusAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueStatusAriStaticOpts);
    return new _JiraIssueStatusAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issuestatusId: this.issuestatusId
    };
  }
};

// src/jira/issue-type/types.ts
var JiraIssueTypeAriResourceOwner = "jira", JiraIssueTypeAriResourceType = "issue-type";

// src/jira/issue-type/manifest.ts
var jiraIssueTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueTypeAriResourceOwner,
  resourceType: JiraIssueTypeAriResourceType,
  resourceIdSlug: "{issueTypeId}",
  resourceIdSegmentFormats: {
    issueTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-type/index.ts
var JiraIssueTypeAri = class _JiraIssueTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._issueTypeId = opts.resourceIdSegmentValues.issueTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get issueTypeId() {
    return this._issueTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueTypeAriStaticOpts.qualifier,
      platformQualifier: jiraIssueTypeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueTypeAriStaticOpts.resourceOwner,
      resourceType: jiraIssueTypeAriStaticOpts.resourceType,
      resourceId: `${opts.issueTypeId}`,
      resourceIdSegmentValues: {
        issueTypeId: opts.issueTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueTypeAriStaticOpts);
    return new _JiraIssueTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueTypeAriStaticOpts);
    return new _JiraIssueTypeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      issueTypeId: this.issueTypeId
    };
  }
};

// src/jira/issue-type-scheme/types.ts
var JiraIssueTypeSchemeAriResourceOwner = "jira", JiraIssueTypeSchemeAriResourceType = "issue-type-scheme";

// src/jira/issue-type-scheme/manifest.ts
var jiraIssueTypeSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueTypeSchemeAriResourceOwner,
  resourceType: JiraIssueTypeSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueTypeSchemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueTypeSchemeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-type-scheme/index.ts
var JiraIssueTypeSchemeAri = class _JiraIssueTypeSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueTypeSchemeId = opts.resourceIdSegmentValues.issueTypeSchemeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueTypeSchemeId() {
    return this._issueTypeSchemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueTypeSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraIssueTypeSchemeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueTypeSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraIssueTypeSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueTypeSchemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueTypeSchemeId: opts.issueTypeSchemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueTypeSchemeAriStaticOpts);
    return new _JiraIssueTypeSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueTypeSchemeAriStaticOpts);
    return new _JiraIssueTypeSchemeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueTypeSchemeId: this.issueTypeSchemeId
    };
  }
};

// src/jira/issue-type-scheme-mapping/types.ts
var JiraIssueTypeSchemeMappingAriResourceOwner = "jira", JiraIssueTypeSchemeMappingAriResourceType = "issue-type-scheme-mapping";

// src/jira/issue-type-scheme-mapping/manifest.ts
var jiraIssueTypeSchemeMappingAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueTypeSchemeMappingAriResourceOwner,
  resourceType: JiraIssueTypeSchemeMappingAriResourceType,
  resourceIdSlug: "activation/{activationId}/{issueTypeSchemeId}/{issueTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    issueTypeSchemeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    issueTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-type-scheme-mapping/index.ts
var JiraIssueTypeSchemeMappingAri = class _JiraIssueTypeSchemeMappingAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._issueTypeSchemeId = opts.resourceIdSegmentValues.issueTypeSchemeId, this._issueTypeId = opts.resourceIdSegmentValues.issueTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get issueTypeSchemeId() {
    return this._issueTypeSchemeId;
  }
  get issueTypeId() {
    return this._issueTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueTypeSchemeMappingAriStaticOpts.qualifier,
      platformQualifier: jiraIssueTypeSchemeMappingAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueTypeSchemeMappingAriStaticOpts.resourceOwner,
      resourceType: jiraIssueTypeSchemeMappingAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.issueTypeSchemeId}/${opts.issueTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        issueTypeSchemeId: opts.issueTypeSchemeId,
        issueTypeId: opts.issueTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueTypeSchemeMappingAriStaticOpts);
    return new _JiraIssueTypeSchemeMappingAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueTypeSchemeMappingAriStaticOpts);
    return new _JiraIssueTypeSchemeMappingAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      issueTypeSchemeId: this.issueTypeSchemeId,
      issueTypeId: this.issueTypeId
    };
  }
};

// src/jira/issue-worklog/types.ts
var JiraIssueWorklogAriResourceOwner = "jira", JiraIssueWorklogAriResourceType = "issue-worklog";

// src/jira/issue-worklog/manifest.ts
var jiraIssueWorklogAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssueWorklogAriResourceOwner,
  resourceType: JiraIssueWorklogAriResourceType,
  resourceIdSlug: "{issueId}/{worklogId}",
  resourceIdSegmentFormats: {
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    worklogId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issue-worklog/index.ts
var JiraIssueWorklogAri = class _JiraIssueWorklogAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._issueId = opts.resourceIdSegmentValues.issueId, this._worklogId = opts.resourceIdSegmentValues.worklogId;
  }
  get siteId() {
    return this._siteId;
  }
  get issueId() {
    return this._issueId;
  }
  get worklogId() {
    return this._worklogId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssueWorklogAriStaticOpts.qualifier,
      platformQualifier: jiraIssueWorklogAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssueWorklogAriStaticOpts.resourceOwner,
      resourceType: jiraIssueWorklogAriStaticOpts.resourceType,
      resourceId: `${opts.issueId}/${opts.worklogId}`,
      resourceIdSegmentValues: {
        issueId: opts.issueId,
        worklogId: opts.worklogId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssueWorklogAriStaticOpts);
    return new _JiraIssueWorklogAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssueWorklogAriStaticOpts);
    return new _JiraIssueWorklogAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      issueId: this.issueId,
      worklogId: this.worklogId
    };
  }
};

// src/jira/issuefieldvalue/types.ts
var JiraIssuefieldvalueAriResourceOwner = "jira", JiraIssuefieldvalueAriResourceType = "issuefieldvalue";

// src/jira/issuefieldvalue/manifest.ts
var jiraIssuefieldvalueAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraIssuefieldvalueAriResourceOwner,
  resourceType: JiraIssuefieldvalueAriResourceType,
  resourceIdSlug: "{issueId}/{fieldId}",
  resourceIdSegmentFormats: {
    issueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    fieldId: /[a-zA-Z0-9_\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/issuefieldvalue/index.ts
var JiraIssuefieldvalueAri = class _JiraIssuefieldvalueAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._issueId = opts.resourceIdSegmentValues.issueId, this._fieldId = opts.resourceIdSegmentValues.fieldId;
  }
  get siteId() {
    return this._siteId;
  }
  get issueId() {
    return this._issueId;
  }
  get fieldId() {
    return this._fieldId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraIssuefieldvalueAriStaticOpts.qualifier,
      platformQualifier: jiraIssuefieldvalueAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraIssuefieldvalueAriStaticOpts.resourceOwner,
      resourceType: jiraIssuefieldvalueAriStaticOpts.resourceType,
      resourceId: `${opts.issueId}/${opts.fieldId}`,
      resourceIdSegmentValues: {
        issueId: opts.issueId,
        fieldId: opts.fieldId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraIssuefieldvalueAriStaticOpts);
    return new _JiraIssuefieldvalueAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraIssuefieldvalueAriStaticOpts);
    return new _JiraIssuefieldvalueAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      issueId: this.issueId,
      fieldId: this.fieldId
    };
  }
};

// src/jira/navigation-config/types.ts
var JiraNavigationConfigAriResourceOwner = "jira", JiraNavigationConfigAriResourceType = "navigation-config";

// src/jira/navigation-config/manifest.ts
var jiraNavigationConfigAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraNavigationConfigAriResourceOwner,
  resourceType: JiraNavigationConfigAriResourceType,
  resourceIdSlug: "activation/{activationId}/{userId}/{navKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/,
    // eslint-disable-line no-useless-escape
    navKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/navigation-config/index.ts
var JiraNavigationConfigAri = class _JiraNavigationConfigAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._userId = opts.resourceIdSegmentValues.userId, this._navKey = opts.resourceIdSegmentValues.navKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get userId() {
    return this._userId;
  }
  get navKey() {
    return this._navKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNavigationConfigAriStaticOpts.qualifier,
      platformQualifier: jiraNavigationConfigAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraNavigationConfigAriStaticOpts.resourceOwner,
      resourceType: jiraNavigationConfigAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.userId}/${opts.navKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        userId: opts.userId,
        navKey: opts.navKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNavigationConfigAriStaticOpts);
    return new _JiraNavigationConfigAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNavigationConfigAriStaticOpts);
    return new _JiraNavigationConfigAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      userId: this.userId,
      navKey: this.navKey
    };
  }
};

// src/jira/navigation-item/types.ts
var JiraNavigationItemAriResourceOwner = "jira", JiraNavigationItemAriResourceType = "navigation-item";

// src/jira/navigation-item/manifest.ts
var jiraNavigationItemAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraNavigationItemAriResourceOwner,
  resourceType: JiraNavigationItemAriResourceType,
  resourceIdSlug: "activation/{activationId}/{scopeType}/{scopeId}/{itemId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scopeType: /(?:project|board|global)/,
    // eslint-disable-line no-useless-escape
    scopeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    itemId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/navigation-item/index.ts
var JiraNavigationItemAri = class _JiraNavigationItemAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._scopeType = opts.resourceIdSegmentValues.scopeType, this._scopeId = opts.resourceIdSegmentValues.scopeId, this._itemId = opts.resourceIdSegmentValues.itemId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get scopeType() {
    return this._scopeType;
  }
  get scopeId() {
    return this._scopeId;
  }
  get itemId() {
    return this._itemId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNavigationItemAriStaticOpts.qualifier,
      platformQualifier: jiraNavigationItemAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraNavigationItemAriStaticOpts.resourceOwner,
      resourceType: jiraNavigationItemAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.scopeType}/${opts.scopeId}/${opts.itemId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        scopeType: opts.scopeType,
        scopeId: opts.scopeId,
        itemId: opts.itemId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNavigationItemAriStaticOpts);
    return new _JiraNavigationItemAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNavigationItemAriStaticOpts);
    return new _JiraNavigationItemAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      scopeType: this.scopeType,
      scopeId: this.scopeId,
      itemId: this.itemId
    };
  }
};

// src/jira/notification-type/types.ts
var JiraNotificationTypeAriResourceOwner = "jira", JiraNotificationTypeAriResourceType = "notification-type";

// src/jira/notification-type/manifest.ts
var jiraNotificationTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraNotificationTypeAriResourceOwner,
  resourceType: JiraNotificationTypeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{notificationTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    notificationTypeId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/notification-type/index.ts
var JiraNotificationTypeAri = class _JiraNotificationTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._notificationTypeId = opts.resourceIdSegmentValues.notificationTypeId;
  }
  get activationId() {
    return this._activationId;
  }
  get notificationTypeId() {
    return this._notificationTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNotificationTypeAriStaticOpts.qualifier,
      platformQualifier: jiraNotificationTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraNotificationTypeAriStaticOpts.resourceOwner,
      resourceType: jiraNotificationTypeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.notificationTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        notificationTypeId: opts.notificationTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNotificationTypeAriStaticOpts);
    return new _JiraNotificationTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNotificationTypeAriStaticOpts);
    return new _JiraNotificationTypeAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      notificationTypeId: this.notificationTypeId
    };
  }
};

// src/jira/notification-type-scheme/types.ts
var JiraNotificationTypeSchemeAriResourceOwner = "jira", JiraNotificationTypeSchemeAriResourceType = "notification-type-scheme";

// src/jira/notification-type-scheme/manifest.ts
var jiraNotificationTypeSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraNotificationTypeSchemeAriResourceOwner,
  resourceType: JiraNotificationTypeSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{notificationTypeSchemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    notificationTypeSchemeId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/notification-type-scheme/index.ts
var JiraNotificationTypeSchemeAri = class _JiraNotificationTypeSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._notificationTypeSchemeId = opts.resourceIdSegmentValues.notificationTypeSchemeId;
  }
  get activationId() {
    return this._activationId;
  }
  get notificationTypeSchemeId() {
    return this._notificationTypeSchemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNotificationTypeSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraNotificationTypeSchemeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraNotificationTypeSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraNotificationTypeSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.notificationTypeSchemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        notificationTypeSchemeId: opts.notificationTypeSchemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNotificationTypeSchemeAriStaticOpts);
    return new _JiraNotificationTypeSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNotificationTypeSchemeAriStaticOpts);
    return new _JiraNotificationTypeSchemeAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      notificationTypeSchemeId: this.notificationTypeSchemeId
    };
  }
};

// src/jira/notification-user-preference/types.ts
var JiraNotificationUserPreferenceAriResourceOwner = "jira", JiraNotificationUserPreferenceAriResourceType = "notification-user-preference";

// src/jira/notification-user-preference/manifest.ts
var jiraNotificationUserPreferenceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraNotificationUserPreferenceAriResourceOwner,
  resourceType: JiraNotificationUserPreferenceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{notificationUserPreferenceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    notificationUserPreferenceId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/notification-user-preference/index.ts
var JiraNotificationUserPreferenceAri = class _JiraNotificationUserPreferenceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._notificationUserPreferenceId = opts.resourceIdSegmentValues.notificationUserPreferenceId;
  }
  get activationId() {
    return this._activationId;
  }
  get notificationUserPreferenceId() {
    return this._notificationUserPreferenceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNotificationUserPreferenceAriStaticOpts.qualifier,
      platformQualifier: jiraNotificationUserPreferenceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraNotificationUserPreferenceAriStaticOpts.resourceOwner,
      resourceType: jiraNotificationUserPreferenceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.notificationUserPreferenceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        notificationUserPreferenceId: opts.notificationUserPreferenceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNotificationUserPreferenceAriStaticOpts);
    return new _JiraNotificationUserPreferenceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNotificationUserPreferenceAriStaticOpts);
    return new _JiraNotificationUserPreferenceAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      notificationUserPreferenceId: this.notificationUserPreferenceId
    };
  }
};

// src/jira/operations-workspace/types.ts
var JiraOperationsWorkspaceAriResourceOwner = "jira", JiraOperationsWorkspaceAriResourceType = "operations-workspace";

// src/jira/operations-workspace/manifest.ts
var jiraOperationsWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraOperationsWorkspaceAriResourceOwner,
  resourceType: JiraOperationsWorkspaceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{providerAppId}/{operationsWorkspaceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/,
    // eslint-disable-line no-useless-escape
    operationsWorkspaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/operations-workspace/index.ts
var JiraOperationsWorkspaceAri = class _JiraOperationsWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._providerAppId = opts.resourceIdSegmentValues.providerAppId, this._operationsWorkspaceId = opts.resourceIdSegmentValues.operationsWorkspaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  get operationsWorkspaceId() {
    return this._operationsWorkspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraOperationsWorkspaceAriStaticOpts.qualifier,
      platformQualifier: jiraOperationsWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraOperationsWorkspaceAriStaticOpts.resourceOwner,
      resourceType: jiraOperationsWorkspaceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.providerAppId}/${opts.operationsWorkspaceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        providerAppId: opts.providerAppId,
        operationsWorkspaceId: opts.operationsWorkspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraOperationsWorkspaceAriStaticOpts);
    return new _JiraOperationsWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraOperationsWorkspaceAriStaticOpts);
    return new _JiraOperationsWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      providerAppId: this.providerAppId,
      operationsWorkspaceId: this.operationsWorkspaceId
    };
  }
};

// src/jira/permission-scheme/types.ts
var JiraPermissionSchemeAriResourceOwner = "jira", JiraPermissionSchemeAriResourceType = "permission-scheme";

// src/jira/permission-scheme/manifest.ts
var jiraPermissionSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPermissionSchemeAriResourceOwner,
  resourceType: JiraPermissionSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{schemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    schemeId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/permission-scheme/index.ts
var JiraPermissionSchemeAri = class _JiraPermissionSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._schemeId = opts.resourceIdSegmentValues.schemeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get schemeId() {
    return this._schemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPermissionSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraPermissionSchemeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPermissionSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraPermissionSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.schemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        schemeId: opts.schemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPermissionSchemeAriStaticOpts);
    return new _JiraPermissionSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPermissionSchemeAriStaticOpts);
    return new _JiraPermissionSchemeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      schemeId: this.schemeId
    };
  }
};

// src/jira/plan/types.ts
var JiraPlanAriResourceOwner = "jira", JiraPlanAriResourceType = "plan";

// src/jira/plan/manifest.ts
var jiraPlanAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanAriResourceOwner,
  resourceType: JiraPlanAriResourceType,
  resourceIdSlug: "activation/{activationId}/{planId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    planId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan/index.ts
var JiraPlanAri = class _JiraPlanAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._planId = opts.resourceIdSegmentValues.planId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get planId() {
    return this._planId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanAriStaticOpts.qualifier,
      platformQualifier: jiraPlanAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanAriStaticOpts.resourceOwner,
      resourceType: jiraPlanAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.planId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        planId: opts.planId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanAriStaticOpts);
    return new _JiraPlanAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanAriStaticOpts);
    return new _JiraPlanAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      planId: this.planId
    };
  }
};

// src/jira/plan-cross-project-scenario-version/types.ts
var JiraPlanCrossProjectScenarioVersionAriResourceOwner = "jira", JiraPlanCrossProjectScenarioVersionAriResourceType = "plan-cross-project-scenario-version";

// src/jira/plan-cross-project-scenario-version/manifest.ts
var jiraPlanCrossProjectScenarioVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanCrossProjectScenarioVersionAriResourceOwner,
  resourceType: JiraPlanCrossProjectScenarioVersionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{crossProjectScenarioVersionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    crossProjectScenarioVersionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-cross-project-scenario-version/index.ts
var JiraPlanCrossProjectScenarioVersionAri = class _JiraPlanCrossProjectScenarioVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._crossProjectScenarioVersionId = opts.resourceIdSegmentValues.crossProjectScenarioVersionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get crossProjectScenarioVersionId() {
    return this._crossProjectScenarioVersionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanCrossProjectScenarioVersionAriStaticOpts.qualifier,
      platformQualifier: jiraPlanCrossProjectScenarioVersionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanCrossProjectScenarioVersionAriStaticOpts.resourceOwner,
      resourceType: jiraPlanCrossProjectScenarioVersionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.crossProjectScenarioVersionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        crossProjectScenarioVersionId: opts.crossProjectScenarioVersionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanCrossProjectScenarioVersionAriStaticOpts);
    return new _JiraPlanCrossProjectScenarioVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanCrossProjectScenarioVersionAriStaticOpts);
    return new _JiraPlanCrossProjectScenarioVersionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      crossProjectScenarioVersionId: this.crossProjectScenarioVersionId
    };
  }
};

// src/jira/plan-cross-project-version/types.ts
var JiraPlanCrossProjectVersionAriResourceOwner = "jira", JiraPlanCrossProjectVersionAriResourceType = "plan-cross-project-version";

// src/jira/plan-cross-project-version/manifest.ts
var jiraPlanCrossProjectVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanCrossProjectVersionAriResourceOwner,
  resourceType: JiraPlanCrossProjectVersionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{crossProjectVersionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    crossProjectVersionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-cross-project-version/index.ts
var JiraPlanCrossProjectVersionAri = class _JiraPlanCrossProjectVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._crossProjectVersionId = opts.resourceIdSegmentValues.crossProjectVersionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get crossProjectVersionId() {
    return this._crossProjectVersionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanCrossProjectVersionAriStaticOpts.qualifier,
      platformQualifier: jiraPlanCrossProjectVersionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanCrossProjectVersionAriStaticOpts.resourceOwner,
      resourceType: jiraPlanCrossProjectVersionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.crossProjectVersionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        crossProjectVersionId: opts.crossProjectVersionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanCrossProjectVersionAriStaticOpts);
    return new _JiraPlanCrossProjectVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanCrossProjectVersionAriStaticOpts);
    return new _JiraPlanCrossProjectVersionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      crossProjectVersionId: this.crossProjectVersionId
    };
  }
};

// src/jira/plan-scenario/types.ts
var JiraPlanScenarioAriResourceOwner = "jira", JiraPlanScenarioAriResourceType = "plan-scenario";

// src/jira/plan-scenario/manifest.ts
var jiraPlanScenarioAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanScenarioAriResourceOwner,
  resourceType: JiraPlanScenarioAriResourceType,
  resourceIdSlug: "activation/{activationId}/{planId}/scenario/{scenarioId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    planId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    scenarioId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-scenario/index.ts
var JiraPlanScenarioAri = class _JiraPlanScenarioAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._planId = opts.resourceIdSegmentValues.planId, this._scenarioId = opts.resourceIdSegmentValues.scenarioId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get planId() {
    return this._planId;
  }
  get scenarioId() {
    return this._scenarioId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanScenarioAriStaticOpts.qualifier,
      platformQualifier: jiraPlanScenarioAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanScenarioAriStaticOpts.resourceOwner,
      resourceType: jiraPlanScenarioAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.planId}/scenario/${opts.scenarioId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        planId: opts.planId,
        scenarioId: opts.scenarioId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanScenarioAriStaticOpts);
    return new _JiraPlanScenarioAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanScenarioAriStaticOpts);
    return new _JiraPlanScenarioAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      planId: this.planId,
      scenarioId: this.scenarioId
    };
  }
};

// src/jira/plan-scenario-issue/types.ts
var JiraPlanScenarioIssueAriResourceOwner = "jira", JiraPlanScenarioIssueAriResourceType = "plan-scenario-issue";

// src/jira/plan-scenario-issue/manifest.ts
var jiraPlanScenarioIssueAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanScenarioIssueAriResourceOwner,
  resourceType: JiraPlanScenarioIssueAriResourceType,
  resourceIdSlug: "activation/{activationId}/{scenarioIssueId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scenarioIssueId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-scenario-issue/index.ts
var JiraPlanScenarioIssueAri = class _JiraPlanScenarioIssueAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._scenarioIssueId = opts.resourceIdSegmentValues.scenarioIssueId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get scenarioIssueId() {
    return this._scenarioIssueId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanScenarioIssueAriStaticOpts.qualifier,
      platformQualifier: jiraPlanScenarioIssueAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanScenarioIssueAriStaticOpts.resourceOwner,
      resourceType: jiraPlanScenarioIssueAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.scenarioIssueId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        scenarioIssueId: opts.scenarioIssueId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanScenarioIssueAriStaticOpts);
    return new _JiraPlanScenarioIssueAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanScenarioIssueAriStaticOpts);
    return new _JiraPlanScenarioIssueAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      scenarioIssueId: this.scenarioIssueId
    };
  }
};

// src/jira/plan-scenario-issue-field/types.ts
var JiraPlanScenarioIssueFieldAriResourceOwner = "jira", JiraPlanScenarioIssueFieldAriResourceType = "plan-scenario-issue-field";

// src/jira/plan-scenario-issue-field/manifest.ts
var jiraPlanScenarioIssueFieldAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanScenarioIssueFieldAriResourceOwner,
  resourceType: JiraPlanScenarioIssueFieldAriResourceType,
  resourceIdSlug: "activation/{activationId}/{scenarioIssueId}/{fieldId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scenarioIssueId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    fieldId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-scenario-issue-field/index.ts
var JiraPlanScenarioIssueFieldAri = class _JiraPlanScenarioIssueFieldAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._scenarioIssueId = opts.resourceIdSegmentValues.scenarioIssueId, this._fieldId = opts.resourceIdSegmentValues.fieldId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get scenarioIssueId() {
    return this._scenarioIssueId;
  }
  get fieldId() {
    return this._fieldId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanScenarioIssueFieldAriStaticOpts.qualifier,
      platformQualifier: jiraPlanScenarioIssueFieldAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanScenarioIssueFieldAriStaticOpts.resourceOwner,
      resourceType: jiraPlanScenarioIssueFieldAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.scenarioIssueId}/${opts.fieldId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        scenarioIssueId: opts.scenarioIssueId,
        fieldId: opts.fieldId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanScenarioIssueFieldAriStaticOpts);
    return new _JiraPlanScenarioIssueFieldAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanScenarioIssueFieldAriStaticOpts);
    return new _JiraPlanScenarioIssueFieldAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      scenarioIssueId: this.scenarioIssueId,
      fieldId: this.fieldId
    };
  }
};

// src/jira/plan-scenario-version/types.ts
var JiraPlanScenarioVersionAriResourceOwner = "jira", JiraPlanScenarioVersionAriResourceType = "plan-scenario-version";

// src/jira/plan-scenario-version/manifest.ts
var jiraPlanScenarioVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPlanScenarioVersionAriResourceOwner,
  resourceType: JiraPlanScenarioVersionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{scenarioVersionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scenarioVersionId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/plan-scenario-version/index.ts
var JiraPlanScenarioVersionAri = class _JiraPlanScenarioVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._scenarioVersionId = opts.resourceIdSegmentValues.scenarioVersionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get scenarioVersionId() {
    return this._scenarioVersionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPlanScenarioVersionAriStaticOpts.qualifier,
      platformQualifier: jiraPlanScenarioVersionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPlanScenarioVersionAriStaticOpts.resourceOwner,
      resourceType: jiraPlanScenarioVersionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.scenarioVersionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        scenarioVersionId: opts.scenarioVersionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPlanScenarioVersionAriStaticOpts);
    return new _JiraPlanScenarioVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPlanScenarioVersionAriStaticOpts);
    return new _JiraPlanScenarioVersionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      scenarioVersionId: this.scenarioVersionId
    };
  }
};

// src/jira/post-incident-review/types.ts
var JiraPostIncidentReviewAriResourceOwner = "jira", JiraPostIncidentReviewAriResourceType = "post-incident-review";

// src/jira/post-incident-review/manifest.ts
var jiraPostIncidentReviewAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPostIncidentReviewAriResourceOwner,
  resourceType: JiraPostIncidentReviewAriResourceType,
  resourceIdSlug: "activation/{activationId}/{postIncidentReviewId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    postIncidentReviewId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/post-incident-review/index.ts
var JiraPostIncidentReviewAri = class _JiraPostIncidentReviewAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._postIncidentReviewId = opts.resourceIdSegmentValues.postIncidentReviewId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get postIncidentReviewId() {
    return this._postIncidentReviewId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPostIncidentReviewAriStaticOpts.qualifier,
      platformQualifier: jiraPostIncidentReviewAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPostIncidentReviewAriStaticOpts.resourceOwner,
      resourceType: jiraPostIncidentReviewAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.postIncidentReviewId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        postIncidentReviewId: opts.postIncidentReviewId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPostIncidentReviewAriStaticOpts);
    return new _JiraPostIncidentReviewAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPostIncidentReviewAriStaticOpts);
    return new _JiraPostIncidentReviewAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      postIncidentReviewId: this.postIncidentReviewId
    };
  }
};

// src/jira/post-incident-review-history/types.ts
var JiraPostIncidentReviewHistoryAriResourceOwner = "jira", JiraPostIncidentReviewHistoryAriResourceType = "post-incident-review-history";

// src/jira/post-incident-review-history/manifest.ts
var jiraPostIncidentReviewHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPostIncidentReviewHistoryAriResourceOwner,
  resourceType: JiraPostIncidentReviewHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{postIncidentReviewId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    postIncidentReviewId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/post-incident-review-history/index.ts
var JiraPostIncidentReviewHistoryAri = class _JiraPostIncidentReviewHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._postIncidentReviewId = opts.resourceIdSegmentValues.postIncidentReviewId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get postIncidentReviewId() {
    return this._postIncidentReviewId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPostIncidentReviewHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraPostIncidentReviewHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPostIncidentReviewHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraPostIncidentReviewHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.postIncidentReviewId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        postIncidentReviewId: opts.postIncidentReviewId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPostIncidentReviewHistoryAriStaticOpts);
    return new _JiraPostIncidentReviewHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPostIncidentReviewHistoryAriStaticOpts);
    return new _JiraPostIncidentReviewHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      postIncidentReviewId: this.postIncidentReviewId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/post-incident-review-link/types.ts
var JiraPostIncidentReviewLinkAriResourceOwner = "jira", JiraPostIncidentReviewLinkAriResourceType = "post-incident-review-link";

// src/jira/post-incident-review-link/manifest.ts
var jiraPostIncidentReviewLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPostIncidentReviewLinkAriResourceOwner,
  resourceType: JiraPostIncidentReviewLinkAriResourceType,
  resourceIdSlug: "activation/{activationId}/{postIncidentReviewLinkId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    postIncidentReviewLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/post-incident-review-link/index.ts
var JiraPostIncidentReviewLinkAri = class _JiraPostIncidentReviewLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._postIncidentReviewLinkId = opts.resourceIdSegmentValues.postIncidentReviewLinkId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get postIncidentReviewLinkId() {
    return this._postIncidentReviewLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPostIncidentReviewLinkAriStaticOpts.qualifier,
      platformQualifier: jiraPostIncidentReviewLinkAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPostIncidentReviewLinkAriStaticOpts.resourceOwner,
      resourceType: jiraPostIncidentReviewLinkAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.postIncidentReviewLinkId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        postIncidentReviewLinkId: opts.postIncidentReviewLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPostIncidentReviewLinkAriStaticOpts);
    return new _JiraPostIncidentReviewLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPostIncidentReviewLinkAriStaticOpts);
    return new _JiraPostIncidentReviewLinkAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      postIncidentReviewLinkId: this.postIncidentReviewLinkId
    };
  }
};

// src/jira/priority/types.ts
var JiraPriorityAriResourceOwner = "jira", JiraPriorityAriResourceType = "priority";

// src/jira/priority/manifest.ts
var jiraPriorityAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPriorityAriResourceOwner,
  resourceType: JiraPriorityAriResourceType,
  resourceIdSlug: "activation/{activationId}/{priorityId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    priorityId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/priority/index.ts
var JiraPriorityAri = class _JiraPriorityAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._priorityId = opts.resourceIdSegmentValues.priorityId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get priorityId() {
    return this._priorityId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPriorityAriStaticOpts.qualifier,
      platformQualifier: jiraPriorityAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPriorityAriStaticOpts.resourceOwner,
      resourceType: jiraPriorityAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.priorityId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        priorityId: opts.priorityId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPriorityAriStaticOpts);
    return new _JiraPriorityAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPriorityAriStaticOpts);
    return new _JiraPriorityAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      priorityId: this.priorityId
    };
  }
};

// src/jira/product/types.ts
var JiraProductAriResourceOwner = "jira", JiraProductAriResourceType = "product";

// src/jira/product/manifest.ts
var jiraProductAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProductAriResourceOwner,
  resourceType: JiraProductAriResourceType,
  resourceIdSlug: "activation/{activationId}/{productId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    productId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/product/index.ts
var JiraProductAri = class _JiraProductAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._productId = opts.resourceIdSegmentValues.productId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get productId() {
    return this._productId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProductAriStaticOpts.qualifier,
      platformQualifier: jiraProductAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProductAriStaticOpts.resourceOwner,
      resourceType: jiraProductAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.productId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        productId: opts.productId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProductAriStaticOpts);
    return new _JiraProductAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProductAriStaticOpts);
    return new _JiraProductAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      productId: this.productId
    };
  }
};

// src/jira/project/types.ts
var JiraProjectAriResourceOwner = "jira", JiraProjectAriResourceType = "project";

// src/jira/project/manifest.ts
var jiraProjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectAriResourceOwner,
  resourceType: JiraProjectAriResourceType,
  resourceIdSlug: "{projectId}",
  resourceIdSegmentFormats: {
    projectId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project/index.ts
var JiraProjectAri = class _JiraProjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._projectId = opts.resourceIdSegmentValues.projectId;
  }
  get siteId() {
    return this._siteId;
  }
  get projectId() {
    return this._projectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectAriStaticOpts.qualifier,
      platformQualifier: jiraProjectAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectAriStaticOpts.resourceOwner,
      resourceType: jiraProjectAriStaticOpts.resourceType,
      resourceId: `${opts.projectId}`,
      resourceIdSegmentValues: {
        projectId: opts.projectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectAriStaticOpts);
    return new _JiraProjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectAriStaticOpts);
    return new _JiraProjectAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      projectId: this.projectId
    };
  }
};

// src/jira/project-category/types.ts
var JiraProjectCategoryAriResourceOwner = "jira", JiraProjectCategoryAriResourceType = "project-category";

// src/jira/project-category/manifest.ts
var jiraProjectCategoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectCategoryAriResourceOwner,
  resourceType: JiraProjectCategoryAriResourceType,
  resourceIdSlug: "{projectCategoryId}",
  resourceIdSegmentFormats: {
    projectCategoryId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project-category/index.ts
var JiraProjectCategoryAri = class _JiraProjectCategoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._projectCategoryId = opts.resourceIdSegmentValues.projectCategoryId;
  }
  get siteId() {
    return this._siteId;
  }
  get projectCategoryId() {
    return this._projectCategoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectCategoryAriStaticOpts.qualifier,
      platformQualifier: jiraProjectCategoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectCategoryAriStaticOpts.resourceOwner,
      resourceType: jiraProjectCategoryAriStaticOpts.resourceType,
      resourceId: `${opts.projectCategoryId}`,
      resourceIdSegmentValues: {
        projectCategoryId: opts.projectCategoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectCategoryAriStaticOpts);
    return new _JiraProjectCategoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectCategoryAriStaticOpts);
    return new _JiraProjectCategoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      projectCategoryId: this.projectCategoryId
    };
  }
};

// src/jira/project-feature/types.ts
var JiraProjectFeatureAriResourceOwner = "jira", JiraProjectFeatureAriResourceType = "project-feature";

// src/jira/project-feature/manifest.ts
var jiraProjectFeatureAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectFeatureAriResourceOwner,
  resourceType: JiraProjectFeatureAriResourceType,
  resourceIdSlug: "activation/{activationId}/{projectId}/featureKey/{featureKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    projectId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    featureKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project-feature/index.ts
var JiraProjectFeatureAri = class _JiraProjectFeatureAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._projectId = opts.resourceIdSegmentValues.projectId, this._featureKey = opts.resourceIdSegmentValues.featureKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get projectId() {
    return this._projectId;
  }
  get featureKey() {
    return this._featureKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectFeatureAriStaticOpts.qualifier,
      platformQualifier: jiraProjectFeatureAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectFeatureAriStaticOpts.resourceOwner,
      resourceType: jiraProjectFeatureAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.projectId}/featureKey/${opts.featureKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        projectId: opts.projectId,
        featureKey: opts.featureKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectFeatureAriStaticOpts);
    return new _JiraProjectFeatureAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectFeatureAriStaticOpts);
    return new _JiraProjectFeatureAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      projectId: this.projectId,
      featureKey: this.featureKey
    };
  }
};

// src/jira/project-overview/types.ts
var JiraProjectOverviewAriResourceOwner = "jira", JiraProjectOverviewAriResourceType = "project-overview";

// src/jira/project-overview/manifest.ts
var jiraProjectOverviewAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectOverviewAriResourceOwner,
  resourceType: JiraProjectOverviewAriResourceType,
  resourceIdSlug: "activation/{activationId}/{overviewId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    overviewId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project-overview/index.ts
var JiraProjectOverviewAri = class _JiraProjectOverviewAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._overviewId = opts.resourceIdSegmentValues.overviewId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get overviewId() {
    return this._overviewId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectOverviewAriStaticOpts.qualifier,
      platformQualifier: jiraProjectOverviewAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectOverviewAriStaticOpts.resourceOwner,
      resourceType: jiraProjectOverviewAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.overviewId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        overviewId: opts.overviewId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectOverviewAriStaticOpts);
    return new _JiraProjectOverviewAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectOverviewAriStaticOpts);
    return new _JiraProjectOverviewAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      overviewId: this.overviewId
    };
  }
};

// src/jira/project-role-actor/types.ts
var JiraProjectRoleActorAriResourceOwner = "jira", JiraProjectRoleActorAriResourceType = "project-role-actor";

// src/jira/project-role-actor/manifest.ts
var jiraProjectRoleActorAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectRoleActorAriResourceOwner,
  resourceType: JiraProjectRoleActorAriResourceType,
  resourceIdSlug: "activation/{activationId}/{projectRoleActorId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    projectRoleActorId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project-role-actor/index.ts
var JiraProjectRoleActorAri = class _JiraProjectRoleActorAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._projectRoleActorId = opts.resourceIdSegmentValues.projectRoleActorId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get projectRoleActorId() {
    return this._projectRoleActorId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectRoleActorAriStaticOpts.qualifier,
      platformQualifier: jiraProjectRoleActorAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectRoleActorAriStaticOpts.resourceOwner,
      resourceType: jiraProjectRoleActorAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.projectRoleActorId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        projectRoleActorId: opts.projectRoleActorId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectRoleActorAriStaticOpts);
    return new _JiraProjectRoleActorAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectRoleActorAriStaticOpts);
    return new _JiraProjectRoleActorAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      projectRoleActorId: this.projectRoleActorId
    };
  }
};

// src/jira/project-shortcut/types.ts
var JiraProjectShortcutAriResourceOwner = "jira", JiraProjectShortcutAriResourceType = "project-shortcut";

// src/jira/project-shortcut/manifest.ts
var jiraProjectShortcutAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectShortcutAriResourceOwner,
  resourceType: JiraProjectShortcutAriResourceType,
  resourceIdSlug: "activation/{activationId}/{shortcutId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    shortcutId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project-shortcut/index.ts
var JiraProjectShortcutAri = class _JiraProjectShortcutAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._shortcutId = opts.resourceIdSegmentValues.shortcutId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get shortcutId() {
    return this._shortcutId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectShortcutAriStaticOpts.qualifier,
      platformQualifier: jiraProjectShortcutAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectShortcutAriStaticOpts.resourceOwner,
      resourceType: jiraProjectShortcutAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.shortcutId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        shortcutId: opts.shortcutId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectShortcutAriStaticOpts);
    return new _JiraProjectShortcutAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectShortcutAriStaticOpts);
    return new _JiraProjectShortcutAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      shortcutId: this.shortcutId
    };
  }
};

// src/jira/project-type/types.ts
var JiraProjectTypeAriResourceOwner = "jira", JiraProjectTypeAriResourceType = "project-type";

// src/jira/project-type/manifest.ts
var jiraProjectTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraProjectTypeAriResourceOwner,
  resourceType: JiraProjectTypeAriResourceType,
  resourceIdSlug: "{projectTypeId}",
  resourceIdSegmentFormats: {
    projectTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/project-type/index.ts
var JiraProjectTypeAri = class _JiraProjectTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._projectTypeId = opts.resourceIdSegmentValues.projectTypeId;
  }
  get siteId() {
    return this._siteId;
  }
  get projectTypeId() {
    return this._projectTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraProjectTypeAriStaticOpts.qualifier,
      platformQualifier: jiraProjectTypeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraProjectTypeAriStaticOpts.resourceOwner,
      resourceType: jiraProjectTypeAriStaticOpts.resourceType,
      resourceId: `${opts.projectTypeId}`,
      resourceIdSegmentValues: {
        projectTypeId: opts.projectTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraProjectTypeAriStaticOpts);
    return new _JiraProjectTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraProjectTypeAriStaticOpts);
    return new _JiraProjectTypeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      projectTypeId: this.projectTypeId
    };
  }
};

// src/jira/pull-request/types.ts
var JiraPullRequestAriResourceOwner = "jira", JiraPullRequestAriResourceType = "pull-request";

// src/jira/pull-request/manifest.ts
var jiraPullRequestAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPullRequestAriResourceOwner,
  resourceType: JiraPullRequestAriResourceType,
  resourceIdSlug: "activation/{activationId}/{pullRequestId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    pullRequestId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/pull-request/index.ts
var JiraPullRequestAri = class _JiraPullRequestAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPullRequestAriStaticOpts.qualifier,
      platformQualifier: jiraPullRequestAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPullRequestAriStaticOpts.resourceOwner,
      resourceType: jiraPullRequestAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.pullRequestId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        pullRequestId: opts.pullRequestId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPullRequestAriStaticOpts);
    return new _JiraPullRequestAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPullRequestAriStaticOpts);
    return new _JiraPullRequestAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      pullRequestId: this.pullRequestId
    };
  }
};

// src/jira/pull-request-history/types.ts
var JiraPullRequestHistoryAriResourceOwner = "jira", JiraPullRequestHistoryAriResourceType = "pull-request-history";

// src/jira/pull-request-history/manifest.ts
var jiraPullRequestHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraPullRequestHistoryAriResourceOwner,
  resourceType: JiraPullRequestHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{pullRequestId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    pullRequestId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/pull-request-history/index.ts
var JiraPullRequestHistoryAri = class _JiraPullRequestHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._pullRequestId = opts.resourceIdSegmentValues.pullRequestId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get pullRequestId() {
    return this._pullRequestId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraPullRequestHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraPullRequestHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraPullRequestHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraPullRequestHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.pullRequestId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        pullRequestId: opts.pullRequestId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraPullRequestHistoryAriStaticOpts);
    return new _JiraPullRequestHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraPullRequestHistoryAriStaticOpts);
    return new _JiraPullRequestHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      pullRequestId: this.pullRequestId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/remote-link/types.ts
var JiraRemoteLinkAriResourceOwner = "jira", JiraRemoteLinkAriResourceType = "remote-link";

// src/jira/remote-link/manifest.ts
var jiraRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraRemoteLinkAriResourceOwner,
  resourceType: JiraRemoteLinkAriResourceType,
  resourceIdSlug: "activation/{activationId}/{remoteLinkId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    remoteLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/remote-link/index.ts
var JiraRemoteLinkAri = class _JiraRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._remoteLinkId = opts.resourceIdSegmentValues.remoteLinkId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get remoteLinkId() {
    return this._remoteLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: jiraRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: jiraRemoteLinkAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.remoteLinkId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        remoteLinkId: opts.remoteLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraRemoteLinkAriStaticOpts);
    return new _JiraRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraRemoteLinkAriStaticOpts);
    return new _JiraRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      remoteLinkId: this.remoteLinkId
    };
  }
};

// src/jira/remote-link-history/types.ts
var JiraRemoteLinkHistoryAriResourceOwner = "jira", JiraRemoteLinkHistoryAriResourceType = "remote-link-history";

// src/jira/remote-link-history/manifest.ts
var jiraRemoteLinkHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraRemoteLinkHistoryAriResourceOwner,
  resourceType: JiraRemoteLinkHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{remoteLinkId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    remoteLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/remote-link-history/index.ts
var JiraRemoteLinkHistoryAri = class _JiraRemoteLinkHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._remoteLinkId = opts.resourceIdSegmentValues.remoteLinkId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get remoteLinkId() {
    return this._remoteLinkId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraRemoteLinkHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraRemoteLinkHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraRemoteLinkHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraRemoteLinkHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.remoteLinkId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        remoteLinkId: opts.remoteLinkId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraRemoteLinkHistoryAriStaticOpts);
    return new _JiraRemoteLinkHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraRemoteLinkHistoryAriStaticOpts);
    return new _JiraRemoteLinkHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      remoteLinkId: this.remoteLinkId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/repository/types.ts
var JiraRepositoryAriResourceOwner = "jira", JiraRepositoryAriResourceType = "repository";

// src/jira/repository/manifest.ts
var jiraRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraRepositoryAriResourceOwner,
  resourceType: JiraRepositoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{repositoryId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    repositoryId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/repository/index.ts
var JiraRepositoryAri = class _JiraRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraRepositoryAriStaticOpts.qualifier,
      platformQualifier: jiraRepositoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraRepositoryAriStaticOpts.resourceOwner,
      resourceType: jiraRepositoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.repositoryId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraRepositoryAriStaticOpts);
    return new _JiraRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraRepositoryAriStaticOpts);
    return new _JiraRepositoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      repositoryId: this.repositoryId
    };
  }
};

// src/jira/resolution/types.ts
var JiraResolutionAriResourceOwner = "jira", JiraResolutionAriResourceType = "resolution";

// src/jira/resolution/manifest.ts
var jiraResolutionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraResolutionAriResourceOwner,
  resourceType: JiraResolutionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{resolutionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    resolutionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/resolution/index.ts
var JiraResolutionAri = class _JiraResolutionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._resolutionId = opts.resourceIdSegmentValues.resolutionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get resolutionId() {
    return this._resolutionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraResolutionAriStaticOpts.qualifier,
      platformQualifier: jiraResolutionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraResolutionAriStaticOpts.resourceOwner,
      resourceType: jiraResolutionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.resolutionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        resolutionId: opts.resolutionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraResolutionAriStaticOpts);
    return new _JiraResolutionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraResolutionAriStaticOpts);
    return new _JiraResolutionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      resolutionId: this.resolutionId
    };
  }
};

// src/jira/resource-usage-metric/types.ts
var JiraResourceUsageMetricAriResourceOwner = "jira", JiraResourceUsageMetricAriResourceType = "resource-usage-metric";

// src/jira/resource-usage-metric/manifest.ts
var jiraResourceUsageMetricAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraResourceUsageMetricAriResourceOwner,
  resourceType: JiraResourceUsageMetricAriResourceType,
  resourceIdSlug: "activation/{activationId}/{metricKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    metricKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/resource-usage-metric/index.ts
var JiraResourceUsageMetricAri = class _JiraResourceUsageMetricAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._metricKey = opts.resourceIdSegmentValues.metricKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get metricKey() {
    return this._metricKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraResourceUsageMetricAriStaticOpts.qualifier,
      platformQualifier: jiraResourceUsageMetricAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraResourceUsageMetricAriStaticOpts.resourceOwner,
      resourceType: jiraResourceUsageMetricAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.metricKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        metricKey: opts.metricKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraResourceUsageMetricAriStaticOpts);
    return new _JiraResourceUsageMetricAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraResourceUsageMetricAriStaticOpts);
    return new _JiraResourceUsageMetricAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      metricKey: this.metricKey
    };
  }
};

// src/jira/resource-usage-recommendation/types.ts
var JiraResourceUsageRecommendationAriResourceOwner = "jira", JiraResourceUsageRecommendationAriResourceType = "resource-usage-recommendation";

// src/jira/resource-usage-recommendation/manifest.ts
var jiraResourceUsageRecommendationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraResourceUsageRecommendationAriResourceOwner,
  resourceType: JiraResourceUsageRecommendationAriResourceType,
  resourceIdSlug: "activation/{activationId}/{recommendationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    recommendationId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/resource-usage-recommendation/index.ts
var JiraResourceUsageRecommendationAri = class _JiraResourceUsageRecommendationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._recommendationId = opts.resourceIdSegmentValues.recommendationId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get recommendationId() {
    return this._recommendationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraResourceUsageRecommendationAriStaticOpts.qualifier,
      platformQualifier: jiraResourceUsageRecommendationAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraResourceUsageRecommendationAriStaticOpts.resourceOwner,
      resourceType: jiraResourceUsageRecommendationAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.recommendationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        recommendationId: opts.recommendationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraResourceUsageRecommendationAriStaticOpts);
    return new _JiraResourceUsageRecommendationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraResourceUsageRecommendationAriStaticOpts);
    return new _JiraResourceUsageRecommendationAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      recommendationId: this.recommendationId
    };
  }
};

// src/jira/role/types.ts
var JiraRoleAriResourceOwner = "jira", JiraRoleAriResourceType = "role";

// src/jira/role/manifest.ts
var jiraRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]*$"),
  resourceOwner: JiraRoleAriResourceOwner,
  resourceType: JiraRoleAriResourceType,
  resourceIdSlug: "{jiraRoleType}/{jiraRoleTypeId}",
  resourceIdSegmentFormats: {
    jiraRoleType: /(?:scope|product|projectrole-by-project|project-lead|principal-grant|project-role|application-access|jsm-customer-context-helpseeker-project-permission|jsm-customer-context-anonymous-project-permission|role-type-for-perms-pollinator-test)/,
    // eslint-disable-line no-useless-escape
    jiraRoleTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/role/index.ts
var JiraRoleAri = class _JiraRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._optionalSiteId = opts.cloudId || "", this._jiraRoleType = opts.resourceIdSegmentValues.jiraRoleType, this._jiraRoleTypeId = opts.resourceIdSegmentValues.jiraRoleTypeId;
  }
  get optionalSiteId() {
    return this._optionalSiteId;
  }
  get jiraRoleType() {
    return this._jiraRoleType;
  }
  get jiraRoleTypeId() {
    return this._jiraRoleTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraRoleAriStaticOpts.qualifier,
      platformQualifier: jiraRoleAriStaticOpts.platformQualifier,
      cloudId: opts.optionalSiteId,
      resourceOwner: jiraRoleAriStaticOpts.resourceOwner,
      resourceType: jiraRoleAriStaticOpts.resourceType,
      resourceId: `${opts.jiraRoleType}/${opts.jiraRoleTypeId}`,
      resourceIdSegmentValues: {
        jiraRoleType: opts.jiraRoleType,
        jiraRoleTypeId: opts.jiraRoleTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraRoleAriStaticOpts);
    return new _JiraRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraRoleAriStaticOpts);
    return new _JiraRoleAri(opts);
  }
  getVariables() {
    return {
      optionalSiteId: this.optionalSiteId,
      jiraRoleType: this.jiraRoleType,
      jiraRoleTypeId: this.jiraRoleTypeId
    };
  }
};

// src/jira/screen-tab/types.ts
var JiraScreenTabAriResourceOwner = "jira", JiraScreenTabAriResourceType = "screen-tab";

// src/jira/screen-tab/manifest.ts
var jiraScreenTabAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraScreenTabAriResourceOwner,
  resourceType: JiraScreenTabAriResourceType,
  resourceIdSlug: "activation/{activationId}/{screenId}/{tabId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    screenId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    tabId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/screen-tab/index.ts
var JiraScreenTabAri = class _JiraScreenTabAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._screenId = opts.resourceIdSegmentValues.screenId, this._tabId = opts.resourceIdSegmentValues.tabId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get screenId() {
    return this._screenId;
  }
  get tabId() {
    return this._tabId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraScreenTabAriStaticOpts.qualifier,
      platformQualifier: jiraScreenTabAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraScreenTabAriStaticOpts.resourceOwner,
      resourceType: jiraScreenTabAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.screenId}/${opts.tabId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        screenId: opts.screenId,
        tabId: opts.tabId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraScreenTabAriStaticOpts);
    return new _JiraScreenTabAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraScreenTabAriStaticOpts);
    return new _JiraScreenTabAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      screenId: this.screenId,
      tabId: this.tabId
    };
  }
};

// src/jira/security-container/types.ts
var JiraSecurityContainerAriResourceOwner = "jira", JiraSecurityContainerAriResourceType = "security-container";

// src/jira/security-container/manifest.ts
var jiraSecurityContainerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSecurityContainerAriResourceOwner,
  resourceType: JiraSecurityContainerAriResourceType,
  resourceIdSlug: "activation/{activationId}/{providerAppId}/{securityContainerId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/,
    // eslint-disable-line no-useless-escape
    securityContainerId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/security-container/index.ts
var JiraSecurityContainerAri = class _JiraSecurityContainerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._providerAppId = opts.resourceIdSegmentValues.providerAppId, this._securityContainerId = opts.resourceIdSegmentValues.securityContainerId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  get securityContainerId() {
    return this._securityContainerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSecurityContainerAriStaticOpts.qualifier,
      platformQualifier: jiraSecurityContainerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSecurityContainerAriStaticOpts.resourceOwner,
      resourceType: jiraSecurityContainerAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.providerAppId}/${opts.securityContainerId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        providerAppId: opts.providerAppId,
        securityContainerId: opts.securityContainerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSecurityContainerAriStaticOpts);
    return new _JiraSecurityContainerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSecurityContainerAriStaticOpts);
    return new _JiraSecurityContainerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      providerAppId: this.providerAppId,
      securityContainerId: this.securityContainerId
    };
  }
};

// src/jira/security-level/types.ts
var JiraSecurityLevelAriResourceOwner = "jira", JiraSecurityLevelAriResourceType = "security-level";

// src/jira/security-level/manifest.ts
var jiraSecurityLevelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSecurityLevelAriResourceOwner,
  resourceType: JiraSecurityLevelAriResourceType,
  resourceIdSlug: "activation/{activationId}/{securityLevelId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    securityLevelId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/security-level/index.ts
var JiraSecurityLevelAri = class _JiraSecurityLevelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._securityLevelId = opts.resourceIdSegmentValues.securityLevelId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get securityLevelId() {
    return this._securityLevelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSecurityLevelAriStaticOpts.qualifier,
      platformQualifier: jiraSecurityLevelAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSecurityLevelAriStaticOpts.resourceOwner,
      resourceType: jiraSecurityLevelAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.securityLevelId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        securityLevelId: opts.securityLevelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSecurityLevelAriStaticOpts);
    return new _JiraSecurityLevelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSecurityLevelAriStaticOpts);
    return new _JiraSecurityLevelAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      securityLevelId: this.securityLevelId
    };
  }
};

// src/jira/security-workspace/types.ts
var JiraSecurityWorkspaceAriResourceOwner = "jira", JiraSecurityWorkspaceAriResourceType = "security-workspace";

// src/jira/security-workspace/manifest.ts
var jiraSecurityWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSecurityWorkspaceAriResourceOwner,
  resourceType: JiraSecurityWorkspaceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{providerAppId}/{securityWorkspaceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    providerAppId: /[a-zA-Z0-9-._]+/,
    // eslint-disable-line no-useless-escape
    securityWorkspaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/security-workspace/index.ts
var JiraSecurityWorkspaceAri = class _JiraSecurityWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._providerAppId = opts.resourceIdSegmentValues.providerAppId, this._securityWorkspaceId = opts.resourceIdSegmentValues.securityWorkspaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get providerAppId() {
    return this._providerAppId;
  }
  get securityWorkspaceId() {
    return this._securityWorkspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSecurityWorkspaceAriStaticOpts.qualifier,
      platformQualifier: jiraSecurityWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSecurityWorkspaceAriStaticOpts.resourceOwner,
      resourceType: jiraSecurityWorkspaceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.providerAppId}/${opts.securityWorkspaceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        providerAppId: opts.providerAppId,
        securityWorkspaceId: opts.securityWorkspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSecurityWorkspaceAriStaticOpts);
    return new _JiraSecurityWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSecurityWorkspaceAriStaticOpts);
    return new _JiraSecurityWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      providerAppId: this.providerAppId,
      securityWorkspaceId: this.securityWorkspaceId
    };
  }
};

// src/jira/site/types.ts
var JiraSiteAriResourceOwner = "jira", JiraSiteAriResourceType = "site";

// src/jira/site/manifest.ts
var jiraSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraSiteAriResourceOwner,
  resourceType: JiraSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/site/index.ts
var JiraSiteAri = class _JiraSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSiteAriStaticOpts.qualifier,
      platformQualifier: jiraSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraSiteAriStaticOpts.resourceOwner,
      resourceType: jiraSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSiteAriStaticOpts);
    return new _JiraSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSiteAriStaticOpts);
    return new _JiraSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/jira/sprint/types.ts
var JiraSprintAriResourceOwner = "jira", JiraSprintAriResourceType = "sprint";

// src/jira/sprint/manifest.ts
var jiraSprintAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSprintAriResourceOwner,
  resourceType: JiraSprintAriResourceType,
  resourceIdSlug: "activation/{activationId}/{sprintId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    sprintId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/sprint/index.ts
var JiraSprintAri = class _JiraSprintAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._sprintId = opts.resourceIdSegmentValues.sprintId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get sprintId() {
    return this._sprintId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSprintAriStaticOpts.qualifier,
      platformQualifier: jiraSprintAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSprintAriStaticOpts.resourceOwner,
      resourceType: jiraSprintAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.sprintId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        sprintId: opts.sprintId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSprintAriStaticOpts);
    return new _JiraSprintAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSprintAriStaticOpts);
    return new _JiraSprintAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      sprintId: this.sprintId
    };
  }
};

// src/jira/user-broadcast-message/types.ts
var JiraUserBroadcastMessageAriResourceOwner = "jira", JiraUserBroadcastMessageAriResourceType = "user-broadcast-message";

// src/jira/user-broadcast-message/manifest.ts
var jiraUserBroadcastMessageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraUserBroadcastMessageAriResourceOwner,
  resourceType: JiraUserBroadcastMessageAriResourceType,
  resourceIdSlug: "activation/{activationId}/{broadcastMessageId}/{userId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    broadcastMessageId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/user-broadcast-message/index.ts
var JiraUserBroadcastMessageAri = class _JiraUserBroadcastMessageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._broadcastMessageId = opts.resourceIdSegmentValues.broadcastMessageId, this._userId = opts.resourceIdSegmentValues.userId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get broadcastMessageId() {
    return this._broadcastMessageId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraUserBroadcastMessageAriStaticOpts.qualifier,
      platformQualifier: jiraUserBroadcastMessageAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraUserBroadcastMessageAriStaticOpts.resourceOwner,
      resourceType: jiraUserBroadcastMessageAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.broadcastMessageId}/${opts.userId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        broadcastMessageId: opts.broadcastMessageId,
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraUserBroadcastMessageAriStaticOpts);
    return new _JiraUserBroadcastMessageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraUserBroadcastMessageAriStaticOpts);
    return new _JiraUserBroadcastMessageAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      broadcastMessageId: this.broadcastMessageId,
      userId: this.userId
    };
  }
};

// src/jira/version/types.ts
var JiraVersionAriResourceOwner = "jira", JiraVersionAriResourceType = "version";

// src/jira/version/manifest.ts
var jiraVersionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraVersionAriResourceOwner,
  resourceType: JiraVersionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{versionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    versionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/version/index.ts
var JiraVersionAri = class _JiraVersionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._versionId = opts.resourceIdSegmentValues.versionId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get versionId() {
    return this._versionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraVersionAriStaticOpts.qualifier,
      platformQualifier: jiraVersionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraVersionAriStaticOpts.resourceOwner,
      resourceType: jiraVersionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.versionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        versionId: opts.versionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraVersionAriStaticOpts);
    return new _JiraVersionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraVersionAriStaticOpts);
    return new _JiraVersionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      versionId: this.versionId
    };
  }
};

// src/jira/version-approver/types.ts
var JiraVersionApproverAriResourceOwner = "jira", JiraVersionApproverAriResourceType = "version-approver";

// src/jira/version-approver/manifest.ts
var jiraVersionApproverAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraVersionApproverAriResourceOwner,
  resourceType: JiraVersionApproverAriResourceType,
  resourceIdSlug: "activation/{activationId}/{versionId}/{approverId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    versionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    approverId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/version-approver/index.ts
var JiraVersionApproverAri = class _JiraVersionApproverAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._versionId = opts.resourceIdSegmentValues.versionId, this._approverId = opts.resourceIdSegmentValues.approverId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get versionId() {
    return this._versionId;
  }
  get approverId() {
    return this._approverId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraVersionApproverAriStaticOpts.qualifier,
      platformQualifier: jiraVersionApproverAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraVersionApproverAriStaticOpts.resourceOwner,
      resourceType: jiraVersionApproverAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.versionId}/${opts.approverId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        versionId: opts.versionId,
        approverId: opts.approverId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraVersionApproverAriStaticOpts);
    return new _JiraVersionApproverAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraVersionApproverAriStaticOpts);
    return new _JiraVersionApproverAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      versionId: this.versionId,
      approverId: this.approverId
    };
  }
};

// src/jira/vulnerability/types.ts
var JiraVulnerabilityAriResourceOwner = "jira", JiraVulnerabilityAriResourceType = "vulnerability";

// src/jira/vulnerability/manifest.ts
var jiraVulnerabilityAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraVulnerabilityAriResourceOwner,
  resourceType: JiraVulnerabilityAriResourceType,
  resourceIdSlug: "activation/{activationId}/{vulnerabilityId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    vulnerabilityId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/vulnerability/index.ts
var JiraVulnerabilityAri = class _JiraVulnerabilityAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._vulnerabilityId = opts.resourceIdSegmentValues.vulnerabilityId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get vulnerabilityId() {
    return this._vulnerabilityId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraVulnerabilityAriStaticOpts.qualifier,
      platformQualifier: jiraVulnerabilityAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraVulnerabilityAriStaticOpts.resourceOwner,
      resourceType: jiraVulnerabilityAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.vulnerabilityId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        vulnerabilityId: opts.vulnerabilityId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraVulnerabilityAriStaticOpts);
    return new _JiraVulnerabilityAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraVulnerabilityAriStaticOpts);
    return new _JiraVulnerabilityAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      vulnerabilityId: this.vulnerabilityId
    };
  }
};

// src/jira/vulnerability-history/types.ts
var JiraVulnerabilityHistoryAriResourceOwner = "jira", JiraVulnerabilityHistoryAriResourceType = "vulnerability-history";

// src/jira/vulnerability-history/manifest.ts
var jiraVulnerabilityHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraVulnerabilityHistoryAriResourceOwner,
  resourceType: JiraVulnerabilityHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{vulnerabilityId}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    vulnerabilityId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/vulnerability-history/index.ts
var JiraVulnerabilityHistoryAri = class _JiraVulnerabilityHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._vulnerabilityId = opts.resourceIdSegmentValues.vulnerabilityId, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get vulnerabilityId() {
    return this._vulnerabilityId;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraVulnerabilityHistoryAriStaticOpts.qualifier,
      platformQualifier: jiraVulnerabilityHistoryAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraVulnerabilityHistoryAriStaticOpts.resourceOwner,
      resourceType: jiraVulnerabilityHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.vulnerabilityId}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        vulnerabilityId: opts.vulnerabilityId,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraVulnerabilityHistoryAriStaticOpts);
    return new _JiraVulnerabilityHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraVulnerabilityHistoryAriStaticOpts);
    return new _JiraVulnerabilityHistoryAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      vulnerabilityId: this.vulnerabilityId,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

// src/jira/workflow/types.ts
var JiraWorkflowAriResourceOwner = "jira", JiraWorkflowAriResourceType = "workflow";

// src/jira/workflow/manifest.ts
var jiraWorkflowAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraWorkflowAriResourceOwner,
  resourceType: JiraWorkflowAriResourceType,
  resourceIdSlug: "activation/{activationId}/{workflowId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    workflowId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/workflow/index.ts
var JiraWorkflowAri = class _JiraWorkflowAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._workflowId = opts.resourceIdSegmentValues.workflowId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get workflowId() {
    return this._workflowId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraWorkflowAriStaticOpts.qualifier,
      platformQualifier: jiraWorkflowAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraWorkflowAriStaticOpts.resourceOwner,
      resourceType: jiraWorkflowAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.workflowId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        workflowId: opts.workflowId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraWorkflowAriStaticOpts);
    return new _JiraWorkflowAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraWorkflowAriStaticOpts);
    return new _JiraWorkflowAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      workflowId: this.workflowId
    };
  }
};

// src/jira/workflow-scheme/types.ts
var JiraWorkflowSchemeAriResourceOwner = "jira", JiraWorkflowSchemeAriResourceType = "workflow-scheme";

// src/jira/workflow-scheme/manifest.ts
var jiraWorkflowSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraWorkflowSchemeAriResourceOwner,
  resourceType: JiraWorkflowSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{workflowSchemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    workflowSchemeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/workflow-scheme/index.ts
var JiraWorkflowSchemeAri = class _JiraWorkflowSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._workflowSchemeId = opts.resourceIdSegmentValues.workflowSchemeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get workflowSchemeId() {
    return this._workflowSchemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraWorkflowSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraWorkflowSchemeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraWorkflowSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraWorkflowSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.workflowSchemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        workflowSchemeId: opts.workflowSchemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraWorkflowSchemeAriStaticOpts);
    return new _JiraWorkflowSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraWorkflowSchemeAriStaticOpts);
    return new _JiraWorkflowSchemeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      workflowSchemeId: this.workflowSchemeId
    };
  }
};

// src/jira/worklog/types.ts
var JiraWorklogAriResourceOwner = "jira", JiraWorklogAriResourceType = "worklog";

// src/jira/worklog/manifest.ts
var jiraWorklogAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraWorklogAriResourceOwner,
  resourceType: JiraWorklogAriResourceType,
  resourceIdSlug: "{worklogId}",
  resourceIdSegmentFormats: {
    worklogId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/worklog/index.ts
var JiraWorklogAri = class _JiraWorklogAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._worklogId = opts.resourceIdSegmentValues.worklogId;
  }
  get siteId() {
    return this._siteId;
  }
  get worklogId() {
    return this._worklogId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraWorklogAriStaticOpts.qualifier,
      platformQualifier: jiraWorklogAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraWorklogAriStaticOpts.resourceOwner,
      resourceType: jiraWorklogAriStaticOpts.resourceType,
      resourceId: `${opts.worklogId}`,
      resourceIdSegmentValues: {
        worklogId: opts.worklogId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraWorklogAriStaticOpts);
    return new _JiraWorklogAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraWorklogAriStaticOpts);
    return new _JiraWorklogAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      worklogId: this.worklogId
    };
  }
};

// src/jira/workspace/types.ts
var JiraWorkspaceAriResourceOwner = "jira", JiraWorkspaceAriResourceType = "workspace";

// src/jira/workspace/manifest.ts
var jiraWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraWorkspaceAriResourceOwner,
  resourceType: JiraWorkspaceAriResourceType,
  resourceIdSlug: "{activationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/workspace/index.ts
var JiraWorkspaceAri = class _JiraWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraWorkspaceAriStaticOpts.qualifier,
      platformQualifier: jiraWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraWorkspaceAriStaticOpts.resourceOwner,
      resourceType: jiraWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraWorkspaceAriStaticOpts);
    return new _JiraWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraWorkspaceAriStaticOpts);
    return new _JiraWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId
    };
  }
};

// src/jira-align/epic/types.ts
var JiraAlignEpicAriResourceOwner = "jira-align", JiraAlignEpicAriResourceType = "epic";

// src/jira-align/epic/manifest.ts
var jiraAlignEpicAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$"),
  resourceOwner: JiraAlignEpicAriResourceOwner,
  resourceType: JiraAlignEpicAriResourceType,
  resourceIdSlug: "{epicId}",
  resourceIdSegmentFormats: {
    epicId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-align/epic/index.ts
var JiraAlignEpicAri = class _JiraAlignEpicAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._instanceId = opts.cloudId || "", this._epicId = opts.resourceIdSegmentValues.epicId;
  }
  get instanceId() {
    return this._instanceId;
  }
  get epicId() {
    return this._epicId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraAlignEpicAriStaticOpts.qualifier,
      platformQualifier: jiraAlignEpicAriStaticOpts.platformQualifier,
      cloudId: opts.instanceId,
      resourceOwner: jiraAlignEpicAriStaticOpts.resourceOwner,
      resourceType: jiraAlignEpicAriStaticOpts.resourceType,
      resourceId: `${opts.epicId}`,
      resourceIdSegmentValues: {
        epicId: opts.epicId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraAlignEpicAriStaticOpts);
    return new _JiraAlignEpicAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraAlignEpicAriStaticOpts);
    return new _JiraAlignEpicAri(opts);
  }
  getVariables() {
    return {
      instanceId: this.instanceId,
      epicId: this.epicId
    };
  }
};

// src/jira-align/instance/types.ts
var JiraAlignInstanceAriResourceOwner = "jira-align", JiraAlignInstanceAriResourceType = "instance";

// src/jira-align/instance/manifest.ts
var jiraAlignInstanceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraAlignInstanceAriResourceOwner,
  resourceType: JiraAlignInstanceAriResourceType,
  resourceIdSlug: "{instanceId}",
  resourceIdSegmentFormats: {
    instanceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-align/instance/index.ts
var JiraAlignInstanceAri = class _JiraAlignInstanceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._instanceId = opts.resourceIdSegmentValues.instanceId;
  }
  get instanceId() {
    return this._instanceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraAlignInstanceAriStaticOpts.qualifier,
      platformQualifier: jiraAlignInstanceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraAlignInstanceAriStaticOpts.resourceOwner,
      resourceType: jiraAlignInstanceAriStaticOpts.resourceType,
      resourceId: `${opts.instanceId}`,
      resourceIdSegmentValues: {
        instanceId: opts.instanceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraAlignInstanceAriStaticOpts);
    return new _JiraAlignInstanceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraAlignInstanceAriStaticOpts);
    return new _JiraAlignInstanceAri(opts);
  }
  getVariables() {
    return {
      instanceId: this.instanceId
    };
  }
};

// src/jira-core/role/types.ts
var JiraCoreRoleAriResourceOwner = "jira-core", JiraCoreRoleAriResourceType = "role";

// src/jira-core/role/manifest.ts
var jiraCoreRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraCoreRoleAriResourceOwner,
  resourceType: JiraCoreRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-core/role/index.ts
var JiraCoreRoleAri = class _JiraCoreRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraCoreRoleAriStaticOpts.qualifier,
      platformQualifier: jiraCoreRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraCoreRoleAriStaticOpts.resourceOwner,
      resourceType: jiraCoreRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraCoreRoleAriStaticOpts);
    return new _JiraCoreRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraCoreRoleAriStaticOpts);
    return new _JiraCoreRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/jira-core/site/types.ts
var JiraCoreSiteAriResourceOwner = "jira-core", JiraCoreSiteAriResourceType = "site";

// src/jira-core/site/manifest.ts
var jiraCoreSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraCoreSiteAriResourceOwner,
  resourceType: JiraCoreSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-core/site/index.ts
var JiraCoreSiteAri = class _JiraCoreSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraCoreSiteAriStaticOpts.qualifier,
      platformQualifier: jiraCoreSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraCoreSiteAriStaticOpts.resourceOwner,
      resourceType: jiraCoreSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraCoreSiteAriStaticOpts);
    return new _JiraCoreSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraCoreSiteAriStaticOpts);
    return new _JiraCoreSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/jira-servicedesk/approval/types.ts
var JiraServicedeskApprovalAriResourceOwner = "jira-servicedesk", JiraServicedeskApprovalAriResourceType = "approval";

// src/jira-servicedesk/approval/manifest.ts
var jiraServicedeskApprovalAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskApprovalAriResourceOwner,
  resourceType: JiraServicedeskApprovalAriResourceType,
  resourceIdSlug: "activation/{activationId}/{approvalId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    approvalId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/approval/index.ts
var JiraServicedeskApprovalAri = class _JiraServicedeskApprovalAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._approvalId = opts.resourceIdSegmentValues.approvalId;
  }
  get activationId() {
    return this._activationId;
  }
  get approvalId() {
    return this._approvalId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskApprovalAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskApprovalAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskApprovalAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskApprovalAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.approvalId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        approvalId: opts.approvalId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskApprovalAriStaticOpts);
    return new _JiraServicedeskApprovalAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskApprovalAriStaticOpts);
    return new _JiraServicedeskApprovalAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      approvalId: this.approvalId
    };
  }
};

// src/jira-servicedesk/calendar-event/types.ts
var JiraServicedeskCalendarEventAriResourceOwner = "jira-servicedesk", JiraServicedeskCalendarEventAriResourceType = "calendar-event";

// src/jira-servicedesk/calendar-event/manifest.ts
var jiraServicedeskCalendarEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskCalendarEventAriResourceOwner,
  resourceType: JiraServicedeskCalendarEventAriResourceType,
  resourceIdSlug: "activation/{activationId}/{calendarEventId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    calendarEventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/calendar-event/index.ts
var JiraServicedeskCalendarEventAri = class _JiraServicedeskCalendarEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._calendarEventId = opts.resourceIdSegmentValues.calendarEventId;
  }
  get activationId() {
    return this._activationId;
  }
  get calendarEventId() {
    return this._calendarEventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskCalendarEventAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskCalendarEventAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskCalendarEventAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskCalendarEventAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.calendarEventId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        calendarEventId: opts.calendarEventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskCalendarEventAriStaticOpts);
    return new _JiraServicedeskCalendarEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskCalendarEventAriStaticOpts);
    return new _JiraServicedeskCalendarEventAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      calendarEventId: this.calendarEventId
    };
  }
};

// src/jira-servicedesk/canned-response/types.ts
var JiraServicedeskCannedResponseAriResourceOwner = "jira-servicedesk", JiraServicedeskCannedResponseAriResourceType = "canned-response";

// src/jira-servicedesk/canned-response/manifest.ts
var jiraServicedeskCannedResponseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskCannedResponseAriResourceOwner,
  resourceType: JiraServicedeskCannedResponseAriResourceType,
  resourceIdSlug: "activation/{activationId}/{cannedResponseId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    cannedResponseId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/canned-response/index.ts
var JiraServicedeskCannedResponseAri = class _JiraServicedeskCannedResponseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._cannedResponseId = opts.resourceIdSegmentValues.cannedResponseId;
  }
  get activationId() {
    return this._activationId;
  }
  get cannedResponseId() {
    return this._cannedResponseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskCannedResponseAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskCannedResponseAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskCannedResponseAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskCannedResponseAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.cannedResponseId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        cannedResponseId: opts.cannedResponseId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskCannedResponseAriStaticOpts);
    return new _JiraServicedeskCannedResponseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskCannedResponseAriStaticOpts);
    return new _JiraServicedeskCannedResponseAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      cannedResponseId: this.cannedResponseId
    };
  }
};

// src/jira-servicedesk/organization/types.ts
var JiraServicedeskOrganizationAriResourceOwner = "jira-servicedesk", JiraServicedeskOrganizationAriResourceType = "organization";

// src/jira-servicedesk/organization/manifest.ts
var jiraServicedeskOrganizationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskOrganizationAriResourceOwner,
  resourceType: JiraServicedeskOrganizationAriResourceType,
  resourceIdSlug: "activation/{activationId}/{organizationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    organizationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/organization/index.ts
var JiraServicedeskOrganizationAri = class _JiraServicedeskOrganizationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._organizationId = opts.resourceIdSegmentValues.organizationId;
  }
  get activationId() {
    return this._activationId;
  }
  get organizationId() {
    return this._organizationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskOrganizationAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskOrganizationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskOrganizationAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskOrganizationAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.organizationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        organizationId: opts.organizationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskOrganizationAriStaticOpts);
    return new _JiraServicedeskOrganizationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskOrganizationAriStaticOpts);
    return new _JiraServicedeskOrganizationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      organizationId: this.organizationId
    };
  }
};

// src/jira-servicedesk/queue/types.ts
var JiraServicedeskQueueAriResourceOwner = "jira-servicedesk", JiraServicedeskQueueAriResourceType = "queue";

// src/jira-servicedesk/queue/manifest.ts
var jiraServicedeskQueueAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraServicedeskQueueAriResourceOwner,
  resourceType: JiraServicedeskQueueAriResourceType,
  resourceIdSlug: "activation/{activationId}/{queueId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    queueId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/queue/index.ts
var JiraServicedeskQueueAri = class _JiraServicedeskQueueAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._queueId = opts.resourceIdSegmentValues.queueId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get queueId() {
    return this._queueId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskQueueAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskQueueAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraServicedeskQueueAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskQueueAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.queueId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        queueId: opts.queueId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskQueueAriStaticOpts);
    return new _JiraServicedeskQueueAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskQueueAriStaticOpts);
    return new _JiraServicedeskQueueAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      queueId: this.queueId
    };
  }
};

// src/jira-servicedesk/request-type/types.ts
var JiraServicedeskRequestTypeAriResourceOwner = "jira-servicedesk", JiraServicedeskRequestTypeAriResourceType = "request-type";

// src/jira-servicedesk/request-type/manifest.ts
var jiraServicedeskRequestTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskRequestTypeAriResourceOwner,
  resourceType: JiraServicedeskRequestTypeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{requestTypeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    requestTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/request-type/index.ts
var JiraServicedeskRequestTypeAri = class _JiraServicedeskRequestTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._requestTypeId = opts.resourceIdSegmentValues.requestTypeId;
  }
  get activationId() {
    return this._activationId;
  }
  get requestTypeId() {
    return this._requestTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskRequestTypeAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskRequestTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskRequestTypeAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskRequestTypeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.requestTypeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        requestTypeId: opts.requestTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskRequestTypeAriStaticOpts);
    return new _JiraServicedeskRequestTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskRequestTypeAriStaticOpts);
    return new _JiraServicedeskRequestTypeAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      requestTypeId: this.requestTypeId
    };
  }
};

// src/jira-servicedesk/role/types.ts
var JiraServicedeskRoleAriResourceOwner = "jira-servicedesk", JiraServicedeskRoleAriResourceType = "role";

// src/jira-servicedesk/role/manifest.ts
var jiraServicedeskRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskRoleAriResourceOwner,
  resourceType: JiraServicedeskRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/role/index.ts
var JiraServicedeskRoleAri = class _JiraServicedeskRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskRoleAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskRoleAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskRoleAriStaticOpts);
    return new _JiraServicedeskRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskRoleAriStaticOpts);
    return new _JiraServicedeskRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/jira-servicedesk/site/types.ts
var JiraServicedeskSiteAriResourceOwner = "jira-servicedesk", JiraServicedeskSiteAriResourceType = "site";

// src/jira-servicedesk/site/manifest.ts
var jiraServicedeskSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskSiteAriResourceOwner,
  resourceType: JiraServicedeskSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/site/index.ts
var JiraServicedeskSiteAri = class _JiraServicedeskSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskSiteAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskSiteAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskSiteAriStaticOpts);
    return new _JiraServicedeskSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskSiteAriStaticOpts);
    return new _JiraServicedeskSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/jira-servicedesk/sla/types.ts
var JiraServicedeskSlaAriResourceOwner = "jira-servicedesk", JiraServicedeskSlaAriResourceType = "sla";

// src/jira-servicedesk/sla/manifest.ts
var jiraServicedeskSlaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraServicedeskSlaAriResourceOwner,
  resourceType: JiraServicedeskSlaAriResourceType,
  resourceIdSlug: "activation/{activationId}/{slaId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    slaId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-servicedesk/sla/index.ts
var JiraServicedeskSlaAri = class _JiraServicedeskSlaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._slaId = opts.resourceIdSegmentValues.slaId;
  }
  get activationId() {
    return this._activationId;
  }
  get slaId() {
    return this._slaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraServicedeskSlaAriStaticOpts.qualifier,
      platformQualifier: jiraServicedeskSlaAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraServicedeskSlaAriStaticOpts.resourceOwner,
      resourceType: jiraServicedeskSlaAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.slaId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        slaId: opts.slaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraServicedeskSlaAriStaticOpts);
    return new _JiraServicedeskSlaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraServicedeskSlaAriStaticOpts);
    return new _JiraServicedeskSlaAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      slaId: this.slaId
    };
  }
};

// src/jira-software/board/types.ts
var JiraSoftwareBoardAriResourceOwner = "jira-software", JiraSoftwareBoardAriResourceType = "board";

// src/jira-software/board/manifest.ts
var jiraSoftwareBoardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareBoardAriResourceOwner,
  resourceType: JiraSoftwareBoardAriResourceType,
  resourceIdSlug: "{boardId}",
  resourceIdSegmentFormats: {
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/board/index.ts
var JiraSoftwareBoardAri = class _JiraSoftwareBoardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get siteId() {
    return this._siteId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareBoardAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareBoardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareBoardAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareBoardAriStaticOpts.resourceType,
      resourceId: `${opts.boardId}`,
      resourceIdSegmentValues: {
        boardId: opts.boardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareBoardAriStaticOpts);
    return new _JiraSoftwareBoardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareBoardAriStaticOpts);
    return new _JiraSoftwareBoardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      boardId: this.boardId
    };
  }
};

// src/jira-software/board-feature/types.ts
var JiraSoftwareBoardFeatureAriResourceOwner = "jira-software", JiraSoftwareBoardFeatureAriResourceType = "board-feature";

// src/jira-software/board-feature/manifest.ts
var jiraSoftwareBoardFeatureAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareBoardFeatureAriResourceOwner,
  resourceType: JiraSoftwareBoardFeatureAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/featureKey/{featureKey}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    featureKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/board-feature/index.ts
var JiraSoftwareBoardFeatureAri = class _JiraSoftwareBoardFeatureAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._featureKey = opts.resourceIdSegmentValues.featureKey;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get featureKey() {
    return this._featureKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareBoardFeatureAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareBoardFeatureAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareBoardFeatureAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareBoardFeatureAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/featureKey/${opts.featureKey}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        featureKey: opts.featureKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareBoardFeatureAriStaticOpts);
    return new _JiraSoftwareBoardFeatureAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareBoardFeatureAriStaticOpts);
    return new _JiraSoftwareBoardFeatureAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      featureKey: this.featureKey
    };
  }
};

// src/jira-software/board-issue-list/types.ts
var JiraSoftwareBoardIssueListAriResourceOwner = "jira-software", JiraSoftwareBoardIssueListAriResourceType = "board-issue-list";

// src/jira-software/board-issue-list/manifest.ts
var jiraSoftwareBoardIssueListAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareBoardIssueListAriResourceOwner,
  resourceType: JiraSoftwareBoardIssueListAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{issueListId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    issueListId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/board-issue-list/index.ts
var JiraSoftwareBoardIssueListAri = class _JiraSoftwareBoardIssueListAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._issueListId = opts.resourceIdSegmentValues.issueListId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get issueListId() {
    return this._issueListId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareBoardIssueListAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareBoardIssueListAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareBoardIssueListAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareBoardIssueListAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.issueListId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        issueListId: opts.issueListId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareBoardIssueListAriStaticOpts);
    return new _JiraSoftwareBoardIssueListAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareBoardIssueListAriStaticOpts);
    return new _JiraSoftwareBoardIssueListAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      issueListId: this.issueListId
    };
  }
};

// src/jira-software/card/types.ts
var JiraSoftwareCardAriResourceOwner = "jira-software", JiraSoftwareCardAriResourceType = "card";

// src/jira-software/card/manifest.ts
var jiraSoftwareCardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareCardAriResourceOwner,
  resourceType: JiraSoftwareCardAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{cardId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    cardId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/card/index.ts
var JiraSoftwareCardAri = class _JiraSoftwareCardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._cardId = opts.resourceIdSegmentValues.cardId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get cardId() {
    return this._cardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareCardAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareCardAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareCardAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareCardAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.cardId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        cardId: opts.cardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareCardAriStaticOpts);
    return new _JiraSoftwareCardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareCardAriStaticOpts);
    return new _JiraSoftwareCardAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      cardId: this.cardId
    };
  }
};

// src/jira-software/card-color/types.ts
var JiraSoftwareCardColorAriResourceOwner = "jira-software", JiraSoftwareCardColorAriResourceType = "card-color";

// src/jira-software/card-color/manifest.ts
var jiraSoftwareCardColorAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareCardColorAriResourceOwner,
  resourceType: JiraSoftwareCardColorAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{cardColorId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    cardColorId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/card-color/index.ts
var JiraSoftwareCardColorAri = class _JiraSoftwareCardColorAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._cardColorId = opts.resourceIdSegmentValues.cardColorId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get cardColorId() {
    return this._cardColorId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareCardColorAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareCardColorAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareCardColorAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareCardColorAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.cardColorId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        cardColorId: opts.cardColorId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareCardColorAriStaticOpts);
    return new _JiraSoftwareCardColorAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareCardColorAriStaticOpts);
    return new _JiraSoftwareCardColorAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      cardColorId: this.cardColorId
    };
  }
};

// src/jira-software/card-layout/types.ts
var JiraSoftwareCardLayoutAriResourceOwner = "jira-software", JiraSoftwareCardLayoutAriResourceType = "card-layout";

// src/jira-software/card-layout/manifest.ts
var jiraSoftwareCardLayoutAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareCardLayoutAriResourceOwner,
  resourceType: JiraSoftwareCardLayoutAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{cardLayoutId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    cardLayoutId: /[a-zA-Z0-9_]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/card-layout/index.ts
var JiraSoftwareCardLayoutAri = class _JiraSoftwareCardLayoutAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._cardLayoutId = opts.resourceIdSegmentValues.cardLayoutId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get cardLayoutId() {
    return this._cardLayoutId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareCardLayoutAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareCardLayoutAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareCardLayoutAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareCardLayoutAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.cardLayoutId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        cardLayoutId: opts.cardLayoutId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareCardLayoutAriStaticOpts);
    return new _JiraSoftwareCardLayoutAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareCardLayoutAriStaticOpts);
    return new _JiraSoftwareCardLayoutAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      cardLayoutId: this.cardLayoutId
    };
  }
};

// src/jira-software/card-parent/types.ts
var JiraSoftwareCardParentAriResourceOwner = "jira-software", JiraSoftwareCardParentAriResourceType = "card-parent";

// src/jira-software/card-parent/manifest.ts
var jiraSoftwareCardParentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareCardParentAriResourceOwner,
  resourceType: JiraSoftwareCardParentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{cardParentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    cardParentId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/card-parent/index.ts
var JiraSoftwareCardParentAri = class _JiraSoftwareCardParentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._cardParentId = opts.resourceIdSegmentValues.cardParentId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get cardParentId() {
    return this._cardParentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareCardParentAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareCardParentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareCardParentAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareCardParentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.cardParentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        cardParentId: opts.cardParentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareCardParentAriStaticOpts);
    return new _JiraSoftwareCardParentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareCardParentAriStaticOpts);
    return new _JiraSoftwareCardParentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      cardParentId: this.cardParentId
    };
  }
};

// src/jira-software/column/types.ts
var JiraSoftwareColumnAriResourceOwner = "jira-software", JiraSoftwareColumnAriResourceType = "column";

// src/jira-software/column/manifest.ts
var jiraSoftwareColumnAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareColumnAriResourceOwner,
  resourceType: JiraSoftwareColumnAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{columnId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    columnId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/column/index.ts
var JiraSoftwareColumnAri = class _JiraSoftwareColumnAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._columnId = opts.resourceIdSegmentValues.columnId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get columnId() {
    return this._columnId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareColumnAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareColumnAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareColumnAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareColumnAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.columnId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        columnId: opts.columnId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareColumnAriStaticOpts);
    return new _JiraSoftwareColumnAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareColumnAriStaticOpts);
    return new _JiraSoftwareColumnAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      columnId: this.columnId
    };
  }
};

// src/jira-software/custom-filter/types.ts
var JiraSoftwareCustomFilterAriResourceOwner = "jira-software", JiraSoftwareCustomFilterAriResourceType = "custom-filter";

// src/jira-software/custom-filter/manifest.ts
var jiraSoftwareCustomFilterAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareCustomFilterAriResourceOwner,
  resourceType: JiraSoftwareCustomFilterAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{customFilterId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    customFilterId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/custom-filter/index.ts
var JiraSoftwareCustomFilterAri = class _JiraSoftwareCustomFilterAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._customFilterId = opts.resourceIdSegmentValues.customFilterId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get customFilterId() {
    return this._customFilterId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareCustomFilterAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareCustomFilterAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareCustomFilterAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareCustomFilterAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.customFilterId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        customFilterId: opts.customFilterId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareCustomFilterAriStaticOpts);
    return new _JiraSoftwareCustomFilterAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareCustomFilterAriStaticOpts);
    return new _JiraSoftwareCustomFilterAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      customFilterId: this.customFilterId
    };
  }
};

// src/jira-software/role/types.ts
var JiraSoftwareRoleAriResourceOwner = "jira-software", JiraSoftwareRoleAriResourceType = "role";

// src/jira-software/role/manifest.ts
var jiraSoftwareRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraSoftwareRoleAriResourceOwner,
  resourceType: JiraSoftwareRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/role/index.ts
var JiraSoftwareRoleAri = class _JiraSoftwareRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareRoleAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraSoftwareRoleAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareRoleAriStaticOpts);
    return new _JiraSoftwareRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareRoleAriStaticOpts);
    return new _JiraSoftwareRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/jira-software/site/types.ts
var JiraSoftwareSiteAriResourceOwner = "jira-software", JiraSoftwareSiteAriResourceType = "site";

// src/jira-software/site/manifest.ts
var jiraSoftwareSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: JiraSoftwareSiteAriResourceOwner,
  resourceType: JiraSoftwareSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/site/index.ts
var JiraSoftwareSiteAri = class _JiraSoftwareSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareSiteAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jiraSoftwareSiteAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareSiteAriStaticOpts);
    return new _JiraSoftwareSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareSiteAriStaticOpts);
    return new _JiraSoftwareSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/jira-software/swimlane/types.ts
var JiraSoftwareSwimlaneAriResourceOwner = "jira-software", JiraSoftwareSwimlaneAriResourceType = "swimlane";

// src/jira-software/swimlane/manifest.ts
var jiraSoftwareSwimlaneAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareSwimlaneAriResourceOwner,
  resourceType: JiraSoftwareSwimlaneAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{swimlaneId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    swimlaneId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/swimlane/index.ts
var JiraSoftwareSwimlaneAri = class _JiraSoftwareSwimlaneAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._swimlaneId = opts.resourceIdSegmentValues.swimlaneId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get swimlaneId() {
    return this._swimlaneId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareSwimlaneAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareSwimlaneAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareSwimlaneAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareSwimlaneAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.swimlaneId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        swimlaneId: opts.swimlaneId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareSwimlaneAriStaticOpts);
    return new _JiraSoftwareSwimlaneAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareSwimlaneAriStaticOpts);
    return new _JiraSoftwareSwimlaneAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      swimlaneId: this.swimlaneId
    };
  }
};

// src/jira-software/user-board-config/types.ts
var JiraSoftwareUserBoardConfigAriResourceOwner = "jira-software", JiraSoftwareUserBoardConfigAriResourceType = "user-board-config";

// src/jira-software/user-board-config/manifest.ts
var jiraSoftwareUserBoardConfigAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareUserBoardConfigAriResourceOwner,
  resourceType: JiraSoftwareUserBoardConfigAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/user-board-config/index.ts
var JiraSoftwareUserBoardConfigAri = class _JiraSoftwareUserBoardConfigAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareUserBoardConfigAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareUserBoardConfigAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareUserBoardConfigAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareUserBoardConfigAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareUserBoardConfigAriStaticOpts);
    return new _JiraSoftwareUserBoardConfigAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareUserBoardConfigAriStaticOpts);
    return new _JiraSoftwareUserBoardConfigAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId
    };
  }
};

// src/jira-software/view-config/types.ts
var JiraSoftwareViewConfigAriResourceOwner = "jira-software", JiraSoftwareViewConfigAriResourceType = "view-config";

// src/jira-software/view-config/manifest.ts
var jiraSoftwareViewConfigAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: JiraSoftwareViewConfigAriResourceOwner,
  resourceType: JiraSoftwareViewConfigAriResourceType,
  resourceIdSlug: "activation/{activationId}/{boardId}/{viewType}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    boardId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    viewType: /(board|backlog|timeline)/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/view-config/index.ts
var JiraSoftwareViewConfigAri = class _JiraSoftwareViewConfigAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._boardId = opts.resourceIdSegmentValues.boardId, this._viewType = opts.resourceIdSegmentValues.viewType;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get boardId() {
    return this._boardId;
  }
  get viewType() {
    return this._viewType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareViewConfigAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareViewConfigAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareViewConfigAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareViewConfigAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.boardId}/${opts.viewType}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        boardId: opts.boardId,
        viewType: opts.viewType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareViewConfigAriStaticOpts);
    return new _JiraSoftwareViewConfigAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareViewConfigAriStaticOpts);
    return new _JiraSoftwareViewConfigAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      boardId: this.boardId,
      viewType: this.viewType
    };
  }
};

// src/linking-platform/datasource/types.ts
var LinkingPlatformDatasourceAriResourceOwner = "linking-platform", LinkingPlatformDatasourceAriResourceType = "datasource";

// src/linking-platform/datasource/manifest.ts
var linkingPlatformDatasourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: LinkingPlatformDatasourceAriResourceOwner,
  resourceType: LinkingPlatformDatasourceAriResourceType,
  resourceIdSlug: "{datasourceId}",
  resourceIdSegmentFormats: {
    datasourceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/linking-platform/datasource/index.ts
var LinkingPlatformDatasourceAri = class _LinkingPlatformDatasourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._datasourceId = opts.resourceIdSegmentValues.datasourceId;
  }
  get datasourceId() {
    return this._datasourceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: linkingPlatformDatasourceAriStaticOpts.qualifier,
      platformQualifier: linkingPlatformDatasourceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: linkingPlatformDatasourceAriStaticOpts.resourceOwner,
      resourceType: linkingPlatformDatasourceAriStaticOpts.resourceType,
      resourceId: `${opts.datasourceId}`,
      resourceIdSegmentValues: {
        datasourceId: opts.datasourceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, linkingPlatformDatasourceAriStaticOpts);
    return new _LinkingPlatformDatasourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, linkingPlatformDatasourceAriStaticOpts);
    return new _LinkingPlatformDatasourceAri(opts);
  }
  getVariables() {
    return {
      datasourceId: this.datasourceId
    };
  }
};

// src/loom/site/types.ts
var LoomSiteAriResourceOwner = "loom", LoomSiteAriResourceType = "site";

// src/loom/site/manifest.ts
var loomSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: LoomSiteAriResourceOwner,
  resourceType: LoomSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/loom/site/index.ts
var LoomSiteAri = class _LoomSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: loomSiteAriStaticOpts.qualifier,
      platformQualifier: loomSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: loomSiteAriStaticOpts.resourceOwner,
      resourceType: loomSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, loomSiteAriStaticOpts);
    return new _LoomSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, loomSiteAriStaticOpts);
    return new _LoomSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/maker-space/group/types.ts
var MakerSpaceGroupAriResourceOwner = "maker-space", MakerSpaceGroupAriResourceType = "group";

// src/maker-space/group/manifest.ts
var makerSpaceGroupAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MakerSpaceGroupAriResourceOwner,
  resourceType: MakerSpaceGroupAriResourceType,
  resourceIdSlug: "{groupId}",
  resourceIdSegmentFormats: {
    groupId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/maker-space/group/index.ts
var MakerSpaceGroupAri = class _MakerSpaceGroupAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._groupId = opts.resourceIdSegmentValues.groupId;
  }
  get groupId() {
    return this._groupId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: makerSpaceGroupAriStaticOpts.qualifier,
      platformQualifier: makerSpaceGroupAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: makerSpaceGroupAriStaticOpts.resourceOwner,
      resourceType: makerSpaceGroupAriStaticOpts.resourceType,
      resourceId: `${opts.groupId}`,
      resourceIdSegmentValues: {
        groupId: opts.groupId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, makerSpaceGroupAriStaticOpts);
    return new _MakerSpaceGroupAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, makerSpaceGroupAriStaticOpts);
    return new _MakerSpaceGroupAri(opts);
  }
  getVariables() {
    return {
      groupId: this.groupId
    };
  }
};

// src/mapi/role/types.ts
var MapiRoleAriResourceOwner = "mapi", MapiRoleAriResourceType = "role";

// src/mapi/role/manifest.ts
var mapiRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MapiRoleAriResourceOwner,
  resourceType: MapiRoleAriResourceType,
  resourceIdSlug: "scope/{roleTypeId}",
  resourceIdSegmentFormats: {
    roleTypeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/mapi/role/index.ts
var MapiRoleAri = class _MapiRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleTypeId = opts.resourceIdSegmentValues.roleTypeId;
  }
  get roleTypeId() {
    return this._roleTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mapiRoleAriStaticOpts.qualifier,
      platformQualifier: mapiRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mapiRoleAriStaticOpts.resourceOwner,
      resourceType: mapiRoleAriStaticOpts.resourceType,
      resourceId: `scope/${opts.roleTypeId}`,
      resourceIdSegmentValues: {
        roleTypeId: opts.roleTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mapiRoleAriStaticOpts);
    return new _MapiRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mapiRoleAriStaticOpts);
    return new _MapiRoleAri(opts);
  }
  getVariables() {
    return {
      roleTypeId: this.roleTypeId
    };
  }
};

// src/marketing/customer-domain/types.ts
var MarketingCustomerDomainAriResourceOwner = "marketing", MarketingCustomerDomainAriResourceType = "customer-domain";

// src/marketing/customer-domain/manifest.ts
var marketingCustomerDomainAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MarketingCustomerDomainAriResourceOwner,
  resourceType: MarketingCustomerDomainAriResourceType,
  resourceIdSlug: "{domainBase64}",
  resourceIdSegmentFormats: {
    domainBase64: /[a-zA-Z0-9=]+={0,1}/
    // eslint-disable-line no-useless-escape
  }
};

// src/marketing/customer-domain/index.ts
var MarketingCustomerDomainAri = class _MarketingCustomerDomainAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._domainBase64 = opts.resourceIdSegmentValues.domainBase64;
  }
  get domainBase64() {
    return this._domainBase64;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: marketingCustomerDomainAriStaticOpts.qualifier,
      platformQualifier: marketingCustomerDomainAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: marketingCustomerDomainAriStaticOpts.resourceOwner,
      resourceType: marketingCustomerDomainAriStaticOpts.resourceType,
      resourceId: `${opts.domainBase64}`,
      resourceIdSegmentValues: {
        domainBase64: opts.domainBase64
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, marketingCustomerDomainAriStaticOpts);
    return new _MarketingCustomerDomainAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, marketingCustomerDomainAriStaticOpts);
    return new _MarketingCustomerDomainAri(opts);
  }
  getVariables() {
    return {
      domainBase64: this.domainBase64
    };
  }
};

// src/marketplace/team/types.ts
var MarketplaceTeamAriResourceOwner = "marketplace", MarketplaceTeamAriResourceType = "team";

// src/marketplace/team/manifest.ts
var marketplaceTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MarketplaceTeamAriResourceOwner,
  resourceType: MarketplaceTeamAriResourceType,
  resourceIdSlug: "{teamId}",
  resourceIdSegmentFormats: {
    teamId: /[a-zA-Z0-9.\-_~]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/marketplace/team/index.ts
var MarketplaceTeamAri = class _MarketplaceTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId;
  }
  get teamId() {
    return this._teamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: marketplaceTeamAriStaticOpts.qualifier,
      platformQualifier: marketplaceTeamAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: marketplaceTeamAriStaticOpts.resourceOwner,
      resourceType: marketplaceTeamAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, marketplaceTeamAriStaticOpts);
    return new _MarketplaceTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, marketplaceTeamAriStaticOpts);
    return new _MarketplaceTeamAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId
    };
  }
};

// src/measurement/email-uuid/types.ts
var MeasurementEmailUuidAriResourceOwner = "measurement", MeasurementEmailUuidAriResourceType = "email-uuid";

// src/measurement/email-uuid/manifest.ts
var measurementEmailUuidAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MeasurementEmailUuidAriResourceOwner,
  resourceType: MeasurementEmailUuidAriResourceType,
  resourceIdSlug: "{emailId}",
  resourceIdSegmentFormats: {
    emailId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/measurement/email-uuid/index.ts
var MeasurementEmailUuidAri = class _MeasurementEmailUuidAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._emailId = opts.resourceIdSegmentValues.emailId;
  }
  get emailId() {
    return this._emailId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: measurementEmailUuidAriStaticOpts.qualifier,
      platformQualifier: measurementEmailUuidAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: measurementEmailUuidAriStaticOpts.resourceOwner,
      resourceType: measurementEmailUuidAriStaticOpts.resourceType,
      resourceId: `${opts.emailId}`,
      resourceIdSegmentValues: {
        emailId: opts.emailId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, measurementEmailUuidAriStaticOpts);
    return new _MeasurementEmailUuidAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, measurementEmailUuidAriStaticOpts);
    return new _MeasurementEmailUuidAri(opts);
  }
  getVariables() {
    return {
      emailId: this.emailId
    };
  }
};

// src/measurement/site-user/types.ts
var MeasurementSiteUserAriResourceOwner = "measurement", MeasurementSiteUserAriResourceType = "site-user";

// src/measurement/site-user/manifest.ts
var measurementSiteUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MeasurementSiteUserAriResourceOwner,
  resourceType: MeasurementSiteUserAriResourceType,
  resourceIdSlug: "{siteId}/{aaId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    aaId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/measurement/site-user/index.ts
var MeasurementSiteUserAri = class _MeasurementSiteUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId, this._aaId = opts.resourceIdSegmentValues.aaId;
  }
  get siteId() {
    return this._siteId;
  }
  get aaId() {
    return this._aaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: measurementSiteUserAriStaticOpts.qualifier,
      platformQualifier: measurementSiteUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: measurementSiteUserAriStaticOpts.resourceOwner,
      resourceType: measurementSiteUserAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}/${opts.aaId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId,
        aaId: opts.aaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, measurementSiteUserAriStaticOpts);
    return new _MeasurementSiteUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, measurementSiteUserAriStaticOpts);
    return new _MeasurementSiteUserAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      aaId: this.aaId
    };
  }
};

// src/measurement/user/types.ts
var MeasurementUserAriResourceOwner = "measurement", MeasurementUserAriResourceType = "user";

// src/measurement/user/manifest.ts
var measurementUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MeasurementUserAriResourceOwner,
  resourceType: MeasurementUserAriResourceType,
  resourceIdSlug: "ff-client-anonymous/{anonUserId}",
  resourceIdSegmentFormats: {
    anonUserId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/measurement/user/index.ts
var MeasurementUserAri = class _MeasurementUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._anonUserId = opts.resourceIdSegmentValues.anonUserId;
  }
  get anonUserId() {
    return this._anonUserId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: measurementUserAriStaticOpts.qualifier,
      platformQualifier: measurementUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: measurementUserAriStaticOpts.resourceOwner,
      resourceType: measurementUserAriStaticOpts.resourceType,
      resourceId: `ff-client-anonymous/${opts.anonUserId}`,
      resourceIdSegmentValues: {
        anonUserId: opts.anonUserId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, measurementUserAriStaticOpts);
    return new _MeasurementUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, measurementUserAriStaticOpts);
    return new _MeasurementUserAri(opts);
  }
  getVariables() {
    return {
      anonUserId: this.anonUserId
    };
  }
};

// src/media/file/types.ts
var MediaFileAriResourceOwner = "media", MediaFileAriResourceType = "file";

// src/media/file/manifest.ts
var mediaFileAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MediaFileAriResourceOwner,
  resourceType: MediaFileAriResourceType,
  resourceIdSlug: "{fileId}",
  resourceIdSegmentFormats: {
    fileId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/media/file/index.ts
var MediaFileAri = class _MediaFileAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._fileId = opts.resourceIdSegmentValues.fileId;
  }
  get fileId() {
    return this._fileId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mediaFileAriStaticOpts.qualifier,
      platformQualifier: mediaFileAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mediaFileAriStaticOpts.resourceOwner,
      resourceType: mediaFileAriStaticOpts.resourceType,
      resourceId: `${opts.fileId}`,
      resourceIdSegmentValues: {
        fileId: opts.fileId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mediaFileAriStaticOpts);
    return new _MediaFileAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mediaFileAriStaticOpts);
    return new _MediaFileAri(opts);
  }
  getVariables() {
    return {
      fileId: this.fileId
    };
  }
};

// src/mercury/comment/types.ts
var MercuryCommentAriResourceOwner = "mercury", MercuryCommentAriResourceType = "comment";

// src/mercury/comment/manifest.ts
var mercuryCommentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: MercuryCommentAriResourceOwner,
  resourceType: MercuryCommentAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{commentUuid}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    commentUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/comment/index.ts
var MercuryCommentAri = class _MercuryCommentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._commentUuid = opts.resourceIdSegmentValues.commentUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get commentUuid() {
    return this._commentUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryCommentAriStaticOpts.qualifier,
      platformQualifier: mercuryCommentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryCommentAriStaticOpts.resourceOwner,
      resourceType: mercuryCommentAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.commentUuid}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        commentUuid: opts.commentUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryCommentAriStaticOpts);
    return new _MercuryCommentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryCommentAriStaticOpts);
    return new _MercuryCommentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      commentUuid: this.commentUuid
    };
  }
};

// src/mercury/focus-area/types.ts
var MercuryFocusAreaAriResourceOwner = "mercury", MercuryFocusAreaAriResourceType = "focus-area";

// src/mercury/focus-area/manifest.ts
var mercuryFocusAreaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: MercuryFocusAreaAriResourceOwner,
  resourceType: MercuryFocusAreaAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{focusAreaId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    focusAreaId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/focus-area/index.ts
var MercuryFocusAreaAri = class _MercuryFocusAreaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._focusAreaId = opts.resourceIdSegmentValues.focusAreaId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get focusAreaId() {
    return this._focusAreaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryFocusAreaAriStaticOpts.qualifier,
      platformQualifier: mercuryFocusAreaAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryFocusAreaAriStaticOpts.resourceOwner,
      resourceType: mercuryFocusAreaAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.focusAreaId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        focusAreaId: opts.focusAreaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryFocusAreaAriStaticOpts);
    return new _MercuryFocusAreaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryFocusAreaAriStaticOpts);
    return new _MercuryFocusAreaAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      focusAreaId: this.focusAreaId
    };
  }
};

// src/mercury/focus-area-status-update/types.ts
var MercuryFocusAreaStatusUpdateAriResourceOwner = "mercury", MercuryFocusAreaStatusUpdateAriResourceType = "focus-area-status-update";

// src/mercury/focus-area-status-update/manifest.ts
var mercuryFocusAreaStatusUpdateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: MercuryFocusAreaStatusUpdateAriResourceOwner,
  resourceType: MercuryFocusAreaStatusUpdateAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{focusAreaStatusUpdateId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    focusAreaStatusUpdateId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/focus-area-status-update/index.ts
var MercuryFocusAreaStatusUpdateAri = class _MercuryFocusAreaStatusUpdateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._focusAreaStatusUpdateId = opts.resourceIdSegmentValues.focusAreaStatusUpdateId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get focusAreaStatusUpdateId() {
    return this._focusAreaStatusUpdateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryFocusAreaStatusUpdateAriStaticOpts.qualifier,
      platformQualifier: mercuryFocusAreaStatusUpdateAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryFocusAreaStatusUpdateAriStaticOpts.resourceOwner,
      resourceType: mercuryFocusAreaStatusUpdateAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.focusAreaStatusUpdateId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        focusAreaStatusUpdateId: opts.focusAreaStatusUpdateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryFocusAreaStatusUpdateAriStaticOpts);
    return new _MercuryFocusAreaStatusUpdateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryFocusAreaStatusUpdateAriStaticOpts);
    return new _MercuryFocusAreaStatusUpdateAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      focusAreaStatusUpdateId: this.focusAreaStatusUpdateId
    };
  }
};

// src/mercury/program/types.ts
var MercuryProgramAriResourceOwner = "mercury", MercuryProgramAriResourceType = "program";

// src/mercury/program/manifest.ts
var mercuryProgramAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: MercuryProgramAriResourceOwner,
  resourceType: MercuryProgramAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{programId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    programId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/program/index.ts
var MercuryProgramAri = class _MercuryProgramAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._programId = opts.resourceIdSegmentValues.programId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get programId() {
    return this._programId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryProgramAriStaticOpts.qualifier,
      platformQualifier: mercuryProgramAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryProgramAriStaticOpts.resourceOwner,
      resourceType: mercuryProgramAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.programId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        programId: opts.programId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryProgramAriStaticOpts);
    return new _MercuryProgramAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryProgramAriStaticOpts);
    return new _MercuryProgramAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      programId: this.programId
    };
  }
};

// src/mercury/program-status-update/types.ts
var MercuryProgramStatusUpdateAriResourceOwner = "mercury", MercuryProgramStatusUpdateAriResourceType = "program-status-update";

// src/mercury/program-status-update/manifest.ts
var mercuryProgramStatusUpdateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: MercuryProgramStatusUpdateAriResourceOwner,
  resourceType: MercuryProgramStatusUpdateAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{programStatusUpdateId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    programStatusUpdateId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/program-status-update/index.ts
var MercuryProgramStatusUpdateAri = class _MercuryProgramStatusUpdateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._programStatusUpdateId = opts.resourceIdSegmentValues.programStatusUpdateId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get programStatusUpdateId() {
    return this._programStatusUpdateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryProgramStatusUpdateAriStaticOpts.qualifier,
      platformQualifier: mercuryProgramStatusUpdateAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryProgramStatusUpdateAriStaticOpts.resourceOwner,
      resourceType: mercuryProgramStatusUpdateAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.programStatusUpdateId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        programStatusUpdateId: opts.programStatusUpdateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryProgramStatusUpdateAriStaticOpts);
    return new _MercuryProgramStatusUpdateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryProgramStatusUpdateAriStaticOpts);
    return new _MercuryProgramStatusUpdateAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      programStatusUpdateId: this.programStatusUpdateId
    };
  }
};

// src/mercury/role/types.ts
var MercuryRoleAriResourceOwner = "mercury", MercuryRoleAriResourceType = "role";

// src/mercury/role/manifest.ts
var mercuryRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MercuryRoleAriResourceOwner,
  resourceType: MercuryRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/role/index.ts
var MercuryRoleAri = class _MercuryRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryRoleAriStaticOpts.qualifier,
      platformQualifier: mercuryRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mercuryRoleAriStaticOpts.resourceOwner,
      resourceType: mercuryRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryRoleAriStaticOpts);
    return new _MercuryRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryRoleAriStaticOpts);
    return new _MercuryRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/mercury/site/types.ts
var MercurySiteAriResourceOwner = "mercury", MercurySiteAriResourceType = "site";

// src/mercury/site/manifest.ts
var mercurySiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: MercurySiteAriResourceOwner,
  resourceType: MercurySiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/site/index.ts
var MercurySiteAri = class _MercurySiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercurySiteAriStaticOpts.qualifier,
      platformQualifier: mercurySiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mercurySiteAriStaticOpts.resourceOwner,
      resourceType: mercurySiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercurySiteAriStaticOpts);
    return new _MercurySiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercurySiteAriStaticOpts);
    return new _MercurySiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/mercury/workspace/types.ts
var MercuryWorkspaceAriResourceOwner = "mercury", MercuryWorkspaceAriResourceType = "workspace";

// src/mercury/workspace/manifest.ts
var mercuryWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: MercuryWorkspaceAriResourceOwner,
  resourceType: MercuryWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/workspace/index.ts
var MercuryWorkspaceAri = class _MercuryWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryWorkspaceAriStaticOpts.qualifier,
      platformQualifier: mercuryWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryWorkspaceAriStaticOpts.resourceOwner,
      resourceType: mercuryWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryWorkspaceAriStaticOpts);
    return new _MercuryWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryWorkspaceAriStaticOpts);
    return new _MercuryWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId
    };
  }
};

// src/microsoft/channel/types.ts
var MicrosoftChannelAriResourceOwner = "microsoft", MicrosoftChannelAriResourceType = "channel";

// src/microsoft/channel/manifest.ts
var microsoftChannelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: MicrosoftChannelAriResourceOwner,
  resourceType: MicrosoftChannelAriResourceType,
  resourceIdSlug: "tenantId/{tenantId}/teamId/{teamId}/channelId/{channelId}",
  resourceIdSegmentFormats: {
    tenantId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    teamId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    channelId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/microsoft/channel/index.ts
var MicrosoftChannelAri = class _MicrosoftChannelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._tenantId = opts.resourceIdSegmentValues.tenantId, this._teamId = opts.resourceIdSegmentValues.teamId, this._channelId = opts.resourceIdSegmentValues.channelId;
  }
  get tenantId() {
    return this._tenantId;
  }
  get teamId() {
    return this._teamId;
  }
  get channelId() {
    return this._channelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: microsoftChannelAriStaticOpts.qualifier,
      platformQualifier: microsoftChannelAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: microsoftChannelAriStaticOpts.resourceOwner,
      resourceType: microsoftChannelAriStaticOpts.resourceType,
      resourceId: `tenantId/${opts.tenantId}/teamId/${opts.teamId}/channelId/${opts.channelId}`,
      resourceIdSegmentValues: {
        tenantId: opts.tenantId,
        teamId: opts.teamId,
        channelId: opts.channelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, microsoftChannelAriStaticOpts);
    return new _MicrosoftChannelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, microsoftChannelAriStaticOpts);
    return new _MicrosoftChannelAri(opts);
  }
  getVariables() {
    return {
      tenantId: this.tenantId,
      teamId: this.teamId,
      channelId: this.channelId
    };
  }
};

// src/microsoft/sharepoint-document/types.ts
var MicrosoftSharepointDocumentAriResourceOwner = "microsoft", MicrosoftSharepointDocumentAriResourceType = "sharepoint-document";

// src/microsoft/sharepoint-document/manifest.ts
var microsoftSharepointDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: MicrosoftSharepointDocumentAriResourceOwner,
  resourceType: MicrosoftSharepointDocumentAriResourceType,
  resourceIdSlug: "driveId/{driveId}/fileId/{fileId}",
  resourceIdSegmentFormats: {
    driveId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    fileId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/microsoft/sharepoint-document/index.ts
var MicrosoftSharepointDocumentAri = class _MicrosoftSharepointDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._driveId = opts.resourceIdSegmentValues.driveId, this._fileId = opts.resourceIdSegmentValues.fileId;
  }
  get driveId() {
    return this._driveId;
  }
  get fileId() {
    return this._fileId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: microsoftSharepointDocumentAriStaticOpts.qualifier,
      platformQualifier: microsoftSharepointDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: microsoftSharepointDocumentAriStaticOpts.resourceOwner,
      resourceType: microsoftSharepointDocumentAriStaticOpts.resourceType,
      resourceId: `driveId/${opts.driveId}/fileId/${opts.fileId}`,
      resourceIdSegmentValues: {
        driveId: opts.driveId,
        fileId: opts.fileId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, microsoftSharepointDocumentAriStaticOpts);
    return new _MicrosoftSharepointDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, microsoftSharepointDocumentAriStaticOpts);
    return new _MicrosoftSharepointDocumentAri(opts);
  }
  getVariables() {
    return {
      driveId: this.driveId,
      fileId: this.fileId
    };
  }
};

// src/oauth/client/types.ts
var OauthClientAriResourceOwner = "oauth", OauthClientAriResourceType = "client";

// src/oauth/client/manifest.ts
var oauthClientAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OauthClientAriResourceOwner,
  resourceType: OauthClientAriResourceType,
  resourceIdSlug: "{clientId}",
  resourceIdSegmentFormats: {
    clientId: /[0-9a-zA-Z-_]{5,50}/
    // eslint-disable-line no-useless-escape
  }
};

// src/oauth/client/index.ts
var OauthClientAri = class _OauthClientAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._clientId = opts.resourceIdSegmentValues.clientId;
  }
  get clientId() {
    return this._clientId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: oauthClientAriStaticOpts.qualifier,
      platformQualifier: oauthClientAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: oauthClientAriStaticOpts.resourceOwner,
      resourceType: oauthClientAriStaticOpts.resourceType,
      resourceId: `${opts.clientId}`,
      resourceIdSegmentValues: {
        clientId: opts.clientId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, oauthClientAriStaticOpts);
    return new _OauthClientAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, oauthClientAriStaticOpts);
    return new _OauthClientAri(opts);
  }
  getVariables() {
    return {
      clientId: this.clientId
    };
  }
};

// src/opsgenie/account-login/types.ts
var OpsgenieAccountLoginAriResourceOwner = "opsgenie", OpsgenieAccountLoginAriResourceType = "account-login";

// src/opsgenie/account-login/manifest.ts
var opsgenieAccountLoginAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieAccountLoginAriResourceOwner,
  resourceType: OpsgenieAccountLoginAriResourceType,
  resourceIdSlug: "{workspaceId}/{accountLoginId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    accountLoginId: /[a-zA-Z0-9\-\:]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/account-login/index.ts
var OpsgenieAccountLoginAri = class _OpsgenieAccountLoginAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._accountLoginId = opts.resourceIdSegmentValues.accountLoginId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get accountLoginId() {
    return this._accountLoginId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieAccountLoginAriStaticOpts.qualifier,
      platformQualifier: opsgenieAccountLoginAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieAccountLoginAriStaticOpts.resourceOwner,
      resourceType: opsgenieAccountLoginAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.accountLoginId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        accountLoginId: opts.accountLoginId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieAccountLoginAriStaticOpts);
    return new _OpsgenieAccountLoginAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieAccountLoginAriStaticOpts);
    return new _OpsgenieAccountLoginAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      accountLoginId: this.accountLoginId
    };
  }
};

// src/opsgenie/account-settings/types.ts
var OpsgenieAccountSettingsAriResourceOwner = "opsgenie", OpsgenieAccountSettingsAriResourceType = "account-settings";

// src/opsgenie/account-settings/manifest.ts
var opsgenieAccountSettingsAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieAccountSettingsAriResourceOwner,
  resourceType: OpsgenieAccountSettingsAriResourceType,
  resourceIdSlug: "{workspaceId}/{accountSettingsId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    accountSettingsId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/account-settings/index.ts
var OpsgenieAccountSettingsAri = class _OpsgenieAccountSettingsAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._accountSettingsId = opts.resourceIdSegmentValues.accountSettingsId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get accountSettingsId() {
    return this._accountSettingsId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieAccountSettingsAriStaticOpts.qualifier,
      platformQualifier: opsgenieAccountSettingsAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieAccountSettingsAriStaticOpts.resourceOwner,
      resourceType: opsgenieAccountSettingsAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.accountSettingsId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        accountSettingsId: opts.accountSettingsId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieAccountSettingsAriStaticOpts);
    return new _OpsgenieAccountSettingsAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieAccountSettingsAriStaticOpts);
    return new _OpsgenieAccountSettingsAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      accountSettingsId: this.accountSettingsId
    };
  }
};

// src/opsgenie/alert/types.ts
var OpsgenieAlertAriResourceOwner = "opsgenie", OpsgenieAlertAriResourceType = "alert";

// src/opsgenie/alert/manifest.ts
var opsgenieAlertAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieAlertAriResourceOwner,
  resourceType: OpsgenieAlertAriResourceType,
  resourceIdSlug: "{workspaceId}/{alertId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    alertId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/alert/index.ts
var OpsgenieAlertAri = class _OpsgenieAlertAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._alertId = opts.resourceIdSegmentValues.alertId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get alertId() {
    return this._alertId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieAlertAriStaticOpts.qualifier,
      platformQualifier: opsgenieAlertAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieAlertAriStaticOpts.resourceOwner,
      resourceType: opsgenieAlertAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.alertId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        alertId: opts.alertId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieAlertAriStaticOpts);
    return new _OpsgenieAlertAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieAlertAriStaticOpts);
    return new _OpsgenieAlertAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      alertId: this.alertId
    };
  }
};

// src/opsgenie/alert-recipient-link/types.ts
var OpsgenieAlertRecipientLinkAriResourceOwner = "opsgenie", OpsgenieAlertRecipientLinkAriResourceType = "alert-recipient-link";

// src/opsgenie/alert-recipient-link/manifest.ts
var opsgenieAlertRecipientLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieAlertRecipientLinkAriResourceOwner,
  resourceType: OpsgenieAlertRecipientLinkAriResourceType,
  resourceIdSlug: "{workspaceId}/{alertId}/{recipientType}/{recipientId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    alertId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}(-[0-9]*)?/,
    // eslint-disable-line no-useless-escape
    recipientType: /(?:user|team)/,
    // eslint-disable-line no-useless-escape
    recipientId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/alert-recipient-link/index.ts
var OpsgenieAlertRecipientLinkAri = class _OpsgenieAlertRecipientLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._alertId = opts.resourceIdSegmentValues.alertId, this._recipientType = opts.resourceIdSegmentValues.recipientType, this._recipientId = opts.resourceIdSegmentValues.recipientId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get alertId() {
    return this._alertId;
  }
  get recipientType() {
    return this._recipientType;
  }
  get recipientId() {
    return this._recipientId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieAlertRecipientLinkAriStaticOpts.qualifier,
      platformQualifier: opsgenieAlertRecipientLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieAlertRecipientLinkAriStaticOpts.resourceOwner,
      resourceType: opsgenieAlertRecipientLinkAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.alertId}/${opts.recipientType}/${opts.recipientId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        alertId: opts.alertId,
        recipientType: opts.recipientType,
        recipientId: opts.recipientId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieAlertRecipientLinkAriStaticOpts);
    return new _OpsgenieAlertRecipientLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieAlertRecipientLinkAriStaticOpts);
    return new _OpsgenieAlertRecipientLinkAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      alertId: this.alertId,
      recipientType: this.recipientType,
      recipientId: this.recipientId
    };
  }
};

// src/opsgenie/api-request-metric/types.ts
var OpsgenieApiRequestMetricAriResourceOwner = "opsgenie", OpsgenieApiRequestMetricAriResourceType = "api-request-metric";

// src/opsgenie/api-request-metric/manifest.ts
var opsgenieApiRequestMetricAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieApiRequestMetricAriResourceOwner,
  resourceType: OpsgenieApiRequestMetricAriResourceType,
  resourceIdSlug: "{workspaceId}/{apiRequestMetricId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    apiRequestMetricId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/api-request-metric/index.ts
var OpsgenieApiRequestMetricAri = class _OpsgenieApiRequestMetricAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._apiRequestMetricId = opts.resourceIdSegmentValues.apiRequestMetricId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get apiRequestMetricId() {
    return this._apiRequestMetricId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieApiRequestMetricAriStaticOpts.qualifier,
      platformQualifier: opsgenieApiRequestMetricAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieApiRequestMetricAriStaticOpts.resourceOwner,
      resourceType: opsgenieApiRequestMetricAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.apiRequestMetricId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        apiRequestMetricId: opts.apiRequestMetricId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieApiRequestMetricAriStaticOpts);
    return new _OpsgenieApiRequestMetricAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieApiRequestMetricAriStaticOpts);
    return new _OpsgenieApiRequestMetricAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      apiRequestMetricId: this.apiRequestMetricId
    };
  }
};

// src/opsgenie/call-routing/types.ts
var OpsgenieCallRoutingAriResourceOwner = "opsgenie", OpsgenieCallRoutingAriResourceType = "call-routing";

// src/opsgenie/call-routing/manifest.ts
var opsgenieCallRoutingAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieCallRoutingAriResourceOwner,
  resourceType: OpsgenieCallRoutingAriResourceType,
  resourceIdSlug: "{workspaceId}/{callRoutingId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    callRoutingId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/call-routing/index.ts
var OpsgenieCallRoutingAri = class _OpsgenieCallRoutingAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._callRoutingId = opts.resourceIdSegmentValues.callRoutingId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get callRoutingId() {
    return this._callRoutingId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieCallRoutingAriStaticOpts.qualifier,
      platformQualifier: opsgenieCallRoutingAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieCallRoutingAriStaticOpts.resourceOwner,
      resourceType: opsgenieCallRoutingAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.callRoutingId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        callRoutingId: opts.callRoutingId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieCallRoutingAriStaticOpts);
    return new _OpsgenieCallRoutingAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieCallRoutingAriStaticOpts);
    return new _OpsgenieCallRoutingAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      callRoutingId: this.callRoutingId
    };
  }
};

// src/opsgenie/custom-role/types.ts
var OpsgenieCustomRoleAriResourceOwner = "opsgenie", OpsgenieCustomRoleAriResourceType = "custom-role";

// src/opsgenie/custom-role/manifest.ts
var opsgenieCustomRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieCustomRoleAriResourceOwner,
  resourceType: OpsgenieCustomRoleAriResourceType,
  resourceIdSlug: "{workspaceId}/{opsgenieRoleType}/{customRoleId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    opsgenieRoleType: /(?:account|team|responder)/,
    // eslint-disable-line no-useless-escape
    customRoleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/custom-role/index.ts
var OpsgenieCustomRoleAri = class _OpsgenieCustomRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._opsgenieRoleType = opts.resourceIdSegmentValues.opsgenieRoleType, this._customRoleId = opts.resourceIdSegmentValues.customRoleId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get opsgenieRoleType() {
    return this._opsgenieRoleType;
  }
  get customRoleId() {
    return this._customRoleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieCustomRoleAriStaticOpts.qualifier,
      platformQualifier: opsgenieCustomRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieCustomRoleAriStaticOpts.resourceOwner,
      resourceType: opsgenieCustomRoleAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.opsgenieRoleType}/${opts.customRoleId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        opsgenieRoleType: opts.opsgenieRoleType,
        customRoleId: opts.customRoleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieCustomRoleAriStaticOpts);
    return new _OpsgenieCustomRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieCustomRoleAriStaticOpts);
    return new _OpsgenieCustomRoleAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      opsgenieRoleType: this.opsgenieRoleType,
      customRoleId: this.customRoleId
    };
  }
};

// src/opsgenie/deployment/types.ts
var OpsgenieDeploymentAriResourceOwner = "opsgenie", OpsgenieDeploymentAriResourceType = "deployment";

// src/opsgenie/deployment/manifest.ts
var opsgenieDeploymentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieDeploymentAriResourceOwner,
  resourceType: OpsgenieDeploymentAriResourceType,
  resourceIdSlug: "{workspaceId}/{deploymentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/deployment/index.ts
var OpsgenieDeploymentAri = class _OpsgenieDeploymentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieDeploymentAriStaticOpts.qualifier,
      platformQualifier: opsgenieDeploymentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieDeploymentAriStaticOpts.resourceOwner,
      resourceType: opsgenieDeploymentAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.deploymentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        deploymentId: opts.deploymentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieDeploymentAriStaticOpts);
    return new _OpsgenieDeploymentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieDeploymentAriStaticOpts);
    return new _OpsgenieDeploymentAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      deploymentId: this.deploymentId
    };
  }
};

// src/opsgenie/deployment-service-link/types.ts
var OpsgenieDeploymentServiceLinkAriResourceOwner = "opsgenie", OpsgenieDeploymentServiceLinkAriResourceType = "deployment-service-link";

// src/opsgenie/deployment-service-link/manifest.ts
var opsgenieDeploymentServiceLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieDeploymentServiceLinkAriResourceOwner,
  resourceType: OpsgenieDeploymentServiceLinkAriResourceType,
  resourceIdSlug: "{workspaceId}/{deploymentId}/{serviceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    deploymentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    serviceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/deployment-service-link/index.ts
var OpsgenieDeploymentServiceLinkAri = class _OpsgenieDeploymentServiceLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._deploymentId = opts.resourceIdSegmentValues.deploymentId, this._serviceId = opts.resourceIdSegmentValues.serviceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get deploymentId() {
    return this._deploymentId;
  }
  get serviceId() {
    return this._serviceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieDeploymentServiceLinkAriStaticOpts.qualifier,
      platformQualifier: opsgenieDeploymentServiceLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieDeploymentServiceLinkAriStaticOpts.resourceOwner,
      resourceType: opsgenieDeploymentServiceLinkAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.deploymentId}/${opts.serviceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        deploymentId: opts.deploymentId,
        serviceId: opts.serviceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieDeploymentServiceLinkAriStaticOpts);
    return new _OpsgenieDeploymentServiceLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieDeploymentServiceLinkAriStaticOpts);
    return new _OpsgenieDeploymentServiceLinkAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      deploymentId: this.deploymentId,
      serviceId: this.serviceId
    };
  }
};

// src/opsgenie/escalation/types.ts
var OpsgenieEscalationAriResourceOwner = "opsgenie", OpsgenieEscalationAriResourceType = "escalation";

// src/opsgenie/escalation/manifest.ts
var opsgenieEscalationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieEscalationAriResourceOwner,
  resourceType: OpsgenieEscalationAriResourceType,
  resourceIdSlug: "{workspaceId}/{escalationId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    escalationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/escalation/index.ts
var OpsgenieEscalationAri = class _OpsgenieEscalationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._escalationId = opts.resourceIdSegmentValues.escalationId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get escalationId() {
    return this._escalationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieEscalationAriStaticOpts.qualifier,
      platformQualifier: opsgenieEscalationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieEscalationAriStaticOpts.resourceOwner,
      resourceType: opsgenieEscalationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.escalationId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        escalationId: opts.escalationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieEscalationAriStaticOpts);
    return new _OpsgenieEscalationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieEscalationAriStaticOpts);
    return new _OpsgenieEscalationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      escalationId: this.escalationId
    };
  }
};

// src/opsgenie/event/types.ts
var OpsgenieEventAriResourceOwner = "opsgenie", OpsgenieEventAriResourceType = "event";

// src/opsgenie/event/manifest.ts
var opsgenieEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieEventAriResourceOwner,
  resourceType: OpsgenieEventAriResourceType,
  resourceIdSlug: "{eventType}/workspace/{workspaceId}/event/{eventId}",
  resourceIdSegmentFormats: {
    eventType: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    eventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/event/index.ts
var OpsgenieEventAri = class _OpsgenieEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._eventType = opts.resourceIdSegmentValues.eventType, this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._eventId = opts.resourceIdSegmentValues.eventId;
  }
  get eventType() {
    return this._eventType;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get eventId() {
    return this._eventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieEventAriStaticOpts.qualifier,
      platformQualifier: opsgenieEventAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieEventAriStaticOpts.resourceOwner,
      resourceType: opsgenieEventAriStaticOpts.resourceType,
      resourceId: `${opts.eventType}/workspace/${opts.workspaceId}/event/${opts.eventId}`,
      resourceIdSegmentValues: {
        eventType: opts.eventType,
        workspaceId: opts.workspaceId,
        eventId: opts.eventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieEventAriStaticOpts);
    return new _OpsgenieEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieEventAriStaticOpts);
    return new _OpsgenieEventAri(opts);
  }
  getVariables() {
    return {
      eventType: this.eventType,
      workspaceId: this.workspaceId,
      eventId: this.eventId
    };
  }
};

// src/opsgenie/incident/types.ts
var OpsgenieIncidentAriResourceOwner = "opsgenie", OpsgenieIncidentAriResourceType = "incident";

// src/opsgenie/incident/manifest.ts
var opsgenieIncidentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieIncidentAriResourceOwner,
  resourceType: OpsgenieIncidentAriResourceType,
  resourceIdSlug: "{workspaceId}/{incidentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/incident/index.ts
var OpsgenieIncidentAri = class _OpsgenieIncidentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._incidentId = opts.resourceIdSegmentValues.incidentId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get incidentId() {
    return this._incidentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieIncidentAriStaticOpts.qualifier,
      platformQualifier: opsgenieIncidentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieIncidentAriStaticOpts.resourceOwner,
      resourceType: opsgenieIncidentAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.incidentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        incidentId: opts.incidentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieIncidentAriStaticOpts);
    return new _OpsgenieIncidentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieIncidentAriStaticOpts);
    return new _OpsgenieIncidentAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      incidentId: this.incidentId
    };
  }
};

// src/opsgenie/incident-alert-link/types.ts
var OpsgenieIncidentAlertLinkAriResourceOwner = "opsgenie", OpsgenieIncidentAlertLinkAriResourceType = "incident-alert-link";

// src/opsgenie/incident-alert-link/manifest.ts
var opsgenieIncidentAlertLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieIncidentAlertLinkAriResourceOwner,
  resourceType: OpsgenieIncidentAlertLinkAriResourceType,
  resourceIdSlug: "{workspaceId}/{incidentId}/{alertId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    alertId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}(-[0-9]*)?/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/incident-alert-link/index.ts
var OpsgenieIncidentAlertLinkAri = class _OpsgenieIncidentAlertLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._incidentId = opts.resourceIdSegmentValues.incidentId, this._alertId = opts.resourceIdSegmentValues.alertId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get incidentId() {
    return this._incidentId;
  }
  get alertId() {
    return this._alertId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieIncidentAlertLinkAriStaticOpts.qualifier,
      platformQualifier: opsgenieIncidentAlertLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieIncidentAlertLinkAriStaticOpts.resourceOwner,
      resourceType: opsgenieIncidentAlertLinkAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.incidentId}/${opts.alertId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        incidentId: opts.incidentId,
        alertId: opts.alertId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieIncidentAlertLinkAriStaticOpts);
    return new _OpsgenieIncidentAlertLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieIncidentAlertLinkAriStaticOpts);
    return new _OpsgenieIncidentAlertLinkAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      incidentId: this.incidentId,
      alertId: this.alertId
    };
  }
};

// src/opsgenie/incident-status-update/types.ts
var OpsgenieIncidentStatusUpdateAriResourceOwner = "opsgenie", OpsgenieIncidentStatusUpdateAriResourceType = "incident-status-update";

// src/opsgenie/incident-status-update/manifest.ts
var opsgenieIncidentStatusUpdateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieIncidentStatusUpdateAriResourceOwner,
  resourceType: OpsgenieIncidentStatusUpdateAriResourceType,
  resourceIdSlug: "{workspaceId}/{incidentStatusUpdateId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incidentStatusUpdateId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/incident-status-update/index.ts
var OpsgenieIncidentStatusUpdateAri = class _OpsgenieIncidentStatusUpdateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._incidentStatusUpdateId = opts.resourceIdSegmentValues.incidentStatusUpdateId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get incidentStatusUpdateId() {
    return this._incidentStatusUpdateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieIncidentStatusUpdateAriStaticOpts.qualifier,
      platformQualifier: opsgenieIncidentStatusUpdateAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieIncidentStatusUpdateAriStaticOpts.resourceOwner,
      resourceType: opsgenieIncidentStatusUpdateAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.incidentStatusUpdateId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        incidentStatusUpdateId: opts.incidentStatusUpdateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieIncidentStatusUpdateAriStaticOpts);
    return new _OpsgenieIncidentStatusUpdateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieIncidentStatusUpdateAriStaticOpts);
    return new _OpsgenieIncidentStatusUpdateAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      incidentStatusUpdateId: this.incidentStatusUpdateId
    };
  }
};

// src/opsgenie/incoming-call-history/types.ts
var OpsgenieIncomingCallHistoryAriResourceOwner = "opsgenie", OpsgenieIncomingCallHistoryAriResourceType = "incoming-call-history";

// src/opsgenie/incoming-call-history/manifest.ts
var opsgenieIncomingCallHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieIncomingCallHistoryAriResourceOwner,
  resourceType: OpsgenieIncomingCallHistoryAriResourceType,
  resourceIdSlug: "{workspaceId}/{incomingCallEventId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    incomingCallEventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/incoming-call-history/index.ts
var OpsgenieIncomingCallHistoryAri = class _OpsgenieIncomingCallHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._incomingCallEventId = opts.resourceIdSegmentValues.incomingCallEventId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get incomingCallEventId() {
    return this._incomingCallEventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieIncomingCallHistoryAriStaticOpts.qualifier,
      platformQualifier: opsgenieIncomingCallHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieIncomingCallHistoryAriStaticOpts.resourceOwner,
      resourceType: opsgenieIncomingCallHistoryAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.incomingCallEventId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        incomingCallEventId: opts.incomingCallEventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieIncomingCallHistoryAriStaticOpts);
    return new _OpsgenieIncomingCallHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieIncomingCallHistoryAriStaticOpts);
    return new _OpsgenieIncomingCallHistoryAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      incomingCallEventId: this.incomingCallEventId
    };
  }
};

// src/opsgenie/integration/types.ts
var OpsgenieIntegrationAriResourceOwner = "opsgenie", OpsgenieIntegrationAriResourceType = "integration";

// src/opsgenie/integration/manifest.ts
var opsgenieIntegrationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieIntegrationAriResourceOwner,
  resourceType: OpsgenieIntegrationAriResourceType,
  resourceIdSlug: "{workspaceId}/{integrationId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    integrationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/integration/index.ts
var OpsgenieIntegrationAri = class _OpsgenieIntegrationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._integrationId = opts.resourceIdSegmentValues.integrationId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get integrationId() {
    return this._integrationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieIntegrationAriStaticOpts.qualifier,
      platformQualifier: opsgenieIntegrationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieIntegrationAriStaticOpts.resourceOwner,
      resourceType: opsgenieIntegrationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.integrationId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        integrationId: opts.integrationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieIntegrationAriStaticOpts);
    return new _OpsgenieIntegrationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieIntegrationAriStaticOpts);
    return new _OpsgenieIntegrationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      integrationId: this.integrationId
    };
  }
};

// src/opsgenie/notification/types.ts
var OpsgenieNotificationAriResourceOwner = "opsgenie", OpsgenieNotificationAriResourceType = "notification";

// src/opsgenie/notification/manifest.ts
var opsgenieNotificationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieNotificationAriResourceOwner,
  resourceType: OpsgenieNotificationAriResourceType,
  resourceIdSlug: "{workspaceId}/{notificationId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    notificationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/notification/index.ts
var OpsgenieNotificationAri = class _OpsgenieNotificationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._notificationId = opts.resourceIdSegmentValues.notificationId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get notificationId() {
    return this._notificationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieNotificationAriStaticOpts.qualifier,
      platformQualifier: opsgenieNotificationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieNotificationAriStaticOpts.resourceOwner,
      resourceType: opsgenieNotificationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.notificationId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        notificationId: opts.notificationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieNotificationAriStaticOpts);
    return new _OpsgenieNotificationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieNotificationAriStaticOpts);
    return new _OpsgenieNotificationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      notificationId: this.notificationId
    };
  }
};

// src/opsgenie/role/types.ts
var OpsgenieRoleAriResourceOwner = "opsgenie", OpsgenieRoleAriResourceType = "role";

// src/opsgenie/role/manifest.ts
var opsgenieRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieRoleAriResourceOwner,
  resourceType: OpsgenieRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/role/index.ts
var OpsgenieRoleAri = class _OpsgenieRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieRoleAriStaticOpts.qualifier,
      platformQualifier: opsgenieRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieRoleAriStaticOpts.resourceOwner,
      resourceType: opsgenieRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieRoleAriStaticOpts);
    return new _OpsgenieRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieRoleAriStaticOpts);
    return new _OpsgenieRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/opsgenie/schedule/types.ts
var OpsgenieScheduleAriResourceOwner = "opsgenie", OpsgenieScheduleAriResourceType = "schedule";

// src/opsgenie/schedule/manifest.ts
var opsgenieScheduleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieScheduleAriResourceOwner,
  resourceType: OpsgenieScheduleAriResourceType,
  resourceIdSlug: "{workspaceId}/{scheduleId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scheduleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/schedule/index.ts
var OpsgenieScheduleAri = class _OpsgenieScheduleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._scheduleId = opts.resourceIdSegmentValues.scheduleId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get scheduleId() {
    return this._scheduleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieScheduleAriStaticOpts.qualifier,
      platformQualifier: opsgenieScheduleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieScheduleAriStaticOpts.resourceOwner,
      resourceType: opsgenieScheduleAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.scheduleId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        scheduleId: opts.scheduleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieScheduleAriStaticOpts);
    return new _OpsgenieScheduleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieScheduleAriStaticOpts);
    return new _OpsgenieScheduleAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      scheduleId: this.scheduleId
    };
  }
};

// src/opsgenie/schedule-rotation/types.ts
var OpsgenieScheduleRotationAriResourceOwner = "opsgenie", OpsgenieScheduleRotationAriResourceType = "schedule-rotation";

// src/opsgenie/schedule-rotation/manifest.ts
var opsgenieScheduleRotationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieScheduleRotationAriResourceOwner,
  resourceType: OpsgenieScheduleRotationAriResourceType,
  resourceIdSlug: "{workspaceId}/{scheduleRotationId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    scheduleRotationId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/schedule-rotation/index.ts
var OpsgenieScheduleRotationAri = class _OpsgenieScheduleRotationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._scheduleRotationId = opts.resourceIdSegmentValues.scheduleRotationId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get scheduleRotationId() {
    return this._scheduleRotationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieScheduleRotationAriStaticOpts.qualifier,
      platformQualifier: opsgenieScheduleRotationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieScheduleRotationAriStaticOpts.resourceOwner,
      resourceType: opsgenieScheduleRotationAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.scheduleRotationId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        scheduleRotationId: opts.scheduleRotationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieScheduleRotationAriStaticOpts);
    return new _OpsgenieScheduleRotationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieScheduleRotationAriStaticOpts);
    return new _OpsgenieScheduleRotationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      scheduleRotationId: this.scheduleRotationId
    };
  }
};

// src/opsgenie/site/types.ts
var OpsgenieSiteAriResourceOwner = "opsgenie", OpsgenieSiteAriResourceType = "site";

// src/opsgenie/site/manifest.ts
var opsgenieSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieSiteAriResourceOwner,
  resourceType: OpsgenieSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/site/index.ts
var OpsgenieSiteAri = class _OpsgenieSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieSiteAriStaticOpts.qualifier,
      platformQualifier: opsgenieSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieSiteAriStaticOpts.resourceOwner,
      resourceType: opsgenieSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieSiteAriStaticOpts);
    return new _OpsgenieSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieSiteAriStaticOpts);
    return new _OpsgenieSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/opsgenie/team/types.ts
var OpsgenieTeamAriResourceOwner = "opsgenie", OpsgenieTeamAriResourceType = "team";

// src/opsgenie/team/manifest.ts
var opsgenieTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: OpsgenieTeamAriResourceOwner,
  resourceType: OpsgenieTeamAriResourceType,
  resourceIdSlug: "{opsgenieTeamId}",
  resourceIdSegmentFormats: {
    opsgenieTeamId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/team/index.ts
var OpsgenieTeamAri = class _OpsgenieTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._opsgenieTeamId = opts.resourceIdSegmentValues.opsgenieTeamId;
  }
  get siteId() {
    return this._siteId;
  }
  get opsgenieTeamId() {
    return this._opsgenieTeamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieTeamAriStaticOpts.qualifier,
      platformQualifier: opsgenieTeamAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: opsgenieTeamAriStaticOpts.resourceOwner,
      resourceType: opsgenieTeamAriStaticOpts.resourceType,
      resourceId: `${opts.opsgenieTeamId}`,
      resourceIdSegmentValues: {
        opsgenieTeamId: opts.opsgenieTeamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieTeamAriStaticOpts);
    return new _OpsgenieTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieTeamAriStaticOpts);
    return new _OpsgenieTeamAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      opsgenieTeamId: this.opsgenieTeamId
    };
  }
};

// src/opsgenie/timeline/types.ts
var OpsgenieTimelineAriResourceOwner = "opsgenie", OpsgenieTimelineAriResourceType = "timeline";

// src/opsgenie/timeline/manifest.ts
var opsgenieTimelineAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieTimelineAriResourceOwner,
  resourceType: OpsgenieTimelineAriResourceType,
  resourceIdSlug: "{workspaceId}/{timelineEntryId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    timelineEntryId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/timeline/index.ts
var OpsgenieTimelineAri = class _OpsgenieTimelineAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._timelineEntryId = opts.resourceIdSegmentValues.timelineEntryId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get timelineEntryId() {
    return this._timelineEntryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieTimelineAriStaticOpts.qualifier,
      platformQualifier: opsgenieTimelineAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieTimelineAriStaticOpts.resourceOwner,
      resourceType: opsgenieTimelineAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}/${opts.timelineEntryId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        timelineEntryId: opts.timelineEntryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieTimelineAriStaticOpts);
    return new _OpsgenieTimelineAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieTimelineAriStaticOpts);
    return new _OpsgenieTimelineAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      timelineEntryId: this.timelineEntryId
    };
  }
};

// src/opsgenie/workspace/types.ts
var OpsgenieWorkspaceAriResourceOwner = "opsgenie", OpsgenieWorkspaceAriResourceType = "workspace";

// src/opsgenie/workspace/manifest.ts
var opsgenieWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OpsgenieWorkspaceAriResourceOwner,
  resourceType: OpsgenieWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/opsgenie/workspace/index.ts
var OpsgenieWorkspaceAri = class _OpsgenieWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: opsgenieWorkspaceAriStaticOpts.qualifier,
      platformQualifier: opsgenieWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: opsgenieWorkspaceAriStaticOpts.resourceOwner,
      resourceType: opsgenieWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, opsgenieWorkspaceAriStaticOpts);
    return new _OpsgenieWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, opsgenieWorkspaceAriStaticOpts);
    return new _OpsgenieWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/org-policy/policy/types.ts
var OrgPolicyPolicyAriResourceOwner = "org-policy", OrgPolicyPolicyAriResourceType = "policy";

// src/org-policy/policy/manifest.ts
var orgPolicyPolicyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: OrgPolicyPolicyAriResourceOwner,
  resourceType: OrgPolicyPolicyAriResourceType,
  resourceIdSlug: "{policyId}",
  resourceIdSegmentFormats: {
    policyId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/org-policy/policy/index.ts
var OrgPolicyPolicyAri = class _OrgPolicyPolicyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._policyId = opts.resourceIdSegmentValues.policyId;
  }
  get policyId() {
    return this._policyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: orgPolicyPolicyAriStaticOpts.qualifier,
      platformQualifier: orgPolicyPolicyAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: orgPolicyPolicyAriStaticOpts.resourceOwner,
      resourceType: orgPolicyPolicyAriStaticOpts.resourceType,
      resourceId: `${opts.policyId}`,
      resourceIdSegmentValues: {
        policyId: opts.policyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, orgPolicyPolicyAriStaticOpts);
    return new _OrgPolicyPolicyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, orgPolicyPolicyAriStaticOpts);
    return new _OrgPolicyPolicyAri(opts);
  }
  getVariables() {
    return {
      policyId: this.policyId
    };
  }
};

// src/papi/api/types.ts
var PapiApiAriResourceOwner = "papi", PapiApiAriResourceType = "api";

// src/papi/api/manifest.ts
var papiApiAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PapiApiAriResourceOwner,
  resourceType: PapiApiAriResourceType,
  resourceIdSlug: "catalog/{uuid}",
  resourceIdSegmentFormats: {
    uuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/papi/api/index.ts
var PapiApiAri = class _PapiApiAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._uuid = opts.resourceIdSegmentValues.uuid;
  }
  get uuid() {
    return this._uuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: papiApiAriStaticOpts.qualifier,
      platformQualifier: papiApiAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: papiApiAriStaticOpts.resourceOwner,
      resourceType: papiApiAriStaticOpts.resourceType,
      resourceId: `catalog/${opts.uuid}`,
      resourceIdSegmentValues: {
        uuid: opts.uuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, papiApiAriStaticOpts);
    return new _PapiApiAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, papiApiAriStaticOpts);
    return new _PapiApiAri(opts);
  }
  getVariables() {
    return {
      uuid: this.uuid
    };
  }
};

// src/papi/role/types.ts
var PapiRoleAriResourceOwner = "papi", PapiRoleAriResourceType = "role";

// src/papi/role/manifest.ts
var papiRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PapiRoleAriResourceOwner,
  resourceType: PapiRoleAriResourceType,
  resourceIdSlug: "partner",
  resourceIdSegmentFormats: {}
};

// src/papi/role/index.ts
var PapiRoleAri = class _PapiRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: papiRoleAriStaticOpts.qualifier,
      platformQualifier: papiRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: papiRoleAriStaticOpts.resourceOwner,
      resourceType: papiRoleAriStaticOpts.resourceType,
      resourceId: "partner",
      resourceIdSegmentValues: {}
    }, ariOpts = AriParser.fromOpts(derivedOpts, papiRoleAriStaticOpts);
    return new _PapiRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, papiRoleAriStaticOpts);
    return new _PapiRoleAri(opts);
  }
  getVariables() {
    return {};
  }
};

// src/passionfruit/user/types.ts
var PassionfruitUserAriResourceOwner = "passionfruit", PassionfruitUserAriResourceType = "user";

// src/passionfruit/user/manifest.ts
var passionfruitUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PassionfruitUserAriResourceOwner,
  resourceType: PassionfruitUserAriResourceType,
  resourceIdSlug: "{userId}",
  resourceIdSegmentFormats: {
    userId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/passionfruit/user/index.ts
var PassionfruitUserAri = class _PassionfruitUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: passionfruitUserAriStaticOpts.qualifier,
      platformQualifier: passionfruitUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: passionfruitUserAriStaticOpts.resourceOwner,
      resourceType: passionfruitUserAriStaticOpts.resourceType,
      resourceId: `${opts.userId}`,
      resourceIdSegmentValues: {
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, passionfruitUserAriStaticOpts);
    return new _PassionfruitUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, passionfruitUserAriStaticOpts);
    return new _PassionfruitUserAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId
    };
  }
};

// src/people-data/cost-center/types.ts
var PeopleDataCostCenterAriResourceOwner = "people-data", PeopleDataCostCenterAriResourceType = "cost-center";

// src/people-data/cost-center/manifest.ts
var peopleDataCostCenterAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeopleDataCostCenterAriResourceOwner,
  resourceType: PeopleDataCostCenterAriResourceType,
  resourceIdSlug: "{costCenterId}",
  resourceIdSegmentFormats: {
    costCenterId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-data/cost-center/index.ts
var PeopleDataCostCenterAri = class _PeopleDataCostCenterAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._costCenterId = opts.resourceIdSegmentValues.costCenterId;
  }
  get costCenterId() {
    return this._costCenterId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peopleDataCostCenterAriStaticOpts.qualifier,
      platformQualifier: peopleDataCostCenterAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peopleDataCostCenterAriStaticOpts.resourceOwner,
      resourceType: peopleDataCostCenterAriStaticOpts.resourceType,
      resourceId: `${opts.costCenterId}`,
      resourceIdSegmentValues: {
        costCenterId: opts.costCenterId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peopleDataCostCenterAriStaticOpts);
    return new _PeopleDataCostCenterAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peopleDataCostCenterAriStaticOpts);
    return new _PeopleDataCostCenterAri(opts);
  }
  getVariables() {
    return {
      costCenterId: this.costCenterId
    };
  }
};

// src/people-data/job-profile/types.ts
var PeopleDataJobProfileAriResourceOwner = "people-data", PeopleDataJobProfileAriResourceType = "job-profile";

// src/people-data/job-profile/manifest.ts
var peopleDataJobProfileAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeopleDataJobProfileAriResourceOwner,
  resourceType: PeopleDataJobProfileAriResourceType,
  resourceIdSlug: "{jobProfileId}",
  resourceIdSegmentFormats: {
    jobProfileId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-data/job-profile/index.ts
var PeopleDataJobProfileAri = class _PeopleDataJobProfileAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._jobProfileId = opts.resourceIdSegmentValues.jobProfileId;
  }
  get jobProfileId() {
    return this._jobProfileId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peopleDataJobProfileAriStaticOpts.qualifier,
      platformQualifier: peopleDataJobProfileAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peopleDataJobProfileAriStaticOpts.resourceOwner,
      resourceType: peopleDataJobProfileAriStaticOpts.resourceType,
      resourceId: `${opts.jobProfileId}`,
      resourceIdSegmentValues: {
        jobProfileId: opts.jobProfileId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peopleDataJobProfileAriStaticOpts);
    return new _PeopleDataJobProfileAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peopleDataJobProfileAriStaticOpts);
    return new _PeopleDataJobProfileAri(opts);
  }
  getVariables() {
    return {
      jobProfileId: this.jobProfileId
    };
  }
};

// src/people-data/position/types.ts
var PeopleDataPositionAriResourceOwner = "people-data", PeopleDataPositionAriResourceType = "position";

// src/people-data/position/manifest.ts
var peopleDataPositionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeopleDataPositionAriResourceOwner,
  resourceType: PeopleDataPositionAriResourceType,
  resourceIdSlug: "{positionId}",
  resourceIdSegmentFormats: {
    positionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-data/position/index.ts
var PeopleDataPositionAri = class _PeopleDataPositionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._positionId = opts.resourceIdSegmentValues.positionId;
  }
  get positionId() {
    return this._positionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peopleDataPositionAriStaticOpts.qualifier,
      platformQualifier: peopleDataPositionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peopleDataPositionAriStaticOpts.resourceOwner,
      resourceType: peopleDataPositionAriStaticOpts.resourceType,
      resourceId: `${opts.positionId}`,
      resourceIdSegmentValues: {
        positionId: opts.positionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peopleDataPositionAriStaticOpts);
    return new _PeopleDataPositionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peopleDataPositionAriStaticOpts);
    return new _PeopleDataPositionAri(opts);
  }
  getVariables() {
    return {
      positionId: this.positionId
    };
  }
};

// src/people-data/supervisory-org/types.ts
var PeopleDataSupervisoryOrgAriResourceOwner = "people-data", PeopleDataSupervisoryOrgAriResourceType = "supervisory-org";

// src/people-data/supervisory-org/manifest.ts
var peopleDataSupervisoryOrgAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeopleDataSupervisoryOrgAriResourceOwner,
  resourceType: PeopleDataSupervisoryOrgAriResourceType,
  resourceIdSlug: "{supervisoryOrgId}",
  resourceIdSegmentFormats: {
    supervisoryOrgId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-data/supervisory-org/index.ts
var PeopleDataSupervisoryOrgAri = class _PeopleDataSupervisoryOrgAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._supervisoryOrgId = opts.resourceIdSegmentValues.supervisoryOrgId;
  }
  get supervisoryOrgId() {
    return this._supervisoryOrgId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peopleDataSupervisoryOrgAriStaticOpts.qualifier,
      platformQualifier: peopleDataSupervisoryOrgAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peopleDataSupervisoryOrgAriStaticOpts.resourceOwner,
      resourceType: peopleDataSupervisoryOrgAriStaticOpts.resourceType,
      resourceId: `${opts.supervisoryOrgId}`,
      resourceIdSegmentValues: {
        supervisoryOrgId: opts.supervisoryOrgId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peopleDataSupervisoryOrgAriStaticOpts);
    return new _PeopleDataSupervisoryOrgAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peopleDataSupervisoryOrgAriStaticOpts);
    return new _PeopleDataSupervisoryOrgAri(opts);
  }
  getVariables() {
    return {
      supervisoryOrgId: this.supervisoryOrgId
    };
  }
};

// src/people-data/worker/types.ts
var PeopleDataWorkerAriResourceOwner = "people-data", PeopleDataWorkerAriResourceType = "worker";

// src/people-data/worker/manifest.ts
var peopleDataWorkerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeopleDataWorkerAriResourceOwner,
  resourceType: PeopleDataWorkerAriResourceType,
  resourceIdSlug: "{workerId}",
  resourceIdSegmentFormats: {
    workerId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-data/worker/index.ts
var PeopleDataWorkerAri = class _PeopleDataWorkerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workerId = opts.resourceIdSegmentValues.workerId;
  }
  get workerId() {
    return this._workerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peopleDataWorkerAriStaticOpts.qualifier,
      platformQualifier: peopleDataWorkerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peopleDataWorkerAriStaticOpts.resourceOwner,
      resourceType: peopleDataWorkerAriStaticOpts.resourceType,
      resourceId: `${opts.workerId}`,
      resourceIdSegmentValues: {
        workerId: opts.workerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peopleDataWorkerAriStaticOpts);
    return new _PeopleDataWorkerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peopleDataWorkerAriStaticOpts);
    return new _PeopleDataWorkerAri(opts);
  }
  getVariables() {
    return {
      workerId: this.workerId
    };
  }
};

// src/people-perftool/calibration/types.ts
var PeoplePerftoolCalibrationAriResourceOwner = "people-perftool", PeoplePerftoolCalibrationAriResourceType = "calibration";

// src/people-perftool/calibration/manifest.ts
var peoplePerftoolCalibrationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeoplePerftoolCalibrationAriResourceOwner,
  resourceType: PeoplePerftoolCalibrationAriResourceType,
  resourceIdSlug: "{id}",
  resourceIdSegmentFormats: {
    id: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-perftool/calibration/index.ts
var PeoplePerftoolCalibrationAri = class _PeoplePerftoolCalibrationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._id = opts.resourceIdSegmentValues.id;
  }
  get id() {
    return this._id;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peoplePerftoolCalibrationAriStaticOpts.qualifier,
      platformQualifier: peoplePerftoolCalibrationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peoplePerftoolCalibrationAriStaticOpts.resourceOwner,
      resourceType: peoplePerftoolCalibrationAriStaticOpts.resourceType,
      resourceId: `${opts.id}`,
      resourceIdSegmentValues: {
        id: opts.id
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peoplePerftoolCalibrationAriStaticOpts);
    return new _PeoplePerftoolCalibrationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peoplePerftoolCalibrationAriStaticOpts);
    return new _PeoplePerftoolCalibrationAri(opts);
  }
  getVariables() {
    return {
      id: this.id
    };
  }
};

// src/people-perftool/feedback/types.ts
var PeoplePerftoolFeedbackAriResourceOwner = "people-perftool", PeoplePerftoolFeedbackAriResourceType = "feedback";

// src/people-perftool/feedback/manifest.ts
var peoplePerftoolFeedbackAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeoplePerftoolFeedbackAriResourceOwner,
  resourceType: PeoplePerftoolFeedbackAriResourceType,
  resourceIdSlug: "{id}",
  resourceIdSegmentFormats: {
    id: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-perftool/feedback/index.ts
var PeoplePerftoolFeedbackAri = class _PeoplePerftoolFeedbackAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._id = opts.resourceIdSegmentValues.id;
  }
  get id() {
    return this._id;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peoplePerftoolFeedbackAriStaticOpts.qualifier,
      platformQualifier: peoplePerftoolFeedbackAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peoplePerftoolFeedbackAriStaticOpts.resourceOwner,
      resourceType: peoplePerftoolFeedbackAriStaticOpts.resourceType,
      resourceId: `${opts.id}`,
      resourceIdSegmentValues: {
        id: opts.id
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peoplePerftoolFeedbackAriStaticOpts);
    return new _PeoplePerftoolFeedbackAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peoplePerftoolFeedbackAriStaticOpts);
    return new _PeoplePerftoolFeedbackAri(opts);
  }
  getVariables() {
    return {
      id: this.id
    };
  }
};

// src/people-perftool/performance/types.ts
var PeoplePerftoolPerformanceAriResourceOwner = "people-perftool", PeoplePerftoolPerformanceAriResourceType = "performance";

// src/people-perftool/performance/manifest.ts
var peoplePerftoolPerformanceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PeoplePerftoolPerformanceAriResourceOwner,
  resourceType: PeoplePerftoolPerformanceAriResourceType,
  resourceIdSlug: "{id}",
  resourceIdSegmentFormats: {
    id: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/people-perftool/performance/index.ts
var PeoplePerftoolPerformanceAri = class _PeoplePerftoolPerformanceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._id = opts.resourceIdSegmentValues.id;
  }
  get id() {
    return this._id;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: peoplePerftoolPerformanceAriStaticOpts.qualifier,
      platformQualifier: peoplePerftoolPerformanceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: peoplePerftoolPerformanceAriStaticOpts.resourceOwner,
      resourceType: peoplePerftoolPerformanceAriStaticOpts.resourceType,
      resourceId: `${opts.id}`,
      resourceIdSegmentValues: {
        id: opts.id
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, peoplePerftoolPerformanceAriStaticOpts);
    return new _PeoplePerftoolPerformanceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, peoplePerftoolPerformanceAriStaticOpts);
    return new _PeoplePerftoolPerformanceAri(opts);
  }
  getVariables() {
    return {
      id: this.id
    };
  }
};

// src/platform/classification-tag/types.ts
var PlatformClassificationTagAriResourceOwner = "platform", PlatformClassificationTagAriResourceType = "classification-tag";

// src/platform/classification-tag/manifest.ts
var platformClassificationTagAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformClassificationTagAriResourceOwner,
  resourceType: PlatformClassificationTagAriResourceType,
  resourceIdSlug: "{tagId}",
  resourceIdSegmentFormats: {
    tagId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/classification-tag/index.ts
var PlatformClassificationTagAri = class _PlatformClassificationTagAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._tagId = opts.resourceIdSegmentValues.tagId;
  }
  get tagId() {
    return this._tagId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformClassificationTagAriStaticOpts.qualifier,
      platformQualifier: platformClassificationTagAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformClassificationTagAriStaticOpts.resourceOwner,
      resourceType: platformClassificationTagAriStaticOpts.resourceType,
      resourceId: `${opts.tagId}`,
      resourceIdSegmentValues: {
        tagId: opts.tagId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformClassificationTagAriStaticOpts);
    return new _PlatformClassificationTagAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformClassificationTagAriStaticOpts);
    return new _PlatformClassificationTagAri(opts);
  }
  getVariables() {
    return {
      tagId: this.tagId
    };
  }
};

// src/platform/integration/types.ts
var PlatformIntegrationAriResourceOwner = "platform", PlatformIntegrationAriResourceType = "integration";

// src/platform/integration/manifest.ts
var platformIntegrationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformIntegrationAriResourceOwner,
  resourceType: PlatformIntegrationAriResourceType,
  resourceIdSlug: "{integrationKey}",
  resourceIdSegmentFormats: {
    integrationKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/integration/index.ts
var PlatformIntegrationAri = class _PlatformIntegrationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._integrationKey = opts.resourceIdSegmentValues.integrationKey;
  }
  get integrationKey() {
    return this._integrationKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformIntegrationAriStaticOpts.qualifier,
      platformQualifier: platformIntegrationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformIntegrationAriStaticOpts.resourceOwner,
      resourceType: platformIntegrationAriStaticOpts.resourceType,
      resourceId: `${opts.integrationKey}`,
      resourceIdSegmentValues: {
        integrationKey: opts.integrationKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformIntegrationAriStaticOpts);
    return new _PlatformIntegrationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformIntegrationAriStaticOpts);
    return new _PlatformIntegrationAri(opts);
  }
  getVariables() {
    return {
      integrationKey: this.integrationKey
    };
  }
};

// src/platform/lifecycle-resource/types.ts
var PlatformLifecycleResourceAriResourceOwner = "platform", PlatformLifecycleResourceAriResourceType = "lifecycle-resource";

// src/platform/lifecycle-resource/manifest.ts
var platformLifecycleResourceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformLifecycleResourceAriResourceOwner,
  resourceType: PlatformLifecycleResourceAriResourceType,
  resourceIdSlug: "{lifecycleResourceId}",
  resourceIdSegmentFormats: {
    lifecycleResourceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/lifecycle-resource/index.ts
var PlatformLifecycleResourceAri = class _PlatformLifecycleResourceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._lifecycleResourceId = opts.resourceIdSegmentValues.lifecycleResourceId;
  }
  get lifecycleResourceId() {
    return this._lifecycleResourceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformLifecycleResourceAriStaticOpts.qualifier,
      platformQualifier: platformLifecycleResourceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformLifecycleResourceAriStaticOpts.resourceOwner,
      resourceType: platformLifecycleResourceAriStaticOpts.resourceType,
      resourceId: `${opts.lifecycleResourceId}`,
      resourceIdSegmentValues: {
        lifecycleResourceId: opts.lifecycleResourceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformLifecycleResourceAriStaticOpts);
    return new _PlatformLifecycleResourceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformLifecycleResourceAriStaticOpts);
    return new _PlatformLifecycleResourceAri(opts);
  }
  getVariables() {
    return {
      lifecycleResourceId: this.lifecycleResourceId
    };
  }
};

// src/platform/lifecycle-resource-package/types.ts
var PlatformLifecycleResourcePackageAriResourceOwner = "platform", PlatformLifecycleResourcePackageAriResourceType = "lifecycle-resource-package";

// src/platform/lifecycle-resource-package/manifest.ts
var platformLifecycleResourcePackageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformLifecycleResourcePackageAriResourceOwner,
  resourceType: PlatformLifecycleResourcePackageAriResourceType,
  resourceIdSlug: "{lifecycleResourcePackageId}",
  resourceIdSegmentFormats: {
    lifecycleResourcePackageId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/lifecycle-resource-package/index.ts
var PlatformLifecycleResourcePackageAri = class _PlatformLifecycleResourcePackageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._lifecycleResourcePackageId = opts.resourceIdSegmentValues.lifecycleResourcePackageId;
  }
  get lifecycleResourcePackageId() {
    return this._lifecycleResourcePackageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformLifecycleResourcePackageAriStaticOpts.qualifier,
      platformQualifier: platformLifecycleResourcePackageAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformLifecycleResourcePackageAriStaticOpts.resourceOwner,
      resourceType: platformLifecycleResourcePackageAriStaticOpts.resourceType,
      resourceId: `${opts.lifecycleResourcePackageId}`,
      resourceIdSegmentValues: {
        lifecycleResourcePackageId: opts.lifecycleResourcePackageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformLifecycleResourcePackageAriStaticOpts);
    return new _PlatformLifecycleResourcePackageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformLifecycleResourcePackageAriStaticOpts);
    return new _PlatformLifecycleResourcePackageAri(opts);
  }
  getVariables() {
    return {
      lifecycleResourcePackageId: this.lifecycleResourcePackageId
    };
  }
};

// src/platform/lifecycle-resource-package-type/types.ts
var PlatformLifecycleResourcePackageTypeAriResourceOwner = "platform", PlatformLifecycleResourcePackageTypeAriResourceType = "lifecycle-resource-package-type";

// src/platform/lifecycle-resource-package-type/manifest.ts
var platformLifecycleResourcePackageTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformLifecycleResourcePackageTypeAriResourceOwner,
  resourceType: PlatformLifecycleResourcePackageTypeAriResourceType,
  resourceIdSlug: "{resourcePackageTypeId}",
  resourceIdSegmentFormats: {
    resourcePackageTypeId: /[a-zA-Z.\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/lifecycle-resource-package-type/index.ts
var PlatformLifecycleResourcePackageTypeAri = class _PlatformLifecycleResourcePackageTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._resourcePackageTypeId = opts.resourceIdSegmentValues.resourcePackageTypeId;
  }
  get resourcePackageTypeId() {
    return this._resourcePackageTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformLifecycleResourcePackageTypeAriStaticOpts.qualifier,
      platformQualifier: platformLifecycleResourcePackageTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformLifecycleResourcePackageTypeAriStaticOpts.resourceOwner,
      resourceType: platformLifecycleResourcePackageTypeAriStaticOpts.resourceType,
      resourceId: `${opts.resourcePackageTypeId}`,
      resourceIdSegmentValues: {
        resourcePackageTypeId: opts.resourcePackageTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformLifecycleResourcePackageTypeAriStaticOpts);
    return new _PlatformLifecycleResourcePackageTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformLifecycleResourcePackageTypeAriStaticOpts);
    return new _PlatformLifecycleResourcePackageTypeAri(opts);
  }
  getVariables() {
    return {
      resourcePackageTypeId: this.resourcePackageTypeId
    };
  }
};

// src/platform/org/types.ts
var PlatformOrgAriResourceOwner = "platform", PlatformOrgAriResourceType = "org";

// src/platform/org/manifest.ts
var platformOrgAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformOrgAriResourceOwner,
  resourceType: PlatformOrgAriResourceType,
  resourceIdSlug: "{orgId}",
  resourceIdSegmentFormats: {
    orgId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/org/index.ts
var PlatformOrgAri = class _PlatformOrgAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._orgId = opts.resourceIdSegmentValues.orgId;
  }
  get orgId() {
    return this._orgId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformOrgAriStaticOpts.qualifier,
      platformQualifier: platformOrgAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformOrgAriStaticOpts.resourceOwner,
      resourceType: platformOrgAriStaticOpts.resourceType,
      resourceId: `${opts.orgId}`,
      resourceIdSegmentValues: {
        orgId: opts.orgId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformOrgAriStaticOpts);
    return new _PlatformOrgAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformOrgAriStaticOpts);
    return new _PlatformOrgAri(opts);
  }
  getVariables() {
    return {
      orgId: this.orgId
    };
  }
};

// src/platform/org-user/types.ts
var PlatformOrgUserAriResourceOwner = "platform", PlatformOrgUserAriResourceType = "org-user";

// src/platform/org-user/manifest.ts
var platformOrgUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformOrgUserAriResourceOwner,
  resourceType: PlatformOrgUserAriResourceType,
  resourceIdSlug: "{orgId}/{userId}",
  resourceIdSegmentFormats: {
    orgId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    userId: /[a-zA-Z0-9_\-\:]{1,128}/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/org-user/index.ts
var PlatformOrgUserAri = class _PlatformOrgUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._orgId = opts.resourceIdSegmentValues.orgId, this._userId = opts.resourceIdSegmentValues.userId;
  }
  get orgId() {
    return this._orgId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformOrgUserAriStaticOpts.qualifier,
      platformQualifier: platformOrgUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformOrgUserAriStaticOpts.resourceOwner,
      resourceType: platformOrgUserAriStaticOpts.resourceType,
      resourceId: `${opts.orgId}/${opts.userId}`,
      resourceIdSegmentValues: {
        orgId: opts.orgId,
        userId: opts.userId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformOrgUserAriStaticOpts);
    return new _PlatformOrgUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformOrgUserAriStaticOpts);
    return new _PlatformOrgUserAri(opts);
  }
  getVariables() {
    return {
      orgId: this.orgId,
      userId: this.userId
    };
  }
};

// src/platform/secure-tunnel/types.ts
var PlatformSecureTunnelAriResourceOwner = "platform", PlatformSecureTunnelAriResourceType = "secure-tunnel";

// src/platform/secure-tunnel/manifest.ts
var platformSecureTunnelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformSecureTunnelAriResourceOwner,
  resourceType: PlatformSecureTunnelAriResourceType,
  resourceIdSlug: "{secureTunnelId}",
  resourceIdSegmentFormats: {
    secureTunnelId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/secure-tunnel/index.ts
var PlatformSecureTunnelAri = class _PlatformSecureTunnelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._secureTunnelId = opts.resourceIdSegmentValues.secureTunnelId;
  }
  get secureTunnelId() {
    return this._secureTunnelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformSecureTunnelAriStaticOpts.qualifier,
      platformQualifier: platformSecureTunnelAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformSecureTunnelAriStaticOpts.resourceOwner,
      resourceType: platformSecureTunnelAriStaticOpts.resourceType,
      resourceId: `${opts.secureTunnelId}`,
      resourceIdSegmentValues: {
        secureTunnelId: opts.secureTunnelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformSecureTunnelAriStaticOpts);
    return new _PlatformSecureTunnelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformSecureTunnelAriStaticOpts);
    return new _PlatformSecureTunnelAri(opts);
  }
  getVariables() {
    return {
      secureTunnelId: this.secureTunnelId
    };
  }
};

// src/platform/site/types.ts
var PlatformSiteAriResourceOwner = "platform", PlatformSiteAriResourceType = "site";

// src/platform/site/manifest.ts
var platformSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformSiteAriResourceOwner,
  resourceType: PlatformSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform/site/index.ts
var PlatformSiteAri = class _PlatformSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformSiteAriStaticOpts.qualifier,
      platformQualifier: platformSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformSiteAriStaticOpts.resourceOwner,
      resourceType: platformSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformSiteAriStaticOpts);
    return new _PlatformSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformSiteAriStaticOpts);
    return new _PlatformSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/platform-services/streamhub-schema/types.ts
var PlatformServicesStreamhubSchemaAriResourceOwner = "platform-services", PlatformServicesStreamhubSchemaAriResourceType = "streamhub-schema";

// src/platform-services/streamhub-schema/manifest.ts
var platformServicesStreamhubSchemaAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PlatformServicesStreamhubSchemaAriResourceOwner,
  resourceType: PlatformServicesStreamhubSchemaAriResourceType,
  resourceIdSlug: "{streamhubSchemaId}",
  resourceIdSegmentFormats: {
    streamhubSchemaId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/platform-services/streamhub-schema/index.ts
var PlatformServicesStreamhubSchemaAri = class _PlatformServicesStreamhubSchemaAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._streamhubSchemaId = opts.resourceIdSegmentValues.streamhubSchemaId;
  }
  get streamhubSchemaId() {
    return this._streamhubSchemaId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: platformServicesStreamhubSchemaAriStaticOpts.qualifier,
      platformQualifier: platformServicesStreamhubSchemaAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: platformServicesStreamhubSchemaAriStaticOpts.resourceOwner,
      resourceType: platformServicesStreamhubSchemaAriStaticOpts.resourceType,
      resourceId: `${opts.streamhubSchemaId}`,
      resourceIdSegmentValues: {
        streamhubSchemaId: opts.streamhubSchemaId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, platformServicesStreamhubSchemaAriStaticOpts);
    return new _PlatformServicesStreamhubSchemaAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, platformServicesStreamhubSchemaAriStaticOpts);
    return new _PlatformServicesStreamhubSchemaAri(opts);
  }
  getVariables() {
    return {
      streamhubSchemaId: this.streamhubSchemaId
    };
  }
};

// src/pollinator/check/types.ts
var PollinatorCheckAriResourceOwner = "pollinator", PollinatorCheckAriResourceType = "check";

// src/pollinator/check/manifest.ts
var pollinatorCheckAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PollinatorCheckAriResourceOwner,
  resourceType: PollinatorCheckAriResourceType,
  resourceIdSlug: "{checkId}",
  resourceIdSegmentFormats: {
    checkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/pollinator/check/index.ts
var PollinatorCheckAri = class _PollinatorCheckAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._checkId = opts.resourceIdSegmentValues.checkId;
  }
  get checkId() {
    return this._checkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: pollinatorCheckAriStaticOpts.qualifier,
      platformQualifier: pollinatorCheckAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: pollinatorCheckAriStaticOpts.resourceOwner,
      resourceType: pollinatorCheckAriStaticOpts.resourceType,
      resourceId: `${opts.checkId}`,
      resourceIdSegmentValues: {
        checkId: opts.checkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, pollinatorCheckAriStaticOpts);
    return new _PollinatorCheckAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, pollinatorCheckAriStaticOpts);
    return new _PollinatorCheckAri(opts);
  }
  getVariables() {
    return {
      checkId: this.checkId
    };
  }
};

// src/post-office/message-instance/types.ts
var PostOfficeMessageInstanceAriResourceOwner = "post-office", PostOfficeMessageInstanceAriResourceType = "message-instance";

// src/post-office/message-instance/manifest.ts
var postOfficeMessageInstanceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PostOfficeMessageInstanceAriResourceOwner,
  resourceType: PostOfficeMessageInstanceAriResourceType,
  resourceIdSlug: "{messageTemplateId}/{messageInstanceId}",
  resourceIdSegmentFormats: {
    messageTemplateId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    messageInstanceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/post-office/message-instance/index.ts
var PostOfficeMessageInstanceAri = class _PostOfficeMessageInstanceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._messageTemplateId = opts.resourceIdSegmentValues.messageTemplateId, this._messageInstanceId = opts.resourceIdSegmentValues.messageInstanceId;
  }
  get messageTemplateId() {
    return this._messageTemplateId;
  }
  get messageInstanceId() {
    return this._messageInstanceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: postOfficeMessageInstanceAriStaticOpts.qualifier,
      platformQualifier: postOfficeMessageInstanceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: postOfficeMessageInstanceAriStaticOpts.resourceOwner,
      resourceType: postOfficeMessageInstanceAriStaticOpts.resourceType,
      resourceId: `${opts.messageTemplateId}/${opts.messageInstanceId}`,
      resourceIdSegmentValues: {
        messageTemplateId: opts.messageTemplateId,
        messageInstanceId: opts.messageInstanceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, postOfficeMessageInstanceAriStaticOpts);
    return new _PostOfficeMessageInstanceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, postOfficeMessageInstanceAriStaticOpts);
    return new _PostOfficeMessageInstanceAri(opts);
  }
  getVariables() {
    return {
      messageTemplateId: this.messageTemplateId,
      messageInstanceId: this.messageInstanceId
    };
  }
};

// src/post-office/message-template/types.ts
var PostOfficeMessageTemplateAriResourceOwner = "post-office", PostOfficeMessageTemplateAriResourceType = "message-template";

// src/post-office/message-template/manifest.ts
var postOfficeMessageTemplateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: PostOfficeMessageTemplateAriResourceOwner,
  resourceType: PostOfficeMessageTemplateAriResourceType,
  resourceIdSlug: "{messageTemplateId}",
  resourceIdSegmentFormats: {
    messageTemplateId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/post-office/message-template/index.ts
var PostOfficeMessageTemplateAri = class _PostOfficeMessageTemplateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._messageTemplateId = opts.resourceIdSegmentValues.messageTemplateId;
  }
  get messageTemplateId() {
    return this._messageTemplateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: postOfficeMessageTemplateAriStaticOpts.qualifier,
      platformQualifier: postOfficeMessageTemplateAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: postOfficeMessageTemplateAriStaticOpts.resourceOwner,
      resourceType: postOfficeMessageTemplateAriStaticOpts.resourceType,
      resourceId: `${opts.messageTemplateId}`,
      resourceIdSegmentValues: {
        messageTemplateId: opts.messageTemplateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, postOfficeMessageTemplateAriStaticOpts);
    return new _PostOfficeMessageTemplateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, postOfficeMessageTemplateAriStaticOpts);
    return new _PostOfficeMessageTemplateAri(opts);
  }
  getVariables() {
    return {
      messageTemplateId: this.messageTemplateId
    };
  }
};

// src/rovo/site/types.ts
var RovoSiteAriResourceOwner = "rovo", RovoSiteAriResourceType = "site";

// src/rovo/site/manifest.ts
var rovoSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: RovoSiteAriResourceOwner,
  resourceType: RovoSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/rovo/site/index.ts
var RovoSiteAri = class _RovoSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: rovoSiteAriStaticOpts.qualifier,
      platformQualifier: rovoSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: rovoSiteAriStaticOpts.resourceOwner,
      resourceType: rovoSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, rovoSiteAriStaticOpts);
    return new _RovoSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, rovoSiteAriStaticOpts);
    return new _RovoSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/runtime-auth-client/role/types.ts
var RuntimeAuthClientRoleAriResourceOwner = "runtime-auth-client", RuntimeAuthClientRoleAriResourceType = "role";

// src/runtime-auth-client/role/manifest.ts
var runtimeAuthClientRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: RuntimeAuthClientRoleAriResourceOwner,
  resourceType: RuntimeAuthClientRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/runtime-auth-client/role/index.ts
var RuntimeAuthClientRoleAri = class _RuntimeAuthClientRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: runtimeAuthClientRoleAriStaticOpts.qualifier,
      platformQualifier: runtimeAuthClientRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: runtimeAuthClientRoleAriStaticOpts.resourceOwner,
      resourceType: runtimeAuthClientRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, runtimeAuthClientRoleAriStaticOpts);
    return new _RuntimeAuthClientRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, runtimeAuthClientRoleAriStaticOpts);
    return new _RuntimeAuthClientRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/search/event/types.ts
var SearchEventAriResourceOwner = "search", SearchEventAriResourceType = "event";

// src/search/event/manifest.ts
var searchEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: SearchEventAriResourceOwner,
  resourceType: SearchEventAriResourceType,
  resourceIdSlug: "{eventType}/{eventId}",
  resourceIdSegmentFormats: {
    eventType: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    eventId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/search/event/index.ts
var SearchEventAri = class _SearchEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._eventType = opts.resourceIdSegmentValues.eventType, this._eventId = opts.resourceIdSegmentValues.eventId;
  }
  get eventType() {
    return this._eventType;
  }
  get eventId() {
    return this._eventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: searchEventAriStaticOpts.qualifier,
      platformQualifier: searchEventAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: searchEventAriStaticOpts.resourceOwner,
      resourceType: searchEventAriStaticOpts.resourceType,
      resourceId: `${opts.eventType}/${opts.eventId}`,
      resourceIdSegmentValues: {
        eventType: opts.eventType,
        eventId: opts.eventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, searchEventAriStaticOpts);
    return new _SearchEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, searchEventAriStaticOpts);
    return new _SearchEventAri(opts);
  }
  getVariables() {
    return {
      eventType: this.eventType,
      eventId: this.eventId
    };
  }
};

// src/search/forward-document/types.ts
var SearchForwardDocumentAriResourceOwner = "search", SearchForwardDocumentAriResourceType = "forward-document";

// src/search/forward-document/manifest.ts
var searchForwardDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: SearchForwardDocumentAriResourceOwner,
  resourceType: SearchForwardDocumentAriResourceType,
  resourceIdSlug: "activation/{activationId}/{documentType}/{documentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    documentType: /[a-zA-Z0-9\-_]+/,
    // eslint-disable-line no-useless-escape
    documentId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/search/forward-document/index.ts
var SearchForwardDocumentAri = class _SearchForwardDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._documentType = opts.resourceIdSegmentValues.documentType, this._documentId = opts.resourceIdSegmentValues.documentId;
  }
  get activationId() {
    return this._activationId;
  }
  get documentType() {
    return this._documentType;
  }
  get documentId() {
    return this._documentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: searchForwardDocumentAriStaticOpts.qualifier,
      platformQualifier: searchForwardDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: searchForwardDocumentAriStaticOpts.resourceOwner,
      resourceType: searchForwardDocumentAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.documentType}/${opts.documentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        documentType: opts.documentType,
        documentId: opts.documentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, searchForwardDocumentAriStaticOpts);
    return new _SearchForwardDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, searchForwardDocumentAriStaticOpts);
    return new _SearchForwardDocumentAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      documentType: this.documentType,
      documentId: this.documentId
    };
  }
};

// src/search/forward-document-subscription/types.ts
var SearchForwardDocumentSubscriptionAriResourceOwner = "search", SearchForwardDocumentSubscriptionAriResourceType = "forward-document-subscription";

// src/search/forward-document-subscription/manifest.ts
var searchForwardDocumentSubscriptionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: SearchForwardDocumentSubscriptionAriResourceOwner,
  resourceType: SearchForwardDocumentSubscriptionAriResourceType,
  resourceIdSlug: "activation/{activationId}/{subscriptionType}/{subscriptionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    subscriptionType: /[a-zA-Z0-9\-_]+/,
    // eslint-disable-line no-useless-escape
    subscriptionId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/search/forward-document-subscription/index.ts
var SearchForwardDocumentSubscriptionAri = class _SearchForwardDocumentSubscriptionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._subscriptionType = opts.resourceIdSegmentValues.subscriptionType, this._subscriptionId = opts.resourceIdSegmentValues.subscriptionId;
  }
  get activationId() {
    return this._activationId;
  }
  get subscriptionType() {
    return this._subscriptionType;
  }
  get subscriptionId() {
    return this._subscriptionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: searchForwardDocumentSubscriptionAriStaticOpts.qualifier,
      platformQualifier: searchForwardDocumentSubscriptionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: searchForwardDocumentSubscriptionAriStaticOpts.resourceOwner,
      resourceType: searchForwardDocumentSubscriptionAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.subscriptionType}/${opts.subscriptionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        subscriptionType: opts.subscriptionType,
        subscriptionId: opts.subscriptionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, searchForwardDocumentSubscriptionAriStaticOpts);
    return new _SearchForwardDocumentSubscriptionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, searchForwardDocumentSubscriptionAriStaticOpts);
    return new _SearchForwardDocumentSubscriptionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      subscriptionType: this.subscriptionType,
      subscriptionId: this.subscriptionId
    };
  }
};

// src/slack/channel/types.ts
var SlackChannelAriResourceOwner = "slack", SlackChannelAriResourceType = "channel";

// src/slack/channel/manifest.ts
var slackChannelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: SlackChannelAriResourceOwner,
  resourceType: SlackChannelAriResourceType,
  resourceIdSlug: "workspaceId/{workspaceId}/channelId/{channelId}",
  resourceIdSegmentFormats: {
    workspaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    channelId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/slack/channel/index.ts
var SlackChannelAri = class _SlackChannelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._channelId = opts.resourceIdSegmentValues.channelId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get channelId() {
    return this._channelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: slackChannelAriStaticOpts.qualifier,
      platformQualifier: slackChannelAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: slackChannelAriStaticOpts.resourceOwner,
      resourceType: slackChannelAriStaticOpts.resourceType,
      resourceId: `workspaceId/${opts.workspaceId}/channelId/${opts.channelId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        channelId: opts.channelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, slackChannelAriStaticOpts);
    return new _SlackChannelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, slackChannelAriStaticOpts);
    return new _SlackChannelAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      channelId: this.channelId
    };
  }
};

// src/slack/message/types.ts
var SlackMessageAriResourceOwner = "slack", SlackMessageAriResourceType = "message";

// src/slack/message/manifest.ts
var slackMessageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: SlackMessageAriResourceOwner,
  resourceType: SlackMessageAriResourceType,
  resourceIdSlug: "workspaceId/{workspaceId}/channelId/{channelId}/messageId/{messageId}",
  resourceIdSegmentFormats: {
    workspaceId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    channelId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    messageId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/slack/message/index.ts
var SlackMessageAri = class _SlackMessageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._channelId = opts.resourceIdSegmentValues.channelId, this._messageId = opts.resourceIdSegmentValues.messageId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get channelId() {
    return this._channelId;
  }
  get messageId() {
    return this._messageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: slackMessageAriStaticOpts.qualifier,
      platformQualifier: slackMessageAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: slackMessageAriStaticOpts.resourceOwner,
      resourceType: slackMessageAriStaticOpts.resourceType,
      resourceId: `workspaceId/${opts.workspaceId}/channelId/${opts.channelId}/messageId/${opts.messageId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        channelId: opts.channelId,
        messageId: opts.messageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, slackMessageAriStaticOpts);
    return new _SlackMessageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, slackMessageAriStaticOpts);
    return new _SlackMessageAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      channelId: this.channelId,
      messageId: this.messageId
    };
  }
};

// src/statuspage/role/types.ts
var StatuspageRoleAriResourceOwner = "statuspage", StatuspageRoleAriResourceType = "role";

// src/statuspage/role/manifest.ts
var statuspageRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: StatuspageRoleAriResourceOwner,
  resourceType: StatuspageRoleAriResourceType,
  resourceIdSlug: "{roleId}",
  resourceIdSegmentFormats: {
    roleId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/statuspage/role/index.ts
var StatuspageRoleAri = class _StatuspageRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleId = opts.resourceIdSegmentValues.roleId;
  }
  get roleId() {
    return this._roleId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: statuspageRoleAriStaticOpts.qualifier,
      platformQualifier: statuspageRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: statuspageRoleAriStaticOpts.resourceOwner,
      resourceType: statuspageRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleId}`,
      resourceIdSegmentValues: {
        roleId: opts.roleId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, statuspageRoleAriStaticOpts);
    return new _StatuspageRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, statuspageRoleAriStaticOpts);
    return new _StatuspageRoleAri(opts);
  }
  getVariables() {
    return {
      roleId: this.roleId
    };
  }
};

// src/statuspage/site/types.ts
var StatuspageSiteAriResourceOwner = "statuspage", StatuspageSiteAriResourceType = "site";

// src/statuspage/site/manifest.ts
var statuspageSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: StatuspageSiteAriResourceOwner,
  resourceType: StatuspageSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/statuspage/site/index.ts
var StatuspageSiteAri = class _StatuspageSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: statuspageSiteAriStaticOpts.qualifier,
      platformQualifier: statuspageSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: statuspageSiteAriStaticOpts.resourceOwner,
      resourceType: statuspageSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, statuspageSiteAriStaticOpts);
    return new _StatuspageSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, statuspageSiteAriStaticOpts);
    return new _StatuspageSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/support/customer/types.ts
var SupportCustomerAriResourceOwner = "support", SupportCustomerAriResourceType = "customer";

// src/support/customer/manifest.ts
var supportCustomerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: SupportCustomerAriResourceOwner,
  resourceType: SupportCustomerAriResourceType,
  resourceIdSlug: "{resourceName}",
  resourceIdSegmentFormats: {
    resourceName: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/support/customer/index.ts
var SupportCustomerAri = class _SupportCustomerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._resourceName = opts.resourceIdSegmentValues.resourceName;
  }
  get resourceName() {
    return this._resourceName;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: supportCustomerAriStaticOpts.qualifier,
      platformQualifier: supportCustomerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: supportCustomerAriStaticOpts.resourceOwner,
      resourceType: supportCustomerAriStaticOpts.resourceType,
      resourceId: `${opts.resourceName}`,
      resourceIdSegmentValues: {
        resourceName: opts.resourceName || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, supportCustomerAriStaticOpts);
    return new _SupportCustomerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, supportCustomerAriStaticOpts);
    return new _SupportCustomerAri(opts);
  }
  getVariables() {
    return {
      resourceName: this.resourceName
    };
  }
};

// src/teams/team/types.ts
var TeamsTeamAriResourceOwner = "teams", TeamsTeamAriResourceType = "team";

// src/teams/team/manifest.ts
var teamsTeamAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TeamsTeamAriResourceOwner,
  resourceType: TeamsTeamAriResourceType,
  resourceIdSlug: "{teamId}",
  resourceIdSegmentFormats: {
    teamId: /[a-zA-Z0-9.\-_~]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/teams/team/index.ts
var TeamsTeamAri = class _TeamsTeamAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._teamId = opts.resourceIdSegmentValues.teamId;
  }
  get teamId() {
    return this._teamId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: teamsTeamAriStaticOpts.qualifier,
      platformQualifier: teamsTeamAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: teamsTeamAriStaticOpts.resourceOwner,
      resourceType: teamsTeamAriStaticOpts.resourceType,
      resourceId: `${opts.teamId}`,
      resourceIdSegmentValues: {
        teamId: opts.teamId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, teamsTeamAriStaticOpts);
    return new _TeamsTeamAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, teamsTeamAriStaticOpts);
    return new _TeamsTeamAri(opts);
  }
  getVariables() {
    return {
      teamId: this.teamId
    };
  }
};

// src/townsquare/comment/types.ts
var TownsquareCommentAriResourceOwner = "townsquare", TownsquareCommentAriResourceType = "comment";

// src/townsquare/comment/manifest.ts
var townsquareCommentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareCommentAriResourceOwner,
  resourceType: TownsquareCommentAriResourceType,
  resourceIdSlug: "{commentUuid}",
  resourceIdSegmentFormats: {
    commentUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/comment/index.ts
var TownsquareCommentAri = class _TownsquareCommentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._commentUuid = opts.resourceIdSegmentValues.commentUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get commentUuid() {
    return this._commentUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareCommentAriStaticOpts.qualifier,
      platformQualifier: townsquareCommentAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareCommentAriStaticOpts.resourceOwner,
      resourceType: townsquareCommentAriStaticOpts.resourceType,
      resourceId: `${opts.commentUuid}`,
      resourceIdSegmentValues: {
        commentUuid: opts.commentUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareCommentAriStaticOpts);
    return new _TownsquareCommentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareCommentAriStaticOpts);
    return new _TownsquareCommentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      commentUuid: this.commentUuid
    };
  }
};

// src/townsquare/goal/types.ts
var TownsquareGoalAriResourceOwner = "townsquare", TownsquareGoalAriResourceType = "goal";

// src/townsquare/goal/manifest.ts
var townsquareGoalAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareGoalAriResourceOwner,
  resourceType: TownsquareGoalAriResourceType,
  resourceIdSlug: "{goalUuid}",
  resourceIdSegmentFormats: {
    goalUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/goal/index.ts
var TownsquareGoalAri = class _TownsquareGoalAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._goalUuid = opts.resourceIdSegmentValues.goalUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get goalUuid() {
    return this._goalUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareGoalAriStaticOpts.qualifier,
      platformQualifier: townsquareGoalAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareGoalAriStaticOpts.resourceOwner,
      resourceType: townsquareGoalAriStaticOpts.resourceType,
      resourceId: `${opts.goalUuid}`,
      resourceIdSegmentValues: {
        goalUuid: opts.goalUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareGoalAriStaticOpts);
    return new _TownsquareGoalAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareGoalAriStaticOpts);
    return new _TownsquareGoalAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      goalUuid: this.goalUuid
    };
  }
};

// src/townsquare/help-pointer/types.ts
var TownsquareHelpPointerAriResourceOwner = "townsquare", TownsquareHelpPointerAriResourceType = "help-pointer";

// src/townsquare/help-pointer/manifest.ts
var townsquareHelpPointerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareHelpPointerAriResourceOwner,
  resourceType: TownsquareHelpPointerAriResourceType,
  resourceIdSlug: "{helpPointerUuid}",
  resourceIdSegmentFormats: {
    helpPointerUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/help-pointer/index.ts
var TownsquareHelpPointerAri = class _TownsquareHelpPointerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._helpPointerUuid = opts.resourceIdSegmentValues.helpPointerUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get helpPointerUuid() {
    return this._helpPointerUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareHelpPointerAriStaticOpts.qualifier,
      platformQualifier: townsquareHelpPointerAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareHelpPointerAriStaticOpts.resourceOwner,
      resourceType: townsquareHelpPointerAriStaticOpts.resourceType,
      resourceId: `${opts.helpPointerUuid}`,
      resourceIdSegmentValues: {
        helpPointerUuid: opts.helpPointerUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareHelpPointerAriStaticOpts);
    return new _TownsquareHelpPointerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareHelpPointerAriStaticOpts);
    return new _TownsquareHelpPointerAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      helpPointerUuid: this.helpPointerUuid
    };
  }
};

// src/townsquare/learning/types.ts
var TownsquareLearningAriResourceOwner = "townsquare", TownsquareLearningAriResourceType = "learning";

// src/townsquare/learning/manifest.ts
var townsquareLearningAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareLearningAriResourceOwner,
  resourceType: TownsquareLearningAriResourceType,
  resourceIdSlug: "{learningUuid}",
  resourceIdSegmentFormats: {
    learningUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/learning/index.ts
var TownsquareLearningAri = class _TownsquareLearningAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._learningUuid = opts.resourceIdSegmentValues.learningUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get learningUuid() {
    return this._learningUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareLearningAriStaticOpts.qualifier,
      platformQualifier: townsquareLearningAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareLearningAriStaticOpts.resourceOwner,
      resourceType: townsquareLearningAriStaticOpts.resourceType,
      resourceId: `${opts.learningUuid}`,
      resourceIdSegmentValues: {
        learningUuid: opts.learningUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareLearningAriStaticOpts);
    return new _TownsquareLearningAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareLearningAriStaticOpts);
    return new _TownsquareLearningAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      learningUuid: this.learningUuid
    };
  }
};

// src/townsquare/project/types.ts
var TownsquareProjectAriResourceOwner = "townsquare", TownsquareProjectAriResourceType = "project";

// src/townsquare/project/manifest.ts
var townsquareProjectAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareProjectAriResourceOwner,
  resourceType: TownsquareProjectAriResourceType,
  resourceIdSlug: "{projectUuid}",
  resourceIdSegmentFormats: {
    projectUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/project/index.ts
var TownsquareProjectAri = class _TownsquareProjectAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._projectUuid = opts.resourceIdSegmentValues.projectUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get projectUuid() {
    return this._projectUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareProjectAriStaticOpts.qualifier,
      platformQualifier: townsquareProjectAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareProjectAriStaticOpts.resourceOwner,
      resourceType: townsquareProjectAriStaticOpts.resourceType,
      resourceId: `${opts.projectUuid}`,
      resourceIdSegmentValues: {
        projectUuid: opts.projectUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareProjectAriStaticOpts);
    return new _TownsquareProjectAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareProjectAriStaticOpts);
    return new _TownsquareProjectAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      projectUuid: this.projectUuid
    };
  }
};

// src/townsquare/question/types.ts
var TownsquareQuestionAriResourceOwner = "townsquare", TownsquareQuestionAriResourceType = "question";

// src/townsquare/question/manifest.ts
var townsquareQuestionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareQuestionAriResourceOwner,
  resourceType: TownsquareQuestionAriResourceType,
  resourceIdSlug: "{questionUuid}",
  resourceIdSegmentFormats: {
    questionUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/question/index.ts
var TownsquareQuestionAri = class _TownsquareQuestionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._questionUuid = opts.resourceIdSegmentValues.questionUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get questionUuid() {
    return this._questionUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareQuestionAriStaticOpts.qualifier,
      platformQualifier: townsquareQuestionAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareQuestionAriStaticOpts.resourceOwner,
      resourceType: townsquareQuestionAriStaticOpts.resourceType,
      resourceId: `${opts.questionUuid}`,
      resourceIdSegmentValues: {
        questionUuid: opts.questionUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareQuestionAriStaticOpts);
    return new _TownsquareQuestionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareQuestionAriStaticOpts);
    return new _TownsquareQuestionAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      questionUuid: this.questionUuid
    };
  }
};

// src/townsquare/role/types.ts
var TownsquareRoleAriResourceOwner = "townsquare", TownsquareRoleAriResourceType = "role";

// src/townsquare/role/manifest.ts
var townsquareRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TownsquareRoleAriResourceOwner,
  resourceType: TownsquareRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/role/index.ts
var TownsquareRoleAri = class _TownsquareRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareRoleAriStaticOpts.qualifier,
      platformQualifier: townsquareRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: townsquareRoleAriStaticOpts.resourceOwner,
      resourceType: townsquareRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareRoleAriStaticOpts);
    return new _TownsquareRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareRoleAriStaticOpts);
    return new _TownsquareRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/townsquare/site/types.ts
var TownsquareSiteAriResourceOwner = "townsquare", TownsquareSiteAriResourceType = "site";

// src/townsquare/site/manifest.ts
var townsquareSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TownsquareSiteAriResourceOwner,
  resourceType: TownsquareSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/site/index.ts
var TownsquareSiteAri = class _TownsquareSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareSiteAriStaticOpts.qualifier,
      platformQualifier: townsquareSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: townsquareSiteAriStaticOpts.resourceOwner,
      resourceType: townsquareSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareSiteAriStaticOpts);
    return new _TownsquareSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareSiteAriStaticOpts);
    return new _TownsquareSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/townsquare/tag/types.ts
var TownsquareTagAriResourceOwner = "townsquare", TownsquareTagAriResourceType = "tag";

// src/townsquare/tag/manifest.ts
var townsquareTagAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareTagAriResourceOwner,
  resourceType: TownsquareTagAriResourceType,
  resourceIdSlug: "{tagUuid}",
  resourceIdSegmentFormats: {
    tagUuid: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/tag/index.ts
var TownsquareTagAri = class _TownsquareTagAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._tagUuid = opts.resourceIdSegmentValues.tagUuid;
  }
  get siteId() {
    return this._siteId;
  }
  get tagUuid() {
    return this._tagUuid;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareTagAriStaticOpts.qualifier,
      platformQualifier: townsquareTagAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareTagAriStaticOpts.resourceOwner,
      resourceType: townsquareTagAriStaticOpts.resourceType,
      resourceId: `${opts.tagUuid}`,
      resourceIdSegmentValues: {
        tagUuid: opts.tagUuid
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareTagAriStaticOpts);
    return new _TownsquareTagAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareTagAriStaticOpts);
    return new _TownsquareTagAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      tagUuid: this.tagUuid
    };
  }
};

// src/townsquare/workspace/types.ts
var TownsquareWorkspaceAriResourceOwner = "townsquare", TownsquareWorkspaceAriResourceType = "workspace";

// src/townsquare/workspace/manifest.ts
var townsquareWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9-]+$"),
  resourceOwner: TownsquareWorkspaceAriResourceOwner,
  resourceType: TownsquareWorkspaceAriResourceType,
  resourceIdSlug: "{activationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/townsquare/workspace/index.ts
var TownsquareWorkspaceAri = class _TownsquareWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: townsquareWorkspaceAriStaticOpts.qualifier,
      platformQualifier: townsquareWorkspaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: townsquareWorkspaceAriStaticOpts.resourceOwner,
      resourceType: townsquareWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, townsquareWorkspaceAriStaticOpts);
    return new _TownsquareWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, townsquareWorkspaceAriStaticOpts);
    return new _TownsquareWorkspaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId
    };
  }
};

// src/trello/attachment/types.ts
var TrelloAttachmentAriResourceOwner = "trello", TrelloAttachmentAriResourceType = "attachment";

// src/trello/attachment/manifest.ts
var trelloAttachmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloAttachmentAriResourceOwner,
  resourceType: TrelloAttachmentAriResourceType,
  resourceIdSlug: "card/workspace/{workspaceId}/{cardId}/{attachmentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    cardId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    attachmentId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/attachment/index.ts
var TrelloAttachmentAri = class _TrelloAttachmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._cardId = opts.resourceIdSegmentValues.cardId, this._attachmentId = opts.resourceIdSegmentValues.attachmentId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get cardId() {
    return this._cardId;
  }
  get attachmentId() {
    return this._attachmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloAttachmentAriStaticOpts.qualifier,
      platformQualifier: trelloAttachmentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloAttachmentAriStaticOpts.resourceOwner,
      resourceType: trelloAttachmentAriStaticOpts.resourceType,
      resourceId: `card/workspace/${opts.workspaceId}/${opts.cardId}/${opts.attachmentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        cardId: opts.cardId || "",
        attachmentId: opts.attachmentId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloAttachmentAriStaticOpts);
    return new _TrelloAttachmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloAttachmentAriStaticOpts);
    return new _TrelloAttachmentAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      cardId: this.cardId,
      attachmentId: this.attachmentId
    };
  }
};

// src/trello/board/types.ts
var TrelloBoardAriResourceOwner = "trello", TrelloBoardAriResourceType = "board";

// src/trello/board/manifest.ts
var trelloBoardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloBoardAriResourceOwner,
  resourceType: TrelloBoardAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{boardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    boardId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/board/index.ts
var TrelloBoardAri = class _TrelloBoardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloBoardAriStaticOpts.qualifier,
      platformQualifier: trelloBoardAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloBoardAriStaticOpts.resourceOwner,
      resourceType: trelloBoardAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.boardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        boardId: opts.boardId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloBoardAriStaticOpts);
    return new _TrelloBoardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloBoardAriStaticOpts);
    return new _TrelloBoardAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      boardId: this.boardId
    };
  }
};

// src/trello/card/types.ts
var TrelloCardAriResourceOwner = "trello", TrelloCardAriResourceType = "card";

// src/trello/card/manifest.ts
var trelloCardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloCardAriResourceOwner,
  resourceType: TrelloCardAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{cardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    cardId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/card/index.ts
var TrelloCardAri = class _TrelloCardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._cardId = opts.resourceIdSegmentValues.cardId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get cardId() {
    return this._cardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloCardAriStaticOpts.qualifier,
      platformQualifier: trelloCardAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloCardAriStaticOpts.resourceOwner,
      resourceType: trelloCardAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.cardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        cardId: opts.cardId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloCardAriStaticOpts);
    return new _TrelloCardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloCardAriStaticOpts);
    return new _TrelloCardAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      cardId: this.cardId
    };
  }
};

// src/trello/enterprise/types.ts
var TrelloEnterpriseAriResourceOwner = "trello", TrelloEnterpriseAriResourceType = "enterprise";

// src/trello/enterprise/manifest.ts
var trelloEnterpriseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloEnterpriseAriResourceOwner,
  resourceType: TrelloEnterpriseAriResourceType,
  resourceIdSlug: "{enterpriseId}",
  resourceIdSegmentFormats: {
    enterpriseId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/enterprise/index.ts
var TrelloEnterpriseAri = class _TrelloEnterpriseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._enterpriseId = opts.resourceIdSegmentValues.enterpriseId;
  }
  get enterpriseId() {
    return this._enterpriseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloEnterpriseAriStaticOpts.qualifier,
      platformQualifier: trelloEnterpriseAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloEnterpriseAriStaticOpts.resourceOwner,
      resourceType: trelloEnterpriseAriStaticOpts.resourceType,
      resourceId: `${opts.enterpriseId}`,
      resourceIdSegmentValues: {
        enterpriseId: opts.enterpriseId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloEnterpriseAriStaticOpts);
    return new _TrelloEnterpriseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloEnterpriseAriStaticOpts);
    return new _TrelloEnterpriseAri(opts);
  }
  getVariables() {
    return {
      enterpriseId: this.enterpriseId
    };
  }
};

// src/trello/list/types.ts
var TrelloListAriResourceOwner = "trello", TrelloListAriResourceType = "list";

// src/trello/list/manifest.ts
var trelloListAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloListAriResourceOwner,
  resourceType: TrelloListAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{listId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    listId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/list/index.ts
var TrelloListAri = class _TrelloListAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._listId = opts.resourceIdSegmentValues.listId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get listId() {
    return this._listId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloListAriStaticOpts.qualifier,
      platformQualifier: trelloListAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloListAriStaticOpts.resourceOwner,
      resourceType: trelloListAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.listId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        listId: opts.listId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloListAriStaticOpts);
    return new _TrelloListAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloListAriStaticOpts);
    return new _TrelloListAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      listId: this.listId
    };
  }
};

// src/trello/role/types.ts
var TrelloRoleAriResourceOwner = "trello", TrelloRoleAriResourceType = "role";

// src/trello/role/manifest.ts
var trelloRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloRoleAriResourceOwner,
  resourceType: TrelloRoleAriResourceType,
  resourceIdSlug: "{roleGroup}/{roleType}",
  resourceIdSegmentFormats: {
    roleGroup: /(?:workspace|enterprise|product)/,
    // eslint-disable-line no-useless-escape
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/role/index.ts
var TrelloRoleAri = class _TrelloRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleGroup = opts.resourceIdSegmentValues.roleGroup, this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleGroup() {
    return this._roleGroup;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloRoleAriStaticOpts.qualifier,
      platformQualifier: trelloRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloRoleAriStaticOpts.resourceOwner,
      resourceType: trelloRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleGroup}/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleGroup: opts.roleGroup,
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloRoleAriStaticOpts);
    return new _TrelloRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloRoleAriStaticOpts);
    return new _TrelloRoleAri(opts);
  }
  getVariables() {
    return {
      roleGroup: this.roleGroup,
      roleType: this.roleType
    };
  }
};

// src/trello/site/types.ts
var TrelloSiteAriResourceOwner = "trello", TrelloSiteAriResourceType = "site";

// src/trello/site/manifest.ts
var trelloSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloSiteAriResourceOwner,
  resourceType: TrelloSiteAriResourceType,
  resourceIdSlug: "trello",
  resourceIdSegmentFormats: {}
};

// src/trello/site/index.ts
var TrelloSiteAri = class _TrelloSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloSiteAriStaticOpts.qualifier,
      platformQualifier: trelloSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloSiteAriStaticOpts.resourceOwner,
      resourceType: trelloSiteAriStaticOpts.resourceType,
      resourceId: "trello",
      resourceIdSegmentValues: {}
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloSiteAriStaticOpts);
    return new _TrelloSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloSiteAriStaticOpts);
    return new _TrelloSiteAri(opts);
  }
  getVariables() {
    return {};
  }
};

// src/trello/user/types.ts
var TrelloUserAriResourceOwner = "trello", TrelloUserAriResourceType = "user";

// src/trello/user/manifest.ts
var trelloUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloUserAriResourceOwner,
  resourceType: TrelloUserAriResourceType,
  resourceIdSlug: "{userId}",
  resourceIdSegmentFormats: {
    userId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/user/index.ts
var TrelloUserAri = class _TrelloUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloUserAriStaticOpts.qualifier,
      platformQualifier: trelloUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloUserAriStaticOpts.resourceOwner,
      resourceType: trelloUserAriStaticOpts.resourceType,
      resourceId: `${opts.userId}`,
      resourceIdSegmentValues: {
        userId: opts.userId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloUserAriStaticOpts);
    return new _TrelloUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloUserAriStaticOpts);
    return new _TrelloUserAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId
    };
  }
};

// src/trello/workspace/types.ts
var TrelloWorkspaceAriResourceOwner = "trello", TrelloWorkspaceAriResourceType = "workspace";

// src/trello/workspace/manifest.ts
var trelloWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: TrelloWorkspaceAriResourceOwner,
  resourceType: TrelloWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/workspace/index.ts
var TrelloWorkspaceAri = class _TrelloWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloWorkspaceAriStaticOpts.qualifier,
      platformQualifier: trelloWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloWorkspaceAriStaticOpts.resourceOwner,
      resourceType: trelloWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloWorkspaceAriStaticOpts);
    return new _TrelloWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloWorkspaceAriStaticOpts);
    return new _TrelloWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

// src/unified-help/role/types.ts
var UnifiedHelpRoleAriResourceOwner = "unified-help", UnifiedHelpRoleAriResourceType = "role";

// src/unified-help/role/manifest.ts
var unifiedHelpRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedHelpRoleAriResourceOwner,
  resourceType: UnifiedHelpRoleAriResourceType,
  resourceIdSlug: "product/{roleType}",
  resourceIdSegmentFormats: {
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-help/role/index.ts
var UnifiedHelpRoleAri = class _UnifiedHelpRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedHelpRoleAriStaticOpts.qualifier,
      platformQualifier: unifiedHelpRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedHelpRoleAriStaticOpts.resourceOwner,
      resourceType: unifiedHelpRoleAriStaticOpts.resourceType,
      resourceId: `product/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedHelpRoleAriStaticOpts);
    return new _UnifiedHelpRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedHelpRoleAriStaticOpts);
    return new _UnifiedHelpRoleAri(opts);
  }
  getVariables() {
    return {
      roleType: this.roleType
    };
  }
};

// src/unified-help/site/types.ts
var UnifiedHelpSiteAriResourceOwner = "unified-help", UnifiedHelpSiteAriResourceType = "site";

// src/unified-help/site/manifest.ts
var unifiedHelpSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedHelpSiteAriResourceOwner,
  resourceType: UnifiedHelpSiteAriResourceType,
  resourceIdSlug: "{siteId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-help/site/index.ts
var UnifiedHelpSiteAri = class _UnifiedHelpSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId;
  }
  get siteId() {
    return this._siteId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedHelpSiteAriStaticOpts.qualifier,
      platformQualifier: unifiedHelpSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedHelpSiteAriStaticOpts.resourceOwner,
      resourceType: unifiedHelpSiteAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedHelpSiteAriStaticOpts);
    return new _UnifiedHelpSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedHelpSiteAriStaticOpts);
    return new _UnifiedHelpSiteAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId
    };
  }
};

// src/unified-help/workspace/types.ts
var UnifiedHelpWorkspaceAriResourceOwner = "unified-help", UnifiedHelpWorkspaceAriResourceType = "workspace";

// src/unified-help/workspace/manifest.ts
var unifiedHelpWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedHelpWorkspaceAriResourceOwner,
  resourceType: UnifiedHelpWorkspaceAriResourceType,
  resourceIdSlug: "{activationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-help/workspace/index.ts
var UnifiedHelpWorkspaceAri = class _UnifiedHelpWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId;
  }
  get activationId() {
    return this._activationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedHelpWorkspaceAriStaticOpts.qualifier,
      platformQualifier: unifiedHelpWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedHelpWorkspaceAriStaticOpts.resourceOwner,
      resourceType: unifiedHelpWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedHelpWorkspaceAriStaticOpts);
    return new _UnifiedHelpWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedHelpWorkspaceAriStaticOpts);
    return new _UnifiedHelpWorkspaceAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId
    };
  }
};

// src/unified-portable-profile/linked-account/types.ts
var UnifiedPortableProfileLinkedAccountAriResourceOwner = "unified-portable-profile", UnifiedPortableProfileLinkedAccountAriResourceType = "linked-account";

// src/unified-portable-profile/linked-account/manifest.ts
var unifiedPortableProfileLinkedAccountAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedPortableProfileLinkedAccountAriResourceOwner,
  resourceType: UnifiedPortableProfileLinkedAccountAriResourceType,
  resourceIdSlug: "{linkedAccountInternalId}",
  resourceIdSegmentFormats: {
    linkedAccountInternalId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-portable-profile/linked-account/index.ts
var UnifiedPortableProfileLinkedAccountAri = class _UnifiedPortableProfileLinkedAccountAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._linkedAccountInternalId = opts.resourceIdSegmentValues.linkedAccountInternalId;
  }
  get linkedAccountInternalId() {
    return this._linkedAccountInternalId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedPortableProfileLinkedAccountAriStaticOpts.qualifier,
      platformQualifier: unifiedPortableProfileLinkedAccountAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedPortableProfileLinkedAccountAriStaticOpts.resourceOwner,
      resourceType: unifiedPortableProfileLinkedAccountAriStaticOpts.resourceType,
      resourceId: `${opts.linkedAccountInternalId}`,
      resourceIdSegmentValues: {
        linkedAccountInternalId: opts.linkedAccountInternalId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedPortableProfileLinkedAccountAriStaticOpts);
    return new _UnifiedPortableProfileLinkedAccountAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedPortableProfileLinkedAccountAriStaticOpts);
    return new _UnifiedPortableProfileLinkedAccountAri(opts);
  }
  getVariables() {
    return {
      linkedAccountInternalId: this.linkedAccountInternalId
    };
  }
};

// src/unified-portable-profile/parent-account/types.ts
var UnifiedPortableProfileParentAccountAriResourceOwner = "unified-portable-profile", UnifiedPortableProfileParentAccountAriResourceType = "parent-account";

// src/unified-portable-profile/parent-account/manifest.ts
var unifiedPortableProfileParentAccountAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedPortableProfileParentAccountAriResourceOwner,
  resourceType: UnifiedPortableProfileParentAccountAriResourceType,
  resourceIdSlug: "{parentAccountInternalId}",
  resourceIdSegmentFormats: {
    parentAccountInternalId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-portable-profile/parent-account/index.ts
var UnifiedPortableProfileParentAccountAri = class _UnifiedPortableProfileParentAccountAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._parentAccountInternalId = opts.resourceIdSegmentValues.parentAccountInternalId;
  }
  get parentAccountInternalId() {
    return this._parentAccountInternalId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedPortableProfileParentAccountAriStaticOpts.qualifier,
      platformQualifier: unifiedPortableProfileParentAccountAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedPortableProfileParentAccountAriStaticOpts.resourceOwner,
      resourceType: unifiedPortableProfileParentAccountAriStaticOpts.resourceType,
      resourceId: `${opts.parentAccountInternalId}`,
      resourceIdSegmentValues: {
        parentAccountInternalId: opts.parentAccountInternalId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedPortableProfileParentAccountAriStaticOpts);
    return new _UnifiedPortableProfileParentAccountAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedPortableProfileParentAccountAriStaticOpts);
    return new _UnifiedPortableProfileParentAccountAri(opts);
  }
  getVariables() {
    return {
      parentAccountInternalId: this.parentAccountInternalId
    };
  }
};

// src/unified-portable-profile/unified-account/types.ts
var UnifiedPortableProfileUnifiedAccountAriResourceOwner = "unified-portable-profile", UnifiedPortableProfileUnifiedAccountAriResourceType = "unified-account";

// src/unified-portable-profile/unified-account/manifest.ts
var unifiedPortableProfileUnifiedAccountAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedPortableProfileUnifiedAccountAriResourceOwner,
  resourceType: UnifiedPortableProfileUnifiedAccountAriResourceType,
  resourceIdSlug: "{linkedAccountInternalId}",
  resourceIdSegmentFormats: {
    linkedAccountInternalId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-portable-profile/unified-account/index.ts
var UnifiedPortableProfileUnifiedAccountAri = class _UnifiedPortableProfileUnifiedAccountAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._linkedAccountInternalId = opts.resourceIdSegmentValues.linkedAccountInternalId;
  }
  get linkedAccountInternalId() {
    return this._linkedAccountInternalId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedPortableProfileUnifiedAccountAriStaticOpts.qualifier,
      platformQualifier: unifiedPortableProfileUnifiedAccountAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedPortableProfileUnifiedAccountAriStaticOpts.resourceOwner,
      resourceType: unifiedPortableProfileUnifiedAccountAriStaticOpts.resourceType,
      resourceId: `${opts.linkedAccountInternalId}`,
      resourceIdSegmentValues: {
        linkedAccountInternalId: opts.linkedAccountInternalId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedPortableProfileUnifiedAccountAriStaticOpts);
    return new _UnifiedPortableProfileUnifiedAccountAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedPortableProfileUnifiedAccountAriStaticOpts);
    return new _UnifiedPortableProfileUnifiedAccountAri(opts);
  }
  getVariables() {
    return {
      linkedAccountInternalId: this.linkedAccountInternalId
    };
  }
};

// src/unified-portable-profile/unified-profile/types.ts
var UnifiedPortableProfileUnifiedProfileAriResourceOwner = "unified-portable-profile", UnifiedPortableProfileUnifiedProfileAriResourceType = "unified-profile";

// src/unified-portable-profile/unified-profile/manifest.ts
var unifiedPortableProfileUnifiedProfileAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: UnifiedPortableProfileUnifiedProfileAriResourceOwner,
  resourceType: UnifiedPortableProfileUnifiedProfileAriResourceType,
  resourceIdSlug: "{unifiedProfileInternalId}",
  resourceIdSegmentFormats: {
    unifiedProfileInternalId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/unified-portable-profile/unified-profile/index.ts
var UnifiedPortableProfileUnifiedProfileAri = class _UnifiedPortableProfileUnifiedProfileAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._unifiedProfileInternalId = opts.resourceIdSegmentValues.unifiedProfileInternalId;
  }
  get unifiedProfileInternalId() {
    return this._unifiedProfileInternalId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: unifiedPortableProfileUnifiedProfileAriStaticOpts.qualifier,
      platformQualifier: unifiedPortableProfileUnifiedProfileAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: unifiedPortableProfileUnifiedProfileAriStaticOpts.resourceOwner,
      resourceType: unifiedPortableProfileUnifiedProfileAriStaticOpts.resourceType,
      resourceId: `${opts.unifiedProfileInternalId}`,
      resourceIdSegmentValues: {
        unifiedProfileInternalId: opts.unifiedProfileInternalId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, unifiedPortableProfileUnifiedProfileAriStaticOpts);
    return new _UnifiedPortableProfileUnifiedProfileAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, unifiedPortableProfileUnifiedProfileAriStaticOpts);
    return new _UnifiedPortableProfileUnifiedProfileAri(opts);
  }
  getVariables() {
    return {
      unifiedProfileInternalId: this.unifiedProfileInternalId
    };
  }
};

// src/virtual-agent/configuration/types.ts
var VirtualAgentConfigurationAriResourceOwner = "virtual-agent", VirtualAgentConfigurationAriResourceType = "configuration";

// src/virtual-agent/configuration/manifest.ts
var virtualAgentConfigurationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentConfigurationAriResourceOwner,
  resourceType: VirtualAgentConfigurationAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/configuration/index.ts
var VirtualAgentConfigurationAri = class _VirtualAgentConfigurationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentConfigurationAriStaticOpts.qualifier,
      platformQualifier: virtualAgentConfigurationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentConfigurationAriStaticOpts.resourceOwner,
      resourceType: virtualAgentConfigurationAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentConfigurationAriStaticOpts);
    return new _VirtualAgentConfigurationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentConfigurationAriStaticOpts);
    return new _VirtualAgentConfigurationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId
    };
  }
};

// src/virtual-agent/conversation/types.ts
var VirtualAgentConversationAriResourceOwner = "virtual-agent", VirtualAgentConversationAriResourceType = "conversation";

// src/virtual-agent/conversation/manifest.ts
var virtualAgentConversationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentConversationAriResourceOwner,
  resourceType: VirtualAgentConversationAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{conversationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    conversationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/conversation/index.ts
var VirtualAgentConversationAri = class _VirtualAgentConversationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._conversationId = opts.resourceIdSegmentValues.conversationId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get conversationId() {
    return this._conversationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentConversationAriStaticOpts.qualifier,
      platformQualifier: virtualAgentConversationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentConversationAriStaticOpts.resourceOwner,
      resourceType: virtualAgentConversationAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.conversationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        conversationId: opts.conversationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentConversationAriStaticOpts);
    return new _VirtualAgentConversationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentConversationAriStaticOpts);
    return new _VirtualAgentConversationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      conversationId: this.conversationId
    };
  }
};

// src/virtual-agent/flow-editor/types.ts
var VirtualAgentFlowEditorAriResourceOwner = "virtual-agent", VirtualAgentFlowEditorAriResourceType = "flow-editor";

// src/virtual-agent/flow-editor/manifest.ts
var virtualAgentFlowEditorAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentFlowEditorAriResourceOwner,
  resourceType: VirtualAgentFlowEditorAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{flowEditorId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    flowEditorId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/flow-editor/index.ts
var VirtualAgentFlowEditorAri = class _VirtualAgentFlowEditorAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._flowEditorId = opts.resourceIdSegmentValues.flowEditorId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get flowEditorId() {
    return this._flowEditorId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentFlowEditorAriStaticOpts.qualifier,
      platformQualifier: virtualAgentFlowEditorAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentFlowEditorAriStaticOpts.resourceOwner,
      resourceType: virtualAgentFlowEditorAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.flowEditorId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        flowEditorId: opts.flowEditorId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentFlowEditorAriStaticOpts);
    return new _VirtualAgentFlowEditorAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentFlowEditorAriStaticOpts);
    return new _VirtualAgentFlowEditorAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      flowEditorId: this.flowEditorId
    };
  }
};

// src/virtual-agent/intent-projection/types.ts
var VirtualAgentIntentProjectionAriResourceOwner = "virtual-agent", VirtualAgentIntentProjectionAriResourceType = "intent-projection";

// src/virtual-agent/intent-projection/manifest.ts
var virtualAgentIntentProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-projection/index.ts
var VirtualAgentIntentProjectionAri = class _VirtualAgentIntentProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentId = opts.resourceIdSegmentValues.intentId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentId() {
    return this._intentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentId: opts.intentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentProjectionAriStaticOpts);
    return new _VirtualAgentIntentProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentProjectionAriStaticOpts);
    return new _VirtualAgentIntentProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentId: this.intentId
    };
  }
};

// src/virtual-agent/intent-question-projection/types.ts
var VirtualAgentIntentQuestionProjectionAriResourceOwner = "virtual-agent", VirtualAgentIntentQuestionProjectionAriResourceType = "intent-question-projection";

// src/virtual-agent/intent-question-projection/manifest.ts
var virtualAgentIntentQuestionProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentQuestionProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentQuestionProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentQuestionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentQuestionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-question-projection/index.ts
var VirtualAgentIntentQuestionProjectionAri = class _VirtualAgentIntentQuestionProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentQuestionId = opts.resourceIdSegmentValues.intentQuestionId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentQuestionId() {
    return this._intentQuestionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentQuestionProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentQuestionProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentQuestionProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentQuestionProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentQuestionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentQuestionId: opts.intentQuestionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentQuestionProjectionAriStaticOpts);
    return new _VirtualAgentIntentQuestionProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentQuestionProjectionAriStaticOpts);
    return new _VirtualAgentIntentQuestionProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentQuestionId: this.intentQuestionId
    };
  }
};

// src/virtual-agent/intent-rule-projection/types.ts
var VirtualAgentIntentRuleProjectionAriResourceOwner = "virtual-agent", VirtualAgentIntentRuleProjectionAriResourceType = "intent-rule-projection";

// src/virtual-agent/intent-rule-projection/manifest.ts
var virtualAgentIntentRuleProjectionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentRuleProjectionAriResourceOwner,
  resourceType: VirtualAgentIntentRuleProjectionAriResourceType,
  resourceIdSlug: "{activationId}/{configurationId}/{intentId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    configurationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    intentId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-rule-projection/index.ts
var VirtualAgentIntentRuleProjectionAri = class _VirtualAgentIntentRuleProjectionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._configurationId = opts.resourceIdSegmentValues.configurationId, this._intentId = opts.resourceIdSegmentValues.intentId;
  }
  get activationId() {
    return this._activationId;
  }
  get configurationId() {
    return this._configurationId;
  }
  get intentId() {
    return this._intentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentRuleProjectionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentRuleProjectionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentRuleProjectionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentRuleProjectionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.configurationId}/${opts.intentId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        configurationId: opts.configurationId,
        intentId: opts.intentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentRuleProjectionAriStaticOpts);
    return new _VirtualAgentIntentRuleProjectionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentRuleProjectionAriStaticOpts);
    return new _VirtualAgentIntentRuleProjectionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      configurationId: this.configurationId,
      intentId: this.intentId
    };
  }
};

// src/virtual-agent/intent-template/types.ts
var VirtualAgentIntentTemplateAriResourceOwner = "virtual-agent", VirtualAgentIntentTemplateAriResourceType = "intent-template";

// src/virtual-agent/intent-template/manifest.ts
var virtualAgentIntentTemplateAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  resourceOwner: VirtualAgentIntentTemplateAriResourceOwner,
  resourceType: VirtualAgentIntentTemplateAriResourceType,
  resourceIdSlug: "{activationId}/{intentTemplateId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    intentTemplateId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-template/index.ts
var VirtualAgentIntentTemplateAri = class _VirtualAgentIntentTemplateAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._intentTemplateId = opts.resourceIdSegmentValues.intentTemplateId;
  }
  get activationId() {
    return this._activationId;
  }
  get intentTemplateId() {
    return this._intentTemplateId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentTemplateAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentTemplateAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentTemplateAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentTemplateAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.intentTemplateId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        intentTemplateId: opts.intentTemplateId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentTemplateAriStaticOpts);
    return new _VirtualAgentIntentTemplateAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentTemplateAriStaticOpts);
    return new _VirtualAgentIntentTemplateAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      intentTemplateId: this.intentTemplateId
    };
  }
};

// src/workato/job/types.ts
var WorkatoJobAriResourceOwner = "workato", WorkatoJobAriResourceType = "job";

// src/workato/job/manifest.ts
var workatoJobAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkatoJobAriResourceOwner,
  resourceType: WorkatoJobAriResourceType,
  resourceIdSlug: "{workatoTenantKey}/{jobId}",
  resourceIdSegmentFormats: {
    workatoTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    jobId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workato/job/index.ts
var WorkatoJobAri = class _WorkatoJobAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workatoTenantKey = opts.resourceIdSegmentValues.workatoTenantKey, this._jobId = opts.resourceIdSegmentValues.jobId;
  }
  get workatoTenantKey() {
    return this._workatoTenantKey;
  }
  get jobId() {
    return this._jobId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workatoJobAriStaticOpts.qualifier,
      platformQualifier: workatoJobAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workatoJobAriStaticOpts.resourceOwner,
      resourceType: workatoJobAriStaticOpts.resourceType,
      resourceId: `${opts.workatoTenantKey}/${opts.jobId}`,
      resourceIdSegmentValues: {
        workatoTenantKey: opts.workatoTenantKey,
        jobId: opts.jobId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workatoJobAriStaticOpts);
    return new _WorkatoJobAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workatoJobAriStaticOpts);
    return new _WorkatoJobAri(opts);
  }
  getVariables() {
    return {
      workatoTenantKey: this.workatoTenantKey,
      jobId: this.jobId
    };
  }
};

// src/workato/recipe/types.ts
var WorkatoRecipeAriResourceOwner = "workato", WorkatoRecipeAriResourceType = "recipe";

// src/workato/recipe/manifest.ts
var workatoRecipeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkatoRecipeAriResourceOwner,
  resourceType: WorkatoRecipeAriResourceType,
  resourceIdSlug: "{workatoTenantKey}/{recipeId}",
  resourceIdSegmentFormats: {
    workatoTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    recipeId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workato/recipe/index.ts
var WorkatoRecipeAri = class _WorkatoRecipeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workatoTenantKey = opts.resourceIdSegmentValues.workatoTenantKey, this._recipeId = opts.resourceIdSegmentValues.recipeId;
  }
  get workatoTenantKey() {
    return this._workatoTenantKey;
  }
  get recipeId() {
    return this._recipeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workatoRecipeAriStaticOpts.qualifier,
      platformQualifier: workatoRecipeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workatoRecipeAriStaticOpts.resourceOwner,
      resourceType: workatoRecipeAriStaticOpts.resourceType,
      resourceId: `${opts.workatoTenantKey}/${opts.recipeId}`,
      resourceIdSegmentValues: {
        workatoTenantKey: opts.workatoTenantKey,
        recipeId: opts.recipeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workatoRecipeAriStaticOpts);
    return new _WorkatoRecipeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workatoRecipeAriStaticOpts);
    return new _WorkatoRecipeAri(opts);
  }
  getVariables() {
    return {
      workatoTenantKey: this.workatoTenantKey,
      recipeId: this.recipeId
    };
  }
};

// src/workday/cost-center/types.ts
var WorkdayCostCenterAriResourceOwner = "workday", WorkdayCostCenterAriResourceType = "cost-center";

// src/workday/cost-center/manifest.ts
var workdayCostCenterAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkdayCostCenterAriResourceOwner,
  resourceType: WorkdayCostCenterAriResourceType,
  resourceIdSlug: "{workdayTenantKey}/{costCenterWorkdayId}",
  resourceIdSegmentFormats: {
    workdayTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    costCenterWorkdayId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workday/cost-center/index.ts
var WorkdayCostCenterAri = class _WorkdayCostCenterAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workdayTenantKey = opts.resourceIdSegmentValues.workdayTenantKey, this._costCenterWorkdayId = opts.resourceIdSegmentValues.costCenterWorkdayId;
  }
  get workdayTenantKey() {
    return this._workdayTenantKey;
  }
  get costCenterWorkdayId() {
    return this._costCenterWorkdayId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workdayCostCenterAriStaticOpts.qualifier,
      platformQualifier: workdayCostCenterAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workdayCostCenterAriStaticOpts.resourceOwner,
      resourceType: workdayCostCenterAriStaticOpts.resourceType,
      resourceId: `${opts.workdayTenantKey}/${opts.costCenterWorkdayId}`,
      resourceIdSegmentValues: {
        workdayTenantKey: opts.workdayTenantKey,
        costCenterWorkdayId: opts.costCenterWorkdayId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workdayCostCenterAriStaticOpts);
    return new _WorkdayCostCenterAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workdayCostCenterAriStaticOpts);
    return new _WorkdayCostCenterAri(opts);
  }
  getVariables() {
    return {
      workdayTenantKey: this.workdayTenantKey,
      costCenterWorkdayId: this.costCenterWorkdayId
    };
  }
};

// src/workday/job-profile/types.ts
var WorkdayJobProfileAriResourceOwner = "workday", WorkdayJobProfileAriResourceType = "job-profile";

// src/workday/job-profile/manifest.ts
var workdayJobProfileAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkdayJobProfileAriResourceOwner,
  resourceType: WorkdayJobProfileAriResourceType,
  resourceIdSlug: "{workdayTenantKey}/{jobProfileWorkdayId}",
  resourceIdSegmentFormats: {
    workdayTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    jobProfileWorkdayId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workday/job-profile/index.ts
var WorkdayJobProfileAri = class _WorkdayJobProfileAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workdayTenantKey = opts.resourceIdSegmentValues.workdayTenantKey, this._jobProfileWorkdayId = opts.resourceIdSegmentValues.jobProfileWorkdayId;
  }
  get workdayTenantKey() {
    return this._workdayTenantKey;
  }
  get jobProfileWorkdayId() {
    return this._jobProfileWorkdayId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workdayJobProfileAriStaticOpts.qualifier,
      platformQualifier: workdayJobProfileAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workdayJobProfileAriStaticOpts.resourceOwner,
      resourceType: workdayJobProfileAriStaticOpts.resourceType,
      resourceId: `${opts.workdayTenantKey}/${opts.jobProfileWorkdayId}`,
      resourceIdSegmentValues: {
        workdayTenantKey: opts.workdayTenantKey,
        jobProfileWorkdayId: opts.jobProfileWorkdayId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workdayJobProfileAriStaticOpts);
    return new _WorkdayJobProfileAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workdayJobProfileAriStaticOpts);
    return new _WorkdayJobProfileAri(opts);
  }
  getVariables() {
    return {
      workdayTenantKey: this.workdayTenantKey,
      jobProfileWorkdayId: this.jobProfileWorkdayId
    };
  }
};

// src/workday/position/types.ts
var WorkdayPositionAriResourceOwner = "workday", WorkdayPositionAriResourceType = "position";

// src/workday/position/manifest.ts
var workdayPositionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkdayPositionAriResourceOwner,
  resourceType: WorkdayPositionAriResourceType,
  resourceIdSlug: "{workdayTenantKey}/{positionWorkdayId}",
  resourceIdSegmentFormats: {
    workdayTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    positionWorkdayId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workday/position/index.ts
var WorkdayPositionAri = class _WorkdayPositionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workdayTenantKey = opts.resourceIdSegmentValues.workdayTenantKey, this._positionWorkdayId = opts.resourceIdSegmentValues.positionWorkdayId;
  }
  get workdayTenantKey() {
    return this._workdayTenantKey;
  }
  get positionWorkdayId() {
    return this._positionWorkdayId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workdayPositionAriStaticOpts.qualifier,
      platformQualifier: workdayPositionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workdayPositionAriStaticOpts.resourceOwner,
      resourceType: workdayPositionAriStaticOpts.resourceType,
      resourceId: `${opts.workdayTenantKey}/${opts.positionWorkdayId}`,
      resourceIdSegmentValues: {
        workdayTenantKey: opts.workdayTenantKey,
        positionWorkdayId: opts.positionWorkdayId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workdayPositionAriStaticOpts);
    return new _WorkdayPositionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workdayPositionAriStaticOpts);
    return new _WorkdayPositionAri(opts);
  }
  getVariables() {
    return {
      workdayTenantKey: this.workdayTenantKey,
      positionWorkdayId: this.positionWorkdayId
    };
  }
};

// src/workday/staff/types.ts
var WorkdayStaffAriResourceOwner = "workday", WorkdayStaffAriResourceType = "staff";

// src/workday/staff/manifest.ts
var workdayStaffAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkdayStaffAriResourceOwner,
  resourceType: WorkdayStaffAriResourceType,
  resourceIdSlug: "{workdayTenantKey}/{staffId}",
  resourceIdSegmentFormats: {
    workdayTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    staffId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workday/staff/index.ts
var WorkdayStaffAri = class _WorkdayStaffAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workdayTenantKey = opts.resourceIdSegmentValues.workdayTenantKey, this._staffId = opts.resourceIdSegmentValues.staffId;
  }
  get workdayTenantKey() {
    return this._workdayTenantKey;
  }
  get staffId() {
    return this._staffId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workdayStaffAriStaticOpts.qualifier,
      platformQualifier: workdayStaffAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workdayStaffAriStaticOpts.resourceOwner,
      resourceType: workdayStaffAriStaticOpts.resourceType,
      resourceId: `${opts.workdayTenantKey}/${opts.staffId}`,
      resourceIdSegmentValues: {
        workdayTenantKey: opts.workdayTenantKey,
        staffId: opts.staffId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workdayStaffAriStaticOpts);
    return new _WorkdayStaffAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workdayStaffAriStaticOpts);
    return new _WorkdayStaffAri(opts);
  }
  getVariables() {
    return {
      workdayTenantKey: this.workdayTenantKey,
      staffId: this.staffId
    };
  }
};

// src/workday/supervisory-org/types.ts
var WorkdaySupervisoryOrgAriResourceOwner = "workday", WorkdaySupervisoryOrgAriResourceType = "supervisory-org";

// src/workday/supervisory-org/manifest.ts
var workdaySupervisoryOrgAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkdaySupervisoryOrgAriResourceOwner,
  resourceType: WorkdaySupervisoryOrgAriResourceType,
  resourceIdSlug: "{workdayTenantKey}/{supervisoryOrgWorkdayId}",
  resourceIdSegmentFormats: {
    workdayTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    supervisoryOrgWorkdayId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workday/supervisory-org/index.ts
var WorkdaySupervisoryOrgAri = class _WorkdaySupervisoryOrgAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workdayTenantKey = opts.resourceIdSegmentValues.workdayTenantKey, this._supervisoryOrgWorkdayId = opts.resourceIdSegmentValues.supervisoryOrgWorkdayId;
  }
  get workdayTenantKey() {
    return this._workdayTenantKey;
  }
  get supervisoryOrgWorkdayId() {
    return this._supervisoryOrgWorkdayId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workdaySupervisoryOrgAriStaticOpts.qualifier,
      platformQualifier: workdaySupervisoryOrgAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workdaySupervisoryOrgAriStaticOpts.resourceOwner,
      resourceType: workdaySupervisoryOrgAriStaticOpts.resourceType,
      resourceId: `${opts.workdayTenantKey}/${opts.supervisoryOrgWorkdayId}`,
      resourceIdSegmentValues: {
        workdayTenantKey: opts.workdayTenantKey,
        supervisoryOrgWorkdayId: opts.supervisoryOrgWorkdayId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workdaySupervisoryOrgAriStaticOpts);
    return new _WorkdaySupervisoryOrgAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workdaySupervisoryOrgAriStaticOpts);
    return new _WorkdaySupervisoryOrgAri(opts);
  }
  getVariables() {
    return {
      workdayTenantKey: this.workdayTenantKey,
      supervisoryOrgWorkdayId: this.supervisoryOrgWorkdayId
    };
  }
};

// src/workday/worker/types.ts
var WorkdayWorkerAriResourceOwner = "workday", WorkdayWorkerAriResourceType = "worker";

// src/workday/worker/manifest.ts
var workdayWorkerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  resourceOwner: WorkdayWorkerAriResourceOwner,
  resourceType: WorkdayWorkerAriResourceType,
  resourceIdSlug: "{workdayTenantKey}/{workerWorkdayId}",
  resourceIdSegmentFormats: {
    workdayTenantKey: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/,
    // eslint-disable-line no-useless-escape
    workerWorkdayId: /[!a-zA-Z0-9\-_.~@:{}=]+(\/[!a-zA-Z0-9\-_.~@:{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/workday/worker/index.ts
var WorkdayWorkerAri = class _WorkdayWorkerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workdayTenantKey = opts.resourceIdSegmentValues.workdayTenantKey, this._workerWorkdayId = opts.resourceIdSegmentValues.workerWorkdayId;
  }
  get workdayTenantKey() {
    return this._workdayTenantKey;
  }
  get workerWorkdayId() {
    return this._workerWorkdayId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: workdayWorkerAriStaticOpts.qualifier,
      platformQualifier: workdayWorkerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: workdayWorkerAriStaticOpts.resourceOwner,
      resourceType: workdayWorkerAriStaticOpts.resourceType,
      resourceId: `${opts.workdayTenantKey}/${opts.workerWorkdayId}`,
      resourceIdSegmentValues: {
        workdayTenantKey: opts.workdayTenantKey,
        workerWorkdayId: opts.workerWorkdayId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, workdayWorkerAriStaticOpts);
    return new _WorkdayWorkerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, workdayWorkerAriStaticOpts);
    return new _WorkdayWorkerAri(opts);
  }
  getVariables() {
    return {
      workdayTenantKey: this.workdayTenantKey,
      workerWorkdayId: this.workerWorkdayId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 673:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var punycode = __webpack_require__(876);
var mappingTable = __webpack_require__(472);

var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};

function normalize(str) { // fix bug in v8
  return str.split('\u0000').map(function (s) { return s.normalize('NFC'); }).join('\u0000');
}

function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;

  while (start <= end) {
    var mid = Math.floor((start + end) / 2);

    var target = mappingTable[mid];
    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }

  return null;
}

var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function countSymbols(string) {
  return string
    // replace every surrogate pair with a BMP symbol
    .replace(regexAstralSymbols, '_')
    // then get the length
    .length;
}

function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";

  var len = countSymbols(domain_name);
  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status = findStatus(codePoint);

    switch (status[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;
      case "ignored":
        break;
      case "mapped":
        processed += String.fromCodePoint.apply(String, status[2]);
        break;
      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }
        break;
      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;
      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status[2]);
        }
        break;
      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }

        processed += String.fromCodePoint(codePoint);
        break;
    }
  }

  return {
    string: processed,
    error: hasError
  };
}

var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;

function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
  }

  var error = false;

  if (normalize(label) !== label ||
      (label[3] === "-" && label[4] === "-") ||
      label[0] === "-" || label[label.length - 1] === "-" ||
      label.indexOf(".") !== -1 ||
      label.search(combiningMarksRegex) === 0) {
    error = true;
  }

  var len = countSymbols(label);
  for (var i = 0; i < len; ++i) {
    var status = findStatus(label.codePointAt(i));
    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid") ||
        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&
         status[1] !== "valid" && status[1] !== "deviation")) {
      error = true;
      break;
    }
  }

  return {
    label: label,
    error: error
  };
}

function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);

  var labels = result.string.split(".");
  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch(e) {
      result.error = true;
    }
  }

  return {
    string: labels.join("."),
    error: result.error
  };
}

module.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function(l) {
    try {
      return punycode.toASCII(l);
    } catch(e) {
      result.error = true;
      return l;
    }
  });

  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;
    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }

    for (var i=0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }

  if (result.error) return null;
  return labels.join(".");
};

module.exports.toUnicode = function(domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);

  return {
    domain: result.string,
    error: result.error
  };
};

module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;


/***/ }),

/***/ 616:
/***/ ((module) => {



var conversions = {};
module.exports = conversions;

function sign(x) {
    return x < 0 ? -1 : 1;
}

function evenRound(x) {
    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)
        return Math.floor(x);
    } else {
        return Math.round(x);
    }
}

function createNumberConversion(bitLength, typeOpts) {
    if (!typeOpts.unsigned) {
        --bitLength;
    }
    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
    const upperBound = Math.pow(2, bitLength) - 1;

    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);

    return function(V, opts) {
        if (!opts) opts = {};

        let x = +V;

        if (opts.enforceRange) {
            if (!Number.isFinite(x)) {
                throw new TypeError("Argument is not a finite number");
            }

            x = sign(x) * Math.floor(Math.abs(x));
            if (x < lowerBound || x > upperBound) {
                throw new TypeError("Argument is not in byte range");
            }

            return x;
        }

        if (!isNaN(x) && opts.clamp) {
            x = evenRound(x);

            if (x < lowerBound) x = lowerBound;
            if (x > upperBound) x = upperBound;
            return x;
        }

        if (!Number.isFinite(x) || x === 0) {
            return 0;
        }

        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;

        if (!typeOpts.unsigned && x >= moduloBound) {
            return x - moduloVal;
        } else if (typeOpts.unsigned) {
            if (x < 0) {
              x += moduloVal;
            } else if (x === -0) { // don't return negative zero
              return 0;
            }
        }

        return x;
    }
}

conversions["void"] = function () {
    return undefined;
};

conversions["boolean"] = function (val) {
    return !!val;
};

conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });

conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });

conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });

conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });

conversions["double"] = function (V) {
    const x = +V;

    if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
    }

    return x;
};

conversions["unrestricted double"] = function (V) {
    const x = +V;

    if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
    }

    return x;
};

// not quite valid, but good enough for JS
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];

conversions["DOMString"] = function (V, opts) {
    if (!opts) opts = {};

    if (opts.treatNullAsEmptyString && V === null) {
        return "";
    }

    return String(V);
};

conversions["ByteString"] = function (V, opts) {
    const x = String(V);
    let c = undefined;
    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
        if (c > 255) {
            throw new TypeError("Argument is not a valid bytestring");
        }
    }

    return x;
};

conversions["USVString"] = function (V) {
    const S = String(V);
    const n = S.length;
    const U = [];
    for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 0xD800 || c > 0xDFFF) {
            U.push(String.fromCodePoint(c));
        } else if (0xDC00 <= c && c <= 0xDFFF) {
            U.push(String.fromCodePoint(0xFFFD));
        } else {
            if (i === n - 1) {
                U.push(String.fromCodePoint(0xFFFD));
            } else {
                const d = S.charCodeAt(i + 1);
                if (0xDC00 <= d && d <= 0xDFFF) {
                    const a = c & 0x3FF;
                    const b = d & 0x3FF;
                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
                    ++i;
                } else {
                    U.push(String.fromCodePoint(0xFFFD));
                }
            }
        }
    }

    return U.join('');
};

conversions["Date"] = function (V, opts) {
    if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
    }
    if (isNaN(V)) {
        return undefined;
    }

    return V;
};

conversions["RegExp"] = function (V, opts) {
    if (!(V instanceof RegExp)) {
        V = new RegExp(V);
    }

    return V;
};


/***/ }),

/***/ 79:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


const usm = __webpack_require__(484);

exports.implementation = class URLImpl {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base = constructorArgs[1];

    let parsedBase = null;
    if (base !== undefined) {
      parsedBase = usm.basicURLParse(base);
      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }

    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;

    // TODO: query stuff
  }

  get href() {
    return usm.serializeURL(this._url);
  }

  set href(v) {
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;
  }

  get origin() {
    return usm.serializeURLOrigin(this._url);
  }

  get protocol() {
    return this._url.scheme + ":";
  }

  set protocol(v) {
    usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
  }

  get username() {
    return this._url.username;
  }

  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setTheUsername(this._url, v);
  }

  get password() {
    return this._url.password;
  }

  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setThePassword(this._url, v);
  }

  get host() {
    const url = this._url;

    if (url.host === null) {
      return "";
    }

    if (url.port === null) {
      return usm.serializeHost(url.host);
    }

    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }

  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
  }

  get hostname() {
    if (this._url.host === null) {
      return "";
    }

    return usm.serializeHost(this._url.host);
  }

  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
  }

  get port() {
    if (this._url.port === null) {
      return "";
    }

    return usm.serializeInteger(this._url.port);
  }

  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
    }
  }

  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }

    if (this._url.path.length === 0) {
      return "";
    }

    return "/" + this._url.path.join("/");
  }

  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    this._url.path = [];
    usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
  }

  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }

    return "?" + this._url.query;
  }

  set search(v) {
    // TODO: query stuff

    const url = this._url;

    if (v === "") {
      url.query = null;
      return;
    }

    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, { url, stateOverride: "query" });
  }

  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }

    return "#" + this._url.fragment;
  }

  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }

    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
  }

  toJSON() {
    return this.href;
  }
};


/***/ }),

/***/ 648:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const conversions = __webpack_require__(616);
const utils = __webpack_require__(892);
const Impl = __webpack_require__(79);

const impl = utils.implSymbol;

function URL(url) {
  if (!this || this[impl] || !(this instanceof URL)) {
    throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions["USVString"](args[0]);
  if (args[1] !== undefined) {
  args[1] = conversions["USVString"](args[1]);
  }

  module.exports.setup(this, args);
}

URL.prototype.toJSON = function toJSON() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 0; ++i) {
    args[i] = arguments[i];
  }
  return this[impl].toJSON.apply(this[impl], args);
};
Object.defineProperty(URL.prototype, "href", {
  get() {
    return this[impl].href;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].href = V;
  },
  enumerable: true,
  configurable: true
});

URL.prototype.toString = function () {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
  return this.href;
};

Object.defineProperty(URL.prototype, "origin", {
  get() {
    return this[impl].origin;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "protocol", {
  get() {
    return this[impl].protocol;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].protocol = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "username", {
  get() {
    return this[impl].username;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].username = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "password", {
  get() {
    return this[impl].password;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].password = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "host", {
  get() {
    return this[impl].host;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].host = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "hostname", {
  get() {
    return this[impl].hostname;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].hostname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "port", {
  get() {
    return this[impl].port;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].port = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "pathname", {
  get() {
    return this[impl].pathname;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].pathname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "search", {
  get() {
    return this[impl].search;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].search = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "hash", {
  get() {
    return this[impl].hash;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].hash = V;
  },
  enumerable: true,
  configurable: true
});


module.exports = {
  is(obj) {
    return !!obj && obj[impl] instanceof Impl.implementation;
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: URL,
  expose: {
    Window: { URL: URL },
    Worker: { URL: URL }
  }
};



/***/ }),

/***/ 417:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



exports.URL = __webpack_require__(648)["interface"];
/* unused reexport */ __webpack_require__(484).serializeURL;
/* unused reexport */ __webpack_require__(484).serializeURLOrigin;
/* unused reexport */ __webpack_require__(484).basicURLParse;
/* unused reexport */ __webpack_require__(484).setTheUsername;
/* unused reexport */ __webpack_require__(484).setThePassword;
/* unused reexport */ __webpack_require__(484).serializeHost;
/* unused reexport */ __webpack_require__(484).serializeInteger;
/* unused reexport */ __webpack_require__(484).parseURL;


/***/ }),

/***/ 484:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


const punycode = __webpack_require__(876);
const tr46 = __webpack_require__(673);

const specialSchemes = {
  ftp: 21,
  file: null,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

const failure = Symbol("failure");

function countSymbols(str) {
  return punycode.ucs2.decode(str).length;
}

function at(input, idx) {
  const c = input[idx];
  return isNaN(c) ? undefined : String.fromCodePoint(c);
}

function isASCIIDigit(c) {
  return c >= 0x30 && c <= 0x39;
}

function isASCIIAlpha(c) {
  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);
}

function isASCIIAlphanumeric(c) {
  return isASCIIAlpha(c) || isASCIIDigit(c);
}

function isASCIIHex(c) {
  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);
}

function isSingleDot(buffer) {
  return buffer === "." || buffer.toLowerCase() === "%2e";
}

function isDoubleDot(buffer) {
  buffer = buffer.toLowerCase();
  return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
}

function isWindowsDriveLetterCodePoints(cp1, cp2) {
  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
}

function isWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
}

function isNormalizedWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
}

function containsForbiddenHostCodePoint(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function containsForbiddenHostCodePointExcludingPercent(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function isSpecialScheme(scheme) {
  return specialSchemes[scheme] !== undefined;
}

function isSpecial(url) {
  return isSpecialScheme(url.scheme);
}

function defaultPort(scheme) {
  return specialSchemes[scheme];
}

function percentEncode(c) {
  let hex = c.toString(16).toUpperCase();
  if (hex.length === 1) {
    hex = "0" + hex;
  }

  return "%" + hex;
}

function utf8PercentEncode(c) {
  const buf = new Buffer(c);

  let str = "";

  for (let i = 0; i < buf.length; ++i) {
    str += percentEncode(buf[i]);
  }

  return str;
}

function utf8PercentDecode(str) {
  const input = new Buffer(str);
  const output = [];
  for (let i = 0; i < input.length; ++i) {
    if (input[i] !== 37) {
      output.push(input[i]);
    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
      i += 2;
    } else {
      output.push(input[i]);
    }
  }
  return new Buffer(output).toString();
}

function isC0ControlPercentEncode(c) {
  return c <= 0x1F || c > 0x7E;
}

const extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
function isPathPercentEncode(c) {
  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
}

const extraUserinfoPercentEncodeSet =
  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
function isUserinfoPercentEncode(c) {
  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
}

function percentEncodeChar(c, encodeSetPredicate) {
  const cStr = String.fromCodePoint(c);

  if (encodeSetPredicate(c)) {
    return utf8PercentEncode(cStr);
  }

  return cStr;
}

function parseIPv4Number(input) {
  let R = 10;

  if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
    input = input.substring(2);
    R = 16;
  } else if (input.length >= 2 && input.charAt(0) === "0") {
    input = input.substring(1);
    R = 8;
  }

  if (input === "") {
    return 0;
  }

  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);
  if (regex.test(input)) {
    return failure;
  }

  return parseInt(input, R);
}

function parseIPv4(input) {
  const parts = input.split(".");
  if (parts[parts.length - 1] === "") {
    if (parts.length > 1) {
      parts.pop();
    }
  }

  if (parts.length > 4) {
    return input;
  }

  const numbers = [];
  for (const part of parts) {
    if (part === "") {
      return input;
    }
    const n = parseIPv4Number(part);
    if (n === failure) {
      return input;
    }

    numbers.push(n);
  }

  for (let i = 0; i < numbers.length - 1; ++i) {
    if (numbers[i] > 255) {
      return failure;
    }
  }
  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
    return failure;
  }

  let ipv4 = numbers.pop();
  let counter = 0;

  for (const n of numbers) {
    ipv4 += n * Math.pow(256, 3 - counter);
    ++counter;
  }

  return ipv4;
}

function serializeIPv4(address) {
  let output = "";
  let n = address;

  for (let i = 1; i <= 4; ++i) {
    output = String(n % 256) + output;
    if (i !== 4) {
      output = "." + output;
    }
    n = Math.floor(n / 256);
  }

  return output;
}

function parseIPv6(input) {
  const address = [0, 0, 0, 0, 0, 0, 0, 0];
  let pieceIndex = 0;
  let compress = null;
  let pointer = 0;

  input = punycode.ucs2.decode(input);

  if (input[pointer] === 58) {
    if (input[pointer + 1] !== 58) {
      return failure;
    }

    pointer += 2;
    ++pieceIndex;
    compress = pieceIndex;
  }

  while (pointer < input.length) {
    if (pieceIndex === 8) {
      return failure;
    }

    if (input[pointer] === 58) {
      if (compress !== null) {
        return failure;
      }
      ++pointer;
      ++pieceIndex;
      compress = pieceIndex;
      continue;
    }

    let value = 0;
    let length = 0;

    while (length < 4 && isASCIIHex(input[pointer])) {
      value = value * 0x10 + parseInt(at(input, pointer), 16);
      ++pointer;
      ++length;
    }

    if (input[pointer] === 46) {
      if (length === 0) {
        return failure;
      }

      pointer -= length;

      if (pieceIndex > 6) {
        return failure;
      }

      let numbersSeen = 0;

      while (input[pointer] !== undefined) {
        let ipv4Piece = null;

        if (numbersSeen > 0) {
          if (input[pointer] === 46 && numbersSeen < 4) {
            ++pointer;
          } else {
            return failure;
          }
        }

        if (!isASCIIDigit(input[pointer])) {
          return failure;
        }

        while (isASCIIDigit(input[pointer])) {
          const number = parseInt(at(input, pointer));
          if (ipv4Piece === null) {
            ipv4Piece = number;
          } else if (ipv4Piece === 0) {
            return failure;
          } else {
            ipv4Piece = ipv4Piece * 10 + number;
          }
          if (ipv4Piece > 255) {
            return failure;
          }
          ++pointer;
        }

        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;

        ++numbersSeen;

        if (numbersSeen === 2 || numbersSeen === 4) {
          ++pieceIndex;
        }
      }

      if (numbersSeen !== 4) {
        return failure;
      }

      break;
    } else if (input[pointer] === 58) {
      ++pointer;
      if (input[pointer] === undefined) {
        return failure;
      }
    } else if (input[pointer] !== undefined) {
      return failure;
    }

    address[pieceIndex] = value;
    ++pieceIndex;
  }

  if (compress !== null) {
    let swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex !== 0 && swaps > 0) {
      const temp = address[compress + swaps - 1];
      address[compress + swaps - 1] = address[pieceIndex];
      address[pieceIndex] = temp;
      --pieceIndex;
      --swaps;
    }
  } else if (compress === null && pieceIndex !== 8) {
    return failure;
  }

  return address;
}

function serializeIPv6(address) {
  let output = "";
  const seqResult = findLongestZeroSequence(address);
  const compress = seqResult.idx;
  let ignore0 = false;

  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
    if (ignore0 && address[pieceIndex] === 0) {
      continue;
    } else if (ignore0) {
      ignore0 = false;
    }

    if (compress === pieceIndex) {
      const separator = pieceIndex === 0 ? "::" : ":";
      output += separator;
      ignore0 = true;
      continue;
    }

    output += address[pieceIndex].toString(16);

    if (pieceIndex !== 7) {
      output += ":";
    }
  }

  return output;
}

function parseHost(input, isSpecialArg) {
  if (input[0] === "[") {
    if (input[input.length - 1] !== "]") {
      return failure;
    }

    return parseIPv6(input.substring(1, input.length - 1));
  }

  if (!isSpecialArg) {
    return parseOpaqueHost(input);
  }

  const domain = utf8PercentDecode(input);
  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
  if (asciiDomain === null) {
    return failure;
  }

  if (containsForbiddenHostCodePoint(asciiDomain)) {
    return failure;
  }

  const ipv4Host = parseIPv4(asciiDomain);
  if (typeof ipv4Host === "number" || ipv4Host === failure) {
    return ipv4Host;
  }

  return asciiDomain;
}

function parseOpaqueHost(input) {
  if (containsForbiddenHostCodePointExcludingPercent(input)) {
    return failure;
  }

  let output = "";
  const decoded = punycode.ucs2.decode(input);
  for (let i = 0; i < decoded.length; ++i) {
    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
  }
  return output;
}

function findLongestZeroSequence(arr) {
  let maxIdx = null;
  let maxLen = 1; // only find elements > 1
  let currStart = null;
  let currLen = 0;

  for (let i = 0; i < arr.length; ++i) {
    if (arr[i] !== 0) {
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }

      currStart = null;
      currLen = 0;
    } else {
      if (currStart === null) {
        currStart = i;
      }
      ++currLen;
    }
  }

  // if trailing zeros
  if (currLen > maxLen) {
    maxIdx = currStart;
    maxLen = currLen;
  }

  return {
    idx: maxIdx,
    len: maxLen
  };
}

function serializeHost(host) {
  if (typeof host === "number") {
    return serializeIPv4(host);
  }

  // IPv6 serializer
  if (host instanceof Array) {
    return "[" + serializeIPv6(host) + "]";
  }

  return host;
}

function trimControlChars(url) {
  return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
}

function trimTabAndNewline(url) {
  return url.replace(/\u0009|\u000A|\u000D/g, "");
}

function shortenPath(url) {
  const path = url.path;
  if (path.length === 0) {
    return;
  }
  if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
    return;
  }

  path.pop();
}

function includesCredentials(url) {
  return url.username !== "" || url.password !== "";
}

function cannotHaveAUsernamePasswordPort(url) {
  return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
}

function isNormalizedWindowsDriveLetter(string) {
  return /^[A-Za-z]:$/.test(string);
}

function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
  this.pointer = 0;
  this.input = input;
  this.base = base || null;
  this.encodingOverride = encodingOverride || "utf-8";
  this.stateOverride = stateOverride;
  this.url = url;
  this.failure = false;
  this.parseError = false;

  if (!this.url) {
    this.url = {
      scheme: "",
      username: "",
      password: "",
      host: null,
      port: null,
      path: [],
      query: null,
      fragment: null,

      cannotBeABaseURL: false
    };

    const res = trimControlChars(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
  }

  const res = trimTabAndNewline(this.input);
  if (res !== this.input) {
    this.parseError = true;
  }
  this.input = res;

  this.state = stateOverride || "scheme start";

  this.buffer = "";
  this.atFlag = false;
  this.arrFlag = false;
  this.passwordTokenSeenFlag = false;

  this.input = punycode.ucs2.decode(this.input);

  for (; this.pointer <= this.input.length; ++this.pointer) {
    const c = this.input[this.pointer];
    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

    // exec state machine
    const ret = this["parse " + this.state](c, cStr);
    if (!ret) {
      break; // terminate algorithm
    } else if (ret === failure) {
      this.failure = true;
      break;
    }
  }
}

URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
  if (isASCIIAlpha(c)) {
    this.buffer += cStr.toLowerCase();
    this.state = "scheme";
  } else if (!this.stateOverride) {
    this.state = "no scheme";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
    this.buffer += cStr.toLowerCase();
  } else if (c === 58) {
    if (this.stateOverride) {
      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
        return false;
      }

      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
        return false;
      }

      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
        return false;
      }

      if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
        return false;
      }
    }
    this.url.scheme = this.buffer;
    this.buffer = "";
    if (this.stateOverride) {
      return false;
    }
    if (this.url.scheme === "file") {
      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
        this.parseError = true;
      }
      this.state = "file";
    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
      this.state = "special relative or authority";
    } else if (isSpecial(this.url)) {
      this.state = "special authority slashes";
    } else if (this.input[this.pointer + 1] === 47) {
      this.state = "path or authority";
      ++this.pointer;
    } else {
      this.url.cannotBeABaseURL = true;
      this.url.path.push("");
      this.state = "cannot-be-a-base-URL path";
    }
  } else if (!this.stateOverride) {
    this.buffer = "";
    this.state = "no scheme";
    this.pointer = -1;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {
    return failure;
  } else if (this.base.cannotBeABaseURL && c === 35) {
    this.url.scheme = this.base.scheme;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.url.cannotBeABaseURL = true;
    this.state = "fragment";
  } else if (this.base.scheme === "file") {
    this.state = "file";
    --this.pointer;
  } else {
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
  if (c === 47) {
    this.state = "authority";
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
  this.url.scheme = this.base.scheme;
  if (isNaN(c)) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
  } else if (c === 47) {
    this.state = "relative slash";
  } else if (c === 63) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.state = "fragment";
  } else if (isSpecial(this.url) && c === 92) {
    this.parseError = true;
    this.state = "relative slash";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice(0, this.base.path.length - 1);

    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
  if (isSpecial(this.url) && (c === 47 || c === 92)) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "special authority ignore slashes";
  } else if (c === 47) {
    this.state = "authority";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "special authority ignore slashes";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
  if (c !== 47 && c !== 92) {
    this.state = "authority";
    --this.pointer;
  } else {
    this.parseError = true;
  }

  return true;
};

URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
  if (c === 64) {
    this.parseError = true;
    if (this.atFlag) {
      this.buffer = "%40" + this.buffer;
    }
    this.atFlag = true;

    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
    const len = countSymbols(this.buffer);
    for (let pointer = 0; pointer < len; ++pointer) {
      const codePoint = this.buffer.codePointAt(pointer);

      if (codePoint === 58 && !this.passwordTokenSeenFlag) {
        this.passwordTokenSeenFlag = true;
        continue;
      }
      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
      if (this.passwordTokenSeenFlag) {
        this.url.password += encodedCodePoints;
      } else {
        this.url.username += encodedCodePoints;
      }
    }
    this.buffer = "";
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92)) {
    if (this.atFlag && this.buffer === "") {
      this.parseError = true;
      return failure;
    }
    this.pointer -= countSymbols(this.buffer) + 1;
    this.buffer = "";
    this.state = "host";
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse hostname"] =
URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
  if (this.stateOverride && this.url.scheme === "file") {
    --this.pointer;
    this.state = "file host";
  } else if (c === 58 && !this.arrFlag) {
    if (this.buffer === "") {
      this.parseError = true;
      return failure;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));
    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "port";
    if (this.stateOverride === "hostname") {
      return false;
    }
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92)) {
    --this.pointer;
    if (isSpecial(this.url) && this.buffer === "") {
      this.parseError = true;
      return failure;
    } else if (this.stateOverride && this.buffer === "" &&
               (includesCredentials(this.url) || this.url.port !== null)) {
      this.parseError = true;
      return false;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));
    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "path start";
    if (this.stateOverride) {
      return false;
    }
  } else {
    if (c === 91) {
      this.arrFlag = true;
    } else if (c === 93) {
      this.arrFlag = false;
    }
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
  if (isASCIIDigit(c)) {
    this.buffer += cStr;
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92) ||
             this.stateOverride) {
    if (this.buffer !== "") {
      const port = parseInt(this.buffer);
      if (port > Math.pow(2, 16) - 1) {
        this.parseError = true;
        return failure;
      }
      this.url.port = port === defaultPort(this.url.scheme) ? null : port;
      this.buffer = "";
    }
    if (this.stateOverride) {
      return false;
    }
    this.state = "path start";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

const fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);

URLStateMachine.prototype["parse file"] = function parseFile(c) {
  this.url.scheme = "file";

  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "file slash";
  } else if (this.base !== null && this.base.scheme === "file") {
    if (isNaN(c)) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 63) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||
          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        shortenPath(this.url);
      } else {
        this.parseError = true;
      }

      this.state = "path";
      --this.pointer;
    }
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "file host";
  } else {
    if (this.base !== null && this.base.scheme === "file") {
      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
        this.url.path.push(this.base.path[0]);
      } else {
        this.url.host = this.base.host;
      }
    }
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
    --this.pointer;
    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
      this.parseError = true;
      this.state = "path";
    } else if (this.buffer === "") {
      this.url.host = "";
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
    } else {
      let host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      if (host === "localhost") {
        host = "";
      }
      this.url.host = host;

      if (this.stateOverride) {
        return false;
      }

      this.buffer = "";
      this.state = "path start";
    }
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
  if (isSpecial(this.url)) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "path";

    if (c !== 47 && c !== 92) {
      --this.pointer;
    }
  } else if (!this.stateOverride && c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (!this.stateOverride && c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else if (c !== undefined) {
    this.state = "path";
    if (c !== 47) {
      --this.pointer;
    }
  }

  return true;
};

URLStateMachine.prototype["parse path"] = function parsePath(c) {
  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||
      (!this.stateOverride && (c === 63 || c === 35))) {
    if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
    }

    if (isDoubleDot(this.buffer)) {
      shortenPath(this.url);
      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      }
    } else if (isSingleDot(this.buffer) && c !== 47 &&
               !(isSpecial(this.url) && c === 92)) {
      this.url.path.push("");
    } else if (!isSingleDot(this.buffer)) {
      if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
        if (this.url.host !== "" && this.url.host !== null) {
          this.parseError = true;
          this.url.host = "";
        }
        this.buffer = this.buffer[0] + ":";
      }
      this.url.path.push(this.buffer);
    }
    this.buffer = "";
    if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
      while (this.url.path.length > 1 && this.url.path[0] === "") {
        this.parseError = true;
        this.url.path.shift();
      }
    }
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    }
    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.

    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += percentEncodeChar(c, isPathPercentEncode);
  }

  return true;
};

URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
  if (c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else {
    // TODO: Add: not a URL code point
    if (!isNaN(c) && c !== 37) {
      this.parseError = true;
    }

    if (c === 37 &&
        (!isASCIIHex(this.input[this.pointer + 1]) ||
         !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    if (!isNaN(c)) {
      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
    }
  }

  return true;
};

URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
  if (isNaN(c) || (!this.stateOverride && c === 35)) {
    if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
      this.encodingOverride = "utf-8";
    }

    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead
    for (let i = 0; i < buffer.length; ++i) {
      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||
          buffer[i] === 0x3C || buffer[i] === 0x3E) {
        this.url.query += percentEncode(buffer[i]);
      } else {
        this.url.query += String.fromCodePoint(buffer[i]);
      }
    }

    this.buffer = "";
    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
  if (isNaN(c)) { // do nothing
  } else if (c === 0x0) {
    this.parseError = true;
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
  }

  return true;
};

function serializeURL(url, excludeFragment) {
  let output = url.scheme + ":";
  if (url.host !== null) {
    output += "//";

    if (url.username !== "" || url.password !== "") {
      output += url.username;
      if (url.password !== "") {
        output += ":" + url.password;
      }
      output += "@";
    }

    output += serializeHost(url.host);

    if (url.port !== null) {
      output += ":" + url.port;
    }
  } else if (url.host === null && url.scheme === "file") {
    output += "//";
  }

  if (url.cannotBeABaseURL) {
    output += url.path[0];
  } else {
    for (const string of url.path) {
      output += "/" + string;
    }
  }

  if (url.query !== null) {
    output += "?" + url.query;
  }

  if (!excludeFragment && url.fragment !== null) {
    output += "#" + url.fragment;
  }

  return output;
}

function serializeOrigin(tuple) {
  let result = tuple.scheme + "://";
  result += serializeHost(tuple.host);

  if (tuple.port !== null) {
    result += ":" + tuple.port;
  }

  return result;
}

module.exports.serializeURL = serializeURL;

module.exports.serializeURLOrigin = function (url) {
  // https://url.spec.whatwg.org/#concept-url-origin
  switch (url.scheme) {
    case "blob":
      try {
        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
      } catch (e) {
        // serializing an opaque origin returns "null"
        return "null";
      }
    case "ftp":
    case "gopher":
    case "http":
    case "https":
    case "ws":
    case "wss":
      return serializeOrigin({
        scheme: url.scheme,
        host: url.host,
        port: url.port
      });
    case "file":
      // spec says "exercise to the reader", chrome says "file://"
      return "file://";
    default:
      // serializing an opaque origin returns "null"
      return "null";
  }
};

module.exports.basicURLParse = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
  if (usm.failure) {
    return "failure";
  }

  return usm.url;
};

module.exports.setTheUsername = function (url, username) {
  url.username = "";
  const decoded = punycode.ucs2.decode(username);
  for (let i = 0; i < decoded.length; ++i) {
    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.setThePassword = function (url, password) {
  url.password = "";
  const decoded = punycode.ucs2.decode(password);
  for (let i = 0; i < decoded.length; ++i) {
    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.serializeHost = serializeHost;

module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;

module.exports.serializeInteger = function (integer) {
  return String(integer);
};

module.exports.parseURL = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  // We don't handle blobs, so this just delegates:
  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
};


/***/ }),

/***/ 892:
/***/ ((module) => {



module.exports.mixin = function mixin(target, source) {
  const keys = Object.getOwnPropertyNames(source);
  for (let i = 0; i < keys.length; ++i) {
    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
  }
};

module.exports.wrapperSymbol = Symbol("wrapper");
module.exports.implSymbol = Symbol("impl");

module.exports.wrapperForImpl = function (impl) {
  return impl[module.exports.wrapperSymbol];
};

module.exports.implForWrapper = function (wrapper) {
  return wrapper[module.exports.implSymbol];
};



/***/ }),

/***/ 290:
/***/ ((module) => {

module.exports = require("async_hooks");

/***/ }),

/***/ 876:
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ 540:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  AbortError: () => (/* binding */ AbortError),
  FetchError: () => (/* binding */ FetchError),
  Headers: () => (/* binding */ Headers),
  Request: () => (/* binding */ Request),
  Response: () => (/* binding */ Response),
  "default": () => (/* binding */ lib)
});

;// CONCATENATED MODULE: external "stream"
const external_stream_namespaceObject = require("stream");
;// CONCATENATED MODULE: external "http"
const external_http_namespaceObject = require("http");
;// CONCATENATED MODULE: external "url"
const external_url_namespaceObject = require("url");
// EXTERNAL MODULE: ./node_modules/whatwg-url/lib/public-api.js
var public_api = __webpack_require__(417);
;// CONCATENATED MODULE: external "https"
const external_https_namespaceObject = require("https");
;// CONCATENATED MODULE: external "zlib"
const external_zlib_namespaceObject = require("zlib");
;// CONCATENATED MODULE: ./node_modules/node-fetch/lib/index.mjs







// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = external_stream_namespaceObject.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = external_stream_namespaceObject.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof external_stream_namespaceObject) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof external_stream_namespaceObject) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof external_stream_namespaceObject)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof external_stream_namespaceObject && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof external_stream_namespaceObject) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = external_http_namespaceObject.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');
const URL = external_url_namespaceObject.URL || public_api.URL;

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = external_url_namespaceObject.parse;
const format_url = external_url_namespaceObject.format;

/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */
function parseURL(urlStr) {
	/*
 	Check whether the URL is absolute or not
 		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
 	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
 */
	if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
		urlStr = new URL(urlStr).toString();
	}

	// Fallback to old implementation for arbitrary URLs
	return parse_url(urlStr);
}

const streamDestructionSupported = "destroy" in external_stream_namespaceObject.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parseURL(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parseURL(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parseURL(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof external_stream_namespaceObject.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

const URL$1 = external_url_namespaceObject.URL || public_api.URL;

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = external_stream_namespaceObject.PassThrough;

const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
	const orig = new URL$1(original).hostname;
	const dest = new URL$1(destination).hostname;

	return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
};

/**
 * isSameProtocol reports whether the two provided URLs use the same protocol.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */
const isSameProtocol = function isSameProtocol(destination, original) {
	const orig = new URL$1(original).protocol;
	const dest = new URL$1(destination).protocol;

	return orig === dest;
};

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? external_https_namespaceObject : external_http_namespaceObject).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof external_stream_namespaceObject.Readable) {
				destroyStream(request.body, error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));

			if (response && response.body) {
				destroyStream(response.body, err);
			}

			finalize();
		});

		fixResponseChunkedTransferBadEnding(req, function (err) {
			if (signal && signal.aborted) {
				return;
			}

			if (response && response.body) {
				destroyStream(response.body, err);
			}
		});

		/* c8 ignore next 18 */
		if (parseInt(process.version.substring(1)) < 14) {
			// Before Node.js 14, pipeline() does not fully support async iterators and does not always
			// properly handle when the socket close/end events are out of order.
			req.on('socket', function (s) {
				s.addListener('close', function (hadError) {
					// if a data listener is still present we didn't end cleanly
					const hasDataListener = s.listenerCount('data') > 0;

					// if end happened before close but the socket didn't emit an error, do it now
					if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
						const err = new Error('Premature close');
						err.code = 'ERR_STREAM_PREMATURE_CLOSE';
						response.body.emit('error', err);
					}
				});
			});
		}

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				let locationURL = null;
				try {
					locationURL = location === null ? null : new URL$1(location, request.url).toString();
				} catch (err) {
					// error here can only be invalid URL in Location: header
					// do not throw when options.redirect == manual
					// let the user extract the errorneous redirect URL
					if (request.redirect !== 'manual') {
						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
						finalize();
						return;
					}
				}

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size
						};

						if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
							for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
								requestOpts.headers.delete(name);
							}
						}

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: external_zlib_namespaceObject.Z_SYNC_FLUSH,
				finishFlush: external_zlib_namespaceObject.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(external_zlib_namespaceObject.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(external_zlib_namespaceObject.createInflate());
					} else {
						body = body.pipe(external_zlib_namespaceObject.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				raw.on('end', function () {
					// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.
					if (!response) {
						response = new Response(body, response_options);
						resolve(response);
					}
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof external_zlib_namespaceObject.createBrotliDecompress === 'function') {
				body = body.pipe(external_zlib_namespaceObject.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
	let socket;

	request.on('socket', function (s) {
		socket = s;
	});

	request.on('response', function (response) {
		const headers = response.headers;

		if (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {
			response.once('close', function (hadError) {
				// tests for socket presence, as in some situations the
				// the 'socket' event is not triggered for the request
				// (happens in deno), avoids `TypeError`
				// if a data listener is still present we didn't end cleanly
				const hasDataListener = socket && socket.listenerCount('data') > 0;

				if (hasDataListener && !hadError) {
					const err = new Error('Premature close');
					err.code = 'ERR_STREAM_PREMATURE_CLOSE';
					errorCallback(err);
				}
			});
		}
	});
}

function destroyStream(stream, err) {
	if (stream.destroy) {
		stream.destroy(err);
	} else {
		// node < 8
		stream.emit('error', err);
		stream.end();
	}
}

/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

/* harmony default export */ const lib = (fetch);



/***/ }),

/***/ 635:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __rewriteRelativeImportExtension: () => (/* binding */ __rewriteRelativeImportExtension),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


/***/ }),

/***/ 472:
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  handler: () => (/* reexport */ handler)
});

// EXTERNAL MODULE: ./node_modules/@forge/resolver/out/index.js
var out = __webpack_require__(382);
;// CONCATENATED MODULE: ./src/resolvers/index.ts

const resolver = new out/* default */.A();
resolver.define('getText', (req) => {
    console.log(req);
    return 'Hello world!';
});
const handler = resolver.getDefinitions();

;// CONCATENATED MODULE: ./src/index.ts


})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,